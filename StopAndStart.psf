<File version="3.2">
  <FileID>799e3816-d9c3-4b7d-bd34-218507671148</FileID>
  <Preview>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
RK5CYII=</Preview>
  <Form>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</Form>
  <Code><![CDATA[
$formStopAndStart_Load = {
	#TODO: Initialize Form Controls here
	
	Refresh-StatusBar
	
	If ($global:SelectedBigram -eq 'Select Bigram' -or $global:SelectedBackupfolder -eq 'Select Folder' )
	{
		$richtextbox1.AppendText("`n")
		$richtextbox1.AppendText("You Need to select BIGRAM and BackupFolder")
		$richtextbox1.ScrollToCaret()
		$formStopAndStart.Close()
	}
	
	
	if ($global:SelectedBackupfolder -eq 'Select Folder' -or $global:SelectedBigram -eq 'Select Bigram')
	{
		$buttonStartIIS.Enabled = $false
		$buttonStopIIS.Enabled = $false
		$buttonStopServices.Enabled = $false
		$buttonStartServices.Enabled = $false
		$buttonCheckAfterUpgrade.Enabled = $false
		$buttonLoadDataRestorefile.Enabled = $false
	}
	
	else
	{
		$buttonStartIIS.Enabled = $true
		$buttonStopIIS.Enabled = $true
		$buttonStopServices.Enabled = $true
		$buttonStartServices.Enabled = $true
		$buttonCheckAfterUpgrade.Enabled = $true
		$buttonLoadDataRestorefile.Enabled = $true
	}
}

$buttonClose_Click = {
	#TODO: Place custom script here
	$formStopAndStart.Close()
}

$buttonStopServices_Click = {
	#TODO: Place custom script here
	
	$result = @()
	
	$services = "PBSScheduler_$global:SelectedBigram", "Scheduler", "Ciceron Server Manager", "NeptuneMB_$global:SelectedBigram", "PersonecPBatchManager$global:SelectedBigram", "PersonecPUtdataExportImportService$global:SelectedBigram", "RSPFlexService$global:SelectedBigram", "Visma.P-Background-Service - $global:SelectedBigram", "Visma.PersonecP.PufIa.WinSvc - $global:SelectedBigram"
	
	$StartStopProgressBar.Maximum = $services.Count
	$StartStopProgressBar.Step = 1
	$StartStopProgressBar.Value = 0
	
	$StartStopRichTextBox.AppendText("`n")
	$StartStopRichTextBox.AppendText("Stopping Services ")
	
	foreach ($service in $services)
	{
		$res = Get-CimInstance win32_service | Where-Object Name -eq $service | Select-Object name, startname, state, Startmode -ErrorAction SilentlyContinue
		$result += $res
	}
	
	$xmlData = $result | ConvertTo-Xml -NoTypeInformation
	
	# Save the XML data to a file
	$restorefile = "$global:SelectedBigram" + "ServicesRestorePoint.xml"

	$xml_exist = (test-path "$global:InstallDrive\Visma\Install\backup\$global:SelectedBackupfolder\$restorefile")
	

	
	if ($xml_exist -eq $false)
	{
		$xmlData.Save("$global:InstallDrive\Visma\Install\backup\$global:SelectedBackupfolder\$restorefile")
		$StartStopRichTextBox.AppendText("`n")
		$StartStopRichTextBox.AppendText("$restorefile Service Restore File created in backupfolder ")
	}
	
	
	Write-Log -Level INFO -Message "Stopping Services --------------"
	
	foreach ($service in $services)
	{
		$checkservice = Get-Service -Name $service -ErrorAction SilentlyContinue
		
		if ($checkservice -eq $null)
		{
			$StartStopRichTextBox.AppendText("`n")
			$StartStopRichTextBox.AppendText("$service does not exist")
			Write-Log -Level INFO -Message "$service does not exist"
			$StartStopRichTextBox.ScrollToCaret()
			$StartStopProgressBar.PerformStep()
		}
		else
		{
			Stop-Service -Name $service -Force -ErrorAction SilentlyContinue -Verbose
			$StartStopRichTextBox.AppendText("`n")
			$StartStopRichTextBox.AppendText("$service Stopped ")
			$StartStopRichTextBox.ScrollToCaret()
			$StartStopProgressBar.PerformStep()
			Write-Log -Level INFO -Message "$service Stopped!"
		}
	}
	
	$StartStopRichTextBox.AppendText("`n")
	$StartStopRichTextBox.AppendText("Services Stopped")
	$StartStopRichTextBox.ScrollToCaret()
	$richtextbox1.AppendText("`n")
	$richtextbox1.AppendText("Services Stopped")
	$richtextbox1.ScrollToCaret()
}

$buttonStopIIS_Click = {
	#TODO: Place custom script here
	
	
	$StartStopRichTextBox.AppendText("`n")
	$StartStopRichTextBox.AppendText("Stop $global:SelectedBigram site")
	$StartStopRichTextBox.ScrollToCaret()
	
	
	$checksite = Get-IISSite -Name $global:SelectedBigram
	
	if ($checksite -eq $null)
	{
		$StartStopRichTextBox.AppendText("`n")
		$StartStopRichTextBox.AppendText("$global:SelectedBigram site does not exist ")
		$StartStopRichTextBox.ScrollToCaret()
	}
	
	else
	{
		
		
		Write-Log -Level INFO -Message "Stop $global:SelectedBigram Site"
		
		Stop-IISSite -Name $global:SelectedBigram -Confirm:$false
		$StartStopRichTextBox.AppendText("`n")
		$StartStopRichTextBox.AppendText("$global:SelectedBigram site Stopped ")
		$StartStopRichTextBox.ScrollToCaret()
	}
	Write-Log -Level INFO -Message "$global:SelectedBigram site Stopped"
	$richtextbox1.AppendText("`n")
	$richtextbox1.AppendText("$global:SelectedBigram site Stopped")
	$richtextbox1.ScrollToCaret()
}

$buttonStartIIS_Click = {
	#TODO: Place custom script here
	$checksite = Get-IISSite -Name $selectedBigram
	
	if ($checksite -eq $null)
	{
		$StartStopRichTextBox.AppendText("`n")
		$StartStopRichTextBox.AppendText("$global:SelectedBigram site does not exist ")
		$StartStopRichTextBox.ScrollToCaret()
	}
	
	else
	{
		
		
		Write-Log -Level INFO -Message "Start $global:SelectedBigram Site --------------"
		
		Start-IISSite -Name $selectedBigram
		
		$StartStopRichTextBox.AppendText("`n")
		$StartStopRichTextBox.AppendText("$global:SelectedBigram site Started ")
		$StartStopRichTextBox.ScrollToCaret()
		Write-Log -Level INFO -Message "$global:SelectedBigram site Started"
		
		$richtextbox1.AppendText("`n")
		$richtextbox1.AppendText("$global:SelectedBigram site Started")
		$richtextbox1.ScrollToCaret()
		
	}
}

$buttonStartServices_Click = {
	#TODO: Place custom script here
	Add-Type -AssemblyName PresentationCore, PresentationFramework
	$ButtonType = [System.Windows.MessageBoxButton]::YesNo
	$MessageIcon = [System.Windows.MessageBoxImage]::Information
	$MessageBody = "Have you started the website? Otherwise, PUFLA will not start..."
	$MessageTitle = "Website Started?"
	
	$Result = [System.Windows.MessageBox]::Show($MessageBody, $MessageTitle, $ButtonType, $MessageIcon)
	
	if ($Result -eq [System.Windows.MessageBoxResult]::Yes)
	{
		$StartStopRichTextBox.AppendText("`n")
		$StartStopRichTextBox.AppendText("Starting Service to original mode and status ")
		$StartStopRichTextBox.ScrollToCaret()
		
		# Load the XML data from the file
		$restorefile = "$global:SelectedBigram" + "ServicesRestorePoint.xml"
		[XML]$xmlData = Get-Content "$InstallDrive\Visma\Install\backup\$selectedBackupfolder\$restorefile"
		
		$countServices = $xmlData.Objects.Object.Count
		
		$StartStopProgressBar.Maximum = $countServices
		$StartStopProgressBar.Step = 1
		$StartStopProgressBar.Value = 0
		
		# Iterate through each service and restart it
		foreach ($service in $xmlData.Objects.Object)
		{
			$serviceName = $service.Property[0]."#text"
			$serviceStartName = $service.Property[1]."#text"
			$serviceStatus = $service.Property[2]."#text"
			$ServiceStartType = $service.Property[3]."#text"
			
			if ($ServiceStartType -eq 'Auto')
			{
				Set-Service -Name $serviceName -StartupType Automatic
				$StartStopRichTextBox.AppendText("`n")
				$StartStopRichTextBox.AppendText("$serviceName set to AUTOMATIC ")
				Write-Log -Level INFO -Message "$serviceName set to AUTOMATIC "
			}
			
			if ($ServiceStartType -eq 'Manual')
			{
				Set-Service -Name $serviceName -StartupType Manual
				$StartStopRichTextBox.AppendText("`n")
				$StartStopRichTextBox.AppendText("$serviceName set to MANUAL ")
				Write-Log -Level INFO -Message "$serviceName set to MANUAL "
			}
			
			if ($ServiceStartType -eq 'Disabled')
			{
				Set-Service -Name $serviceName -StartupType Disabled
				$StartStopRichTextBox.AppendText("`n")
				$StartStopRichTextBox.AppendText("$serviceName set to DISABLED ")
				Write-Log -Level INFO -Message "$serviceName set to DISABLED "
			}
			
			if ($serviceStatus -eq 'Running')
			{
				try
				{
					Start-Service -Name $serviceName -ErrorAction Stop
					$StartStopProgressBar.PerformStep()
					$StartStopRichTextBox.AppendText("`n")
					$StartStopRichTextBox.AppendText("$serviceName set to STARTED ")
					Write-Log -Level INFO -Message "Service $serviceName started successfully."
				}
				catch
				{
					$StartStopRichTextBox.AppendText("`n")
					$StartStopRichTextBox.AppendText("$serviceName ERROR ERROR ERROR ")
					Write-Log -Level ERROR -Message "Failed to start the service: $serviceName. Error: $_"
				}
			}
			
			if ($serviceStartName -ne 'Localsystem')
			{
				Write-Host "$serviceName is running with $serviceStartName"
				$StartStopRichTextBox.AppendText("`n")
				$StartStopRichTextBox.AppendText("$serviceName running with Account ")
				$StartStopRichTextBox.AppendText("`n")
				$StartStopRichTextBox.AppendText("Notify customer ")
				Write-Log -Level INFO -Message "$serviceName running with $serviceStartName "
			}
			
			$StartStopProgressBar.PerformStep()
		}
		
		$StartStopRichTextBox.AppendText("`n")
		$StartStopRichTextBox.AppendText("Done with starting services")
		$StartStopRichTextBox.ScrollToCaret()
		$richtextbox1.AppendText("`n")
		$richtextbox1.AppendText("Services Started")
		$richtextbox1.ScrollToCaret()
	}
	
}

$buttonLoadDataRestorefile_Click = {
	#TODO: Place custom script here
	
	
	
	$data = @()
	$restorefile = "$global:SelectedBigram" + "ServicesRestorePoint.xml"
	[XML]$xmlData = Get-Content "$InstallDrive\Visma\Install\backup\$selectedBackupfolder\$restorefile"
	
	
	foreach ($service in $xmlData.Objects.Object)
	{
		$object = New-Object -TypeName PSObject
		$object | Add-Member -MemberType NoteProperty -Name 'Service' -Value $service.Property[0]."#text"
		$object | Add-Member -MemberType NoteProperty -Name 'Konto' -Value $service.Property[1]."#text"
		$object | Add-Member -MemberType NoteProperty -Name 'Status' -Value $service.Property[2]."#text"
		$object | Add-Member -MemberType NoteProperty -Name 'StartMode' -Value $service.Property[3]."#text"

		$data += $object
	}
	
	$result = $data | Out-String
	$StartStopRichTextBox.AppendText("`n")
	$StartStopRichTextBox.AppendText("====STATUS BEFORE UPGRADE====")
	$StartStopRichTextBox.AppendText("`n")
	$StartStopRichTextBox.AppendText("$result")
	$StartStopRichTextBox.ScrollToCaret()
}

$buttonCheckAfterUpgrade_Click = {
	#TODO: Place custom script here
	
	$result = @()
	$data = @()
	$Services = "Scheduler", "Ciceron Server Manager", "NeptuneMB_$selectedBigram", "PersonecPBatchManager$selectedBigram", "PersonecPUtdataExportImportService$selectedBigram", "RSPFlexService$selectedBigram", "Visma.P-Background-Service - $selectedBigram", "Visma.PersonecP.PufIa.WinSvc - $selectedBigram"
		
	foreach ($service in $Services)
	{
		$checkservice = Get-Service -Name $Service -ErrorAction SilentlyContinue
		
		if ($checkservice -eq $null)
		{
			$StartStopRichTextBox.AppendText("`n")
			$StartStopRichTextBox.AppendText("$service does not exist on this server")
			$StartStopRichTextBox.ScrollToCaret()
		}
		
		else
		{
			$res = Get-CimInstance win32_service | Where-Object Name -eq $Service | Select-Object name, startname, state, Startmode -ErrorAction SilentlyContinue
			$result += $res
		}
		
	}
	
	[XML]$xmlData = $result | ConvertTo-Xml -NoTypeInformation
	
	foreach ($service in $xmlData.Objects.Object)
	{
		
		$object = New-Object -TypeName PSObject
		$object | Add-Member -MemberType NoteProperty -Name 'Service' -Value $service.Property[0]."#text"
		$object | Add-Member -MemberType NoteProperty -Name 'Konto' -Value $service.Property[1]."#text"
		$object | Add-Member -MemberType NoteProperty -Name 'Status' -Value $service.Property[2]."#text"
		$object | Add-Member -MemberType NoteProperty -Name 'StartMode' -Value $service.Property[3]."#text"
		
		$data += $object
		
	}
	
	$result = $data | Out-String
	
	
	$utresult = $utdata | Out-String
	$StartStopRichTextBox.AppendText("`n")
	$StartStopRichTextBox.AppendText("====STATUS LIVE====")
	$StartStopRichTextBox.AppendText("`n")
	$StartStopRichTextBox.AppendText("$result")
	$StartStopRichTextBox.ScrollToCaret()
	
}
]]></Code>
  <TV>0</TV>
  <Mode>1</Mode>
  <Assemblies />
</File>