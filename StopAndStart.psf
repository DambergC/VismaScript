<File version="3.2">
  <FileID>799e3816-d9c3-4b7d-bd34-218507671148</FileID>
  <Preview>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
6FWuGfzy+mMPZ5gPnPd3s1T4R/9J+f/7b5R7+Lby/D3mudmmBPw/Jn+ivJ9HKM/8A+Q1BkPzFdT5
lZaWosvmHye3wTSS0gal5eTp6vVkPaoKqNC8nm/KRa5ZyXwzoOebQfrpT/Ocmd/+nmd+D61DbVD5
ZRWKu3FLl288VEq5X4Wm5Xx9evO41q+Ceo+SU5N07W6ucupbVVTnVvz9+7qWWG5ecymzrFFJqanm
9Rxl15llm39wux6h+e16PFtOTlmZrl27r6RS83nM83mm1HyxXQghhPykKW4I6tKd3NDgl13hUnqJ
GdxDMQO/+ZlpBsrkggYlm73k55NS2Bh6rX+6/jwqblaBLQDXzcBvBuxzZrDOsicEmmkzSs1Oo0m2
GaTt9/iHjpyT9SAhVbfvJiru+n11dXUrN7dQOw9dNmNg8It5QjHLsMv6YtnXH4XeK62/IJjYaZLy
arVu62ElJWfo888/V0Zmnn5vfsZeu6PNu0+H9vbTy8zOqV3nUltwmkOfPSGzwmyLnNA26d8+tgQ0
BZ68XAGw9/1vCfYp3wzOBXW+ZzG/+7qVP3ePGej/q8lfqOB/+Tvlrzqpgts5KvjjfzLP/ZXJnyl/
6REVODvMIGsG6PqA2esu1JW4+4rPqVNxc0CJ8bd14vhZXUutUL5pN7dv39eVq9d1PbHEFA23EuIT
dd1syCvXbup2eo0KTfmw61DUFFR6RpbuphYoITVD97MaVNLi1cMEs9Fvx+vy1Ru6nVGr4iavklNS
FHvjnmLjbiguvsgUkjYVN/r1KCtdl68/VHJRi5nOpTtxl3X89BXdzWlUTmGJbt29q9i7Gcqqdik5
OcUUlfu6euOGTp08o0sP8pRTYz/T89uFEELIT5lSR5uu3M/Tw6xKsxPnCQ3UoZTbr4A9Onz6pjZt
O6ytO48pZufxULbsOKromMM6cy3J7Dz6vpzHJKPUFfre/dyNDGWaHVr7M9vsXds9c7tMm5wqb+is
+70HTsnldGrcpEWK3n1O46ZE6c7dBKWaMWrvsWtm/Gr7Yp5QzDKyzcBtl2mPVtifdkc2wzxnD9Xb
2JP28usCephToxnzVisrKy9UMm6bcW7OomgzjdOs89N57JEI+/jpcx6zDap0+V5uaJv0bx97PkBz
68cvXwCcwccqMA2isMEMeDZm0Ctydagwu0b5/2mMGej/m8l/f1oEpsQob9Rq5f/RXz59/H+8bT6Q
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</Preview>
  <Form>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</Form>
  <Code><![CDATA[
$formStopAndStart_Load = {
	#TODO: Initialize Form Controls here
	
	Refresh-StatusBar
	
	
	if ($global:SelectedBackupfolder -eq 'Select Folder' -or $global:SelectedBigram -eq 'Select Bigram')
	{
		$buttonStartIIS.Enabled = $false
		$buttonStopIIS.Enabled = $false
		$buttonStopServices.Enabled = $false
		$buttonStartServices.Enabled = $false
		$buttonCheckAfterUpgrade.Enabled = $false
		$buttonLoadDataRestorefile.Enabled = $false
	}
	
	else
	{
		$buttonStartIIS.Enabled = $true
		$buttonStopIIS.Enabled = $true
		$buttonStopServices.Enabled = $true
		$buttonStartServices.Enabled = $true
		$buttonCheckAfterUpgrade.Enabled = $true
		$buttonLoadDataRestorefile.Enabled = $true
	}
}

$buttonClose_Click = {
	#TODO: Place custom script here
	$formStopAndStart.Close()
}

$buttonStopServices_Click = {
	#TODO: Place custom script here
	
	$result = @()
	
	$services = "PBSScheduler_$global:SelectedBigram", "Scheduler", "Ciceron Server Manager", "NeptuneMB_$global:SelectedBigram", "PersonecPBatchManager$global:SelectedBigram", "PersonecPUtdataExportImportService$global:SelectedBigram", "RSPFlexService$global:SelectedBigram", "Visma.P-Background-Service - $global:SelectedBigram", "Visma.PersonecP.PufIa.WinSvc - $global:SelectedBigram"
	
	$progressbaroverlay.Maximum = $services.Count
	$progressbaroverlay.Step = 1
	$progressbaroverlay.Value = 0
	
	$StartStopRichTextBox.AppendText("`n")
	$StartStopRichTextBox.AppendText("Stopping Services ")
	
	
	foreach ($service in $services)
	{
		$res = Get-CimInstance win32_service | Where-Object Name -eq $Service | Select-Object name, startname, state, Startmode -ErrorAction SilentlyContinue
		$result += $res
	}
	
	$xmlData = $result | ConvertTo-Xml -NoTypeInformation
	
	# Save the XML data to a file
	$xml_exist = (Test-Path -Path "$global:InstallDrive\Visma\Install\backup\$global:SelectedBackupfolder\ServicesRestorePoint.xml")
	
	if ($xml_exist -eq $false)
	{
		$xmlData.Save("$global:InstallDrive\Visma\Install\backup\$global:SelectedBackupfolder\ServicesRestorePoint.xml")
		
		$StartStopRichTextBox.AppendText("`n")
		$StartStopRichTextBox.AppendText("Service Restore File created in backupfolder ")
		
		
	}
	
	Write-Log -Level INFO -Message "Stopping Services --------------"
	
	
	$progressbaroverlay.Maximum = $services.Count
	$progressbaroverlay.Step = 1
	$progressbaroverlay.Value = 0
	
	
	foreach ($Service in $Services)
	{
		
		$checkservice = Get-Service -Name $Service -ErrorAction SilentlyContinue
		
		if ($checkservice -eq $null)
		{
			
			$StartStopRichTextBox.AppendText("`n")
			$StartStopRichTextBox.AppendText("$Service does not exist")
			Write-Log -Level INFO -Message "$Service does not exist"
			$StartStopRichTextBox.ScrollToCaret()
			$progressbaroverlay.PerformStep()
		}
		
		else
		{
			Stop-Service -Name $Service -Force -ErrorAction SilentlyContinue -Verbose
			$StartStopRichTextBox.AppendText("`n")
			$StartStopRichTextBox.AppendText("$Service Stopped ")
			$StartStopRichTextBox.ScrollToCaret()
			$progressbaroverlay.PerformStep()
			
			Write-Log -Level INFO -Message "$Service Stopped!"
		}
		
	}
	
	$StartStopRichTextBox.AppendText("`n")
	$StartStopRichTextBox.AppendText("Services STOPPED")
	
	$StartStopRichTextBox.ScrollToCaret()
}

$buttonStopIIS_Click = {
	#TODO: Place custom script here
	
	
	$StartStopRichTextBox.AppendText("`n")
	$StartStopRichTextBox.AppendText("Stop $global:SelectedBigram site")
	$StartStopRichTextBox.ScrollToCaret()
	
	
	$checksite = Get-IISSite -Name $global:SelectedBigram
	
	if ($checksite -eq $null)
	{
		$StartStopRichTextBox.AppendText("`n")
		$StartStopRichTextBox.AppendText("$global:SelectedBigram site does not exist ")
		$StartStopRichTextBox.ScrollToCaret()
	}
	
	else
	{
		
		
		Write-Log -Level INFO -Message "Stop $global:SelectedBigram Site"
		
		Stop-IISSite -Name $global:SelectedBigram -Confirm:$false
		$StartStopRichTextBox.AppendText("`n")
		$StartStopRichTextBox.AppendText("$global:SelectedBigram site Stopped ")
		$StartStopRichTextBox.ScrollToCaret()
	}
	Write-Log -Level INFO -Message "$global:SelectedBigram site Stopped!"
}

$buttonStartIIS_Click = {
	#TODO: Place custom script here
	$checksite = Get-IISSite -Name $selectedBigram
	
	if ($checksite -eq $null)
	{
		$StartStopRichTextBox.AppendText("`n")
		$StartStopRichTextBox.AppendText("$global:SelectedBigram site does not exist ")
		$StartStopRichTextBox.ScrollToCaret()
	}
	
	else
	{
		
		
		Write-Log -Level INFO -Message "Start $global:SelectedBigram Site --------------"
		
		Start-IISSite -Name $selectedBigram
		
		$StartStopRichTextBox.AppendText("`n")
		$StartStopRichTextBox.AppendText("$global:SelectedBigram site Started ")
		$StartStopRichTextBox.ScrollToCaret()
		Write-Log -Level INFO -Message "$global:SelectedBigram site Started!"
		
	}
}

$buttonStartServices_Click = {
	#TODO: Place custom script here
	
	
	
	Add-Type -AssemblyName PresentationCore, PresentationFramework
	$ButtonType = [System.Windows.MessageBoxButton]::YesNo
	$MessageIcon = [System.Windows.MessageBoxImage]::Information
	$MessageBody = "Have you started the website? othervise PUFLA will not start..."
	$MessageTitle = "Website Started?"
	
	$Result = [System.Windows.MessageBox]::Show($MessageBody, $MessageTitle, $ButtonType, $MessageIcon)
	

	
	
	if ($Result -eq [System.Windows.MessageBoxResult]::Yes)
	{
		
		$StartStopRichTextBox.AppendText("`n")
		$StartStopRichTextBox.AppendText("Starting Service to original mode and status ")
		$StartStopRichTextBox.ScrollToCaret()
		
		
		# Load the XML data from the file
		[XML]$xmlData = Get-Content "$InstallDrive\Visma\Install\backup\$selectedBackupfolder\ServicesRestorePoint.xml"
		
		$progressbaroverlay.Maximum = $xmlData.Count
		$progressbaroverlay.Step = 1
		$progressbaroverlay.Value = 0
		
		
		# Iterate through each service and restart it
		foreach ($service in $xmlData.Objects.Object)
		{
			$serviceName = $service.Property[0]."#text"
			$serviceStartName = $service.Property[1]."#text"
			$serviceStatus = $service.Property[2]."#text"
			$ServiceStartType = $service.Property[3]."#text"
			
			if ($ServiceStartType -eq 'Auto')
			{
				Set-Service -Name $serviceName -StartupType Automatic
				$StartStopRichTextBox.AppendText("`n")
				$StartStopRichTextBox.AppendText("$serviceName set to AUTOMATIC ")
				
				Write-Log -Level INFO -Message "$serviceName set to AUTOMATIC "
			}
			
			if ($ServiceStartType -eq 'Manual')
			{
				Set-Service -Name $serviceName -StartupType Manual
				$StartStopRichTextBox.AppendText("`n")
				$StartStopRichTextBox.AppendText("$serviceName set to MANUAL ")
				Write-Log -Level INFO -Message "$serviceName set to MANUAL "
			}
			
			if ($ServiceStartType -eq 'Disabled')
			{
				Set-Service -Name $serviceName -StartupType Disabled
				$StartStopRichTextBox.AppendText("`n")
				$StartStopRichTextBox.AppendText("$serviceName set to DISABLED ")
				
				Write-Log -Level INFO -Message "$serviceName set to DISABLED "
			}
			
			if ($serviceStatus -eq 'Running')
			{
				
				try
				{
					Start-Service -Name $serviceName -ErrorAction Stop
					$StartStopRichTextBox.AppendText("`n")
					$StartStopRichTextBox.AppendText("$serviceName set to STARTED ")
					Write-Log -Level INFO -message "Service $serviceName started successfully."
				}
				catch
				{
					$StartStopRichTextBox.AppendText("`n")
					$StartStopRichTextBox.AppendText("$serviceName ERROR ERROR ERROE ")
					Write-Log -Level ERROR -Message "Failed to start the service: $serviceName. Error: $_"
					
				}
				
				
				
			}
			
			if ($serviceStartName -ne 'Localsystem')
			{
				write-host "$servicename is running with $serviceStartName"
				$StartStopRichTextBox.AppendText("`n")
				$StartStopRichTextBox.AppendText("$serviceName running with Account ")
				$StartStopRichTextBox.AppendText("`n")
				$StartStopRichTextBox.AppendText("Notify customer ")
				
				Write-Log -Level INFO -Message "$serviceName running with $serviceStartName "
			}
			
			$progressbaroverlay.PerformStep()
			
		}
		
		$StartStopRichTextBox.AppendText("`n")
		$StartStopRichTextBox.AppendText("Done with starting services")
		$StartStopRichTextBox.ScrollToCaret()
		
	}
}

$buttonLoadDataRestorefile_Click = {
	#TODO: Place custom script here
	
	
	
	$data = @()
	
	[XML]$xmlData = Get-Content "$InstallDrive\Visma\Install\backup\$selectedBackupfolder\ServicesRestorePoint.xml"
	
	
	foreach ($service in $xmlData.Objects.Object)
	{
		$object = New-Object -TypeName PSObject
		$object | Add-Member -MemberType NoteProperty -Name 'Service' -Value $service.Property[0]."#text"
		$object | Add-Member -MemberType NoteProperty -Name 'Konto' -Value $service.Property[1]."#text"
		$object | Add-Member -MemberType NoteProperty -Name 'Status' -Value $service.Property[2]."#text"
		$object | Add-Member -MemberType NoteProperty -Name 'StartMode' -Value $service.Property[3]."#text"

		$data += $object
	}
	
	$result = $data | Out-String
	$StartStopRichTextBox.AppendText("`n")
	$StartStopRichTextBox.AppendText("====STATUS BEFORE UPGRADE====")
	$StartStopRichTextBox.AppendText("`n")
	$StartStopRichTextBox.AppendText("$result")
	$StartStopRichTextBox.ScrollToCaret()
}

$buttonCheckAfterUpgrade_Click = {
	#TODO: Place custom script here
	
	$result = @()
	$data = @()
	$Services = "Scheduler", "Ciceron Server Manager", "NeptuneMB_$selectedBigram", "PersonecPBatchManager$selectedBigram", "PersonecPUtdataExportImportService$selectedBigram", "RSPFlexService$selectedBigram", "Visma.P-Background-Service - $selectedBigram", "Visma.PersonecP.PufIa.WinSvc - $selectedBigram"
		
	foreach ($service in $Services)
	{
		$checkservice = Get-Service -Name $Service -ErrorAction SilentlyContinue
		
		if ($checkservice -eq $null)
		{
			$StartStopRichTextBox.AppendText("`n")
			$StartStopRichTextBox.AppendText("$service does not exist on this server")
			$StartStopRichTextBox.ScrollToCaret()
		}
		
		else
		{
			$res = Get-CimInstance win32_service | Where-Object Name -eq $Service | Select-Object name, startname, state, Startmode -ErrorAction SilentlyContinue
			$result += $res
		}
		
	}
	
	[XML]$xmlData = $result | ConvertTo-Xml -NoTypeInformation
	
	foreach ($service in $xmlData.Objects.Object)
	{
		
		$object = New-Object -TypeName PSObject
		$object | Add-Member -MemberType NoteProperty -Name 'Service' -Value $service.Property[0]."#text"
		$object | Add-Member -MemberType NoteProperty -Name 'Konto' -Value $service.Property[1]."#text"
		$object | Add-Member -MemberType NoteProperty -Name 'Status' -Value $service.Property[2]."#text"
		$object | Add-Member -MemberType NoteProperty -Name 'StartMode' -Value $service.Property[3]."#text"
		
		$data += $object
		
	}
	
	$result = $data | Out-String
	
	
	$utresult = $utdata | Out-String
	$StartStopRichTextBox.AppendText("`n")
	$StartStopRichTextBox.AppendText("====STATUS LIVE====")
	$StartStopRichTextBox.AppendText("`n")
	$StartStopRichTextBox.AppendText("$result")
	$StartStopRichTextBox.ScrollToCaret()
	
}
]]></Code>
  <TV>0</TV>
  <Mode>1</Mode>
  <Assemblies />
</File>