<File version="3.2">
  <FileID>799e3816-d9c3-4b7d-bd34-218507671148</FileID>
  <Preview>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
FAAAwHCiAMRIKAAAgOFEAYiRUAAAAMOJAhAjoQAAAIYTBSBGQgEAAAwnCkCMhAIAABhOMVkA7Ma8
DnlxnykAAIDhFJMFIBwOy+/3j+oEg0H19/d/s88UAADAcIqpAnD37l1nhdnZ2SooKFBhYeGoTHFx
sTIyMtTd3a0HDx44+04BAAAMp5grAD09Pc4g6fV6R23s0X9ZWZna29spAACAqIjZAmCPjkdrfD6f
SktL1dHRQQEAAEQFBSAKoQAAAKKNAhCFUAAAANFGAYhCKAAAgGgbEQXA7fHK7/eq2/XtgfSPxWXi
9fnl87rNPC5z361AKOws2yZol9Xt+t58PzYusz1eX+Cb5QZ8noFt9f3pbaUAAACiLeYLgNvtVntz
vSqrG9XtMQP6CwPpH4vH41JDTbXqGtvl8XrkdXeqKDNF5+PP6mz8ReVVtptB2JaA785rSoHHp3A4
KPf3nvt+7LKbq4uUcPG8zpw5q/yaNnk6m51tdf+JbaUAAACiLeYLQCAYVH7iQS1cc1qenpDc5sja
F+xxpo2YI3lXt1eR/rvmfr85AjeFwRfWl097Fb9ro/aczVW4v0/h9lxNe+9dTV+4UsvmT9TYadtV
7Qqp/8493e3rkc/dLX+oV/fMCxHoqtSlyxnq9PnlDwysJ+z3yecPmhej1/mSop5es77+Xt3tdeuL
TXP1m/enaP36Fdp97IKO796sZVsuKGheUDtvXyhgysS3zzZQAAAA0TYyCkDSQS1yCkBYoYBPNTnn
tWHDJl0rb1TIVafLh3Zo167jKmwIyNucq1P71unTMZO1+3KReswO+JoytXjRdtWHnurpvVotH7dQ
mdXVunFhr3adTFCjJ6SKjAvasfsLJR7bpF/+7VtKLG1TS0mCs56U8mrVVOTo8KFTupqerivxe7Qn
PkWeiFentm/UkaRq81I+VXXeTe3csEardyWpuyNPB3bv0tmscnkCAXkoAACAGDJCCsAhLV77hfxm
mq6qG1o552NzxL1YnyzZpIa2Bp1cP09v/9M/a/raEzq8ebLWbV6rj8ZO1JbLxert71OkM19T3/wX
vTd2gt7/l3/Wkj0JSj22Xu+982v99q23NHPtbi366F29+9lMLZ00TW988Lmu3LimjYvGav2GZWa5
K7Vi9nSNm7xK6+d+pt999Jb++bdvaM2xVF3eu1j/zz++rZlzVmj1mrWaOXOxNu04rC1zP9C7H/5O
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
m0UVKi8pVWNbl5pry1Va1aLOhgId2rdPF7MrFYqEVXjjnPbuO6Ls8iqVFpep0+NTed5NZZTUOh8h
9Hd3KevSaR04cFjXMvJUUFimlq5W5SdfUFpOjdrN8g6Y5V0tqFJNpVlfTbM8Xs/Q2zdEKAAAgGgb
+QXAxu1WsKdX/f39zkcCA6GwIpGgvF7zdyCgsNmJO+a5SNCnble3AmE7bZ+CZrAPBPzORwD9wZCC
Pq/zKQDno4XO8voUNsvq7zcvgNdr5utxlu/x2Sv/+xU2fzuFwRQQl1nukNs2RCgAAIBoGx0F4IW4
zeDd2VKj7PR8tfv8crXWOn+3ejzyDDH9n4xZlq+7RblZuapt7pTnpb5c6IdDAQAARNuoKwBec3Te
WHRFCz5ep5q+O+ooS9KCj9ap4d59PbxzV/2RsNzd9psD+3TX3L/TG1E4HHGO8u1tb7/ZDnsxoBns
feF7+upuo9bMW66rha26a5Zx1545+JFH/N8NBQAAEG2jsgA0lVzV8glbVNvbr87KNK0Zt1T7vjiu
lXPnaPXxi3L3BpR7eZtmzZujlQfjlXglXuvW7dSpEye1Z8MqrdxySlVtfpWm7dfKeRP0qw8WKqOi
SimnN2rVln26Xe9SwJSAodb/MqEAAACibXSeAShO0rLx21TX16+umkxt+HC83vxwlg6fuqDFy+Zp
4+7dWr14li4mndT06XM0/sNPNHf5CVWXpGn93En6h797Q0s27NLaZTN1/tJxjZu9TJvXLNSbv/6V
3nnrV3p76g61hSLy/qnfEPgToQAAAKJt1BUAjy+g9sobWj59vmr6v5anKlmzJ0zV5wt2q/veQ6Uc
3axPx07Vyt3XpN97tH/5Ik35fJWSSyt1cd0Kbd1yUKtnTdfYSZ9r6dbz+vr3Pu1eu0KT331H709Y
pfgzR7Rz/3m1eAMUAADAiDXqCoC9cM/f3aazh+Zp5fpNWr5urXZdPKGFn3yiiVNmauycVUrLvaVd
SydqyeJZeveTSZo5f52SCioUv2yVZk1dqjEfTtCivae0e9lnmjJ5rN4Y+7nOnj2u1TMna9nqNdpz
MU++4Mt9699QoQAAAKJt9BUAE4/Xp+6uVmWlX9eNvCqFOnI1Z9pMHT57WfmVLeqPeHVuxxp99PY/
6b/M266i6mZ1dHnkaa/XjaQEXb+RrYYOt9pqS5V4JVF5JVXy+vyqLEhXwvWbanR5f/LRvw0FAAAQ
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
qPqLv/j/AdnduPjuxsRCAAAAAElFTkSuQmCC</Preview>
  <Form>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</Form>
  <Code><![CDATA[
$formStopAndStart_Load = {
	#TODO: Initialize Form Controls here
	
	Refresh-StatusBar
	
	If ($global:SelectedBigram -eq 'Select Bigram' -or $global:SelectedBackupfolder -eq 'Select Folder' )
	{
		$richtextbox1.AppendText("`n")
		$richtextbox1.AppendText("You Need to select BIGRAM and BackupFolder")
		$richtextbox1.ScrollToCaret()
		$formStopAndStart.Close()
	}
	
	
	if ($global:SelectedBackupfolder -eq 'Select Folder' -or $global:SelectedBigram -eq 'Select Bigram')
	{
		$buttonStartIIS.Enabled = $false
		$buttonStopIIS.Enabled = $false
		$buttonStopServices.Enabled = $false
		$buttonStartServices.Enabled = $false
		$buttonCheckAfterUpgrade.Enabled = $false
		$buttonLoadDataRestorefile.Enabled = $false
	}
	
	else
	{
		$buttonStartIIS.Enabled = $true
		$buttonStopIIS.Enabled = $true
		$buttonStopServices.Enabled = $true
		$buttonStartServices.Enabled = $true
		$buttonCheckAfterUpgrade.Enabled = $true
		$buttonLoadDataRestorefile.Enabled = $true
	}
}

$buttonClose_Click = {
	#TODO: Place custom script here
	$formStopAndStart.Close()
}

$buttonStopServices_Click = {
	#TODO: Place custom script here
	
	$result = @()
	
	$services = "PBSScheduler_$global:SelectedBigram", "Scheduler", "Ciceron Server Manager", "NeptuneMB_$global:SelectedBigram", "PersonecPBatchManager$global:SelectedBigram", "PersonecPUtdataExportImportService$global:SelectedBigram", "RSPFlexService$global:SelectedBigram", "Visma.P-Background-Service - $global:SelectedBigram", "Visma.PersonecP.PufIa.WinSvc - $global:SelectedBigram"
	
	$StartStopProgressBar.Maximum = $services.Count
	$StartStopProgressBar.Step = 1
	$StartStopProgressBar.Value = 0
	
	$StartStopRichTextBox.AppendText("`n")
	$StartStopRichTextBox.AppendText("Stopping Services ")
	
	foreach ($service in $services)
	{
		$res = Get-CimInstance win32_service | Where-Object Name -eq $service | Select-Object name, startname, state, Startmode -ErrorAction SilentlyContinue
		$result += $res
	}
	
	$xmlData = $result | ConvertTo-Xml -NoTypeInformation
	
	# Save the XML data to a file
	$restorefile = "$global:SelectedBigram" + "ServicesRestorePoint.xml"

	$xml_exist = (test-path "$global:InstallDrive\Visma\Install\backup\$global:SelectedBackupfolder\$restorefile")
	

	
	if ($xml_exist -eq $false)
	{
		$xmlData.Save("$global:InstallDrive\Visma\Install\backup\$global:SelectedBackupfolder\$restorefile")
		$StartStopRichTextBox.AppendText("`n")
		$StartStopRichTextBox.AppendText("$restorefile Service Restore File created in backupfolder ")
	}
	
	
	Write-Log -Level INFO -Message "Stopping Services --------------"
	
	foreach ($service in $services)
	{
		$checkservice = Get-Service -Name $service -ErrorAction SilentlyContinue
		
		if ($checkservice -eq $null)
		{
			$StartStopRichTextBox.AppendText("`n")
			$StartStopRichTextBox.AppendText("$service does not exist")
			Write-Log -Level INFO -Message "$service does not exist"
			$StartStopRichTextBox.ScrollToCaret()
			$StartStopProgressBar.PerformStep()
		}
		else
		{
			Stop-Service -Name $service -Force -ErrorAction SilentlyContinue -Verbose
			$StartStopRichTextBox.AppendText("`n")
			$StartStopRichTextBox.AppendText("$service Stopped ")
			$StartStopRichTextBox.ScrollToCaret()
			$StartStopProgressBar.PerformStep()
			Write-Log -Level INFO -Message "$service Stopped!"
		}
	}
	
	$StartStopRichTextBox.AppendText("`n")
	$StartStopRichTextBox.AppendText("Services Stopped")
	$StartStopRichTextBox.ScrollToCaret()
	$richtextbox1.AppendText("`n")
	$richtextbox1.AppendText("Services Stopped")
	$richtextbox1.ScrollToCaret()
}

$buttonStopIIS_Click = {
	#TODO: Place custom script here
	
	
	$StartStopRichTextBox.AppendText("`n")
	$StartStopRichTextBox.AppendText("Stop $global:SelectedBigram site")
	$StartStopRichTextBox.ScrollToCaret()
	
	
	$checksite = Get-IISSite -Name $global:SelectedBigram
	
	if ($checksite -eq $null)
	{
		$StartStopRichTextBox.AppendText("`n")
		$StartStopRichTextBox.AppendText("$global:SelectedBigram site does not exist ")
		$StartStopRichTextBox.ScrollToCaret()
	}
	
	else
	{
		
		
		Write-Log -Level INFO -Message "Stop $global:SelectedBigram Site"
		
		Stop-IISSite -Name $global:SelectedBigram -Confirm:$false
		$StartStopRichTextBox.AppendText("`n")
		$StartStopRichTextBox.AppendText("$global:SelectedBigram site Stopped ")
		$StartStopRichTextBox.ScrollToCaret()
	}
	Write-Log -Level INFO -Message "$global:SelectedBigram site Stopped"
	$richtextbox1.AppendText("`n")
	$richtextbox1.AppendText("$global:SelectedBigram site Stopped")
	$richtextbox1.ScrollToCaret()
}

$buttonStartIIS_Click = {
	#TODO: Place custom script here
	$checksite = Get-IISSite -Name $selectedBigram
	
	if ($checksite -eq $null)
	{
		$StartStopRichTextBox.AppendText("`n")
		$StartStopRichTextBox.AppendText("$global:SelectedBigram site does not exist ")
		$StartStopRichTextBox.ScrollToCaret()
	}
	
	else
	{
		
		
		Write-Log -Level INFO -Message "Start $global:SelectedBigram Site --------------"
		
		Start-IISSite -Name $selectedBigram
		
		$StartStopRichTextBox.AppendText("`n")
		$StartStopRichTextBox.AppendText("$global:SelectedBigram site Started ")
		$StartStopRichTextBox.ScrollToCaret()
		Write-Log -Level INFO -Message "$global:SelectedBigram site Started"
		
		$richtextbox1.AppendText("`n")
		$richtextbox1.AppendText("$global:SelectedBigram site Started")
		$richtextbox1.ScrollToCaret()
		
	}
}

$buttonStartServices_Click = {
	#TODO: Place custom script here
	Add-Type -AssemblyName PresentationCore, PresentationFramework
	$ButtonType = [System.Windows.MessageBoxButton]::YesNo
	$MessageIcon = [System.Windows.MessageBoxImage]::Information
	$MessageBody = "Have you started the website? Otherwise, PUFLA will not start..."
	$MessageTitle = "Website Started?"
	
	$Result = [System.Windows.MessageBox]::Show($MessageBody, $MessageTitle, $ButtonType, $MessageIcon)
	
	if ($Result -eq [System.Windows.MessageBoxResult]::Yes)
	{
		$StartStopRichTextBox.AppendText("`n")
		$StartStopRichTextBox.AppendText("Starting Service to original mode and status ")
		$StartStopRichTextBox.ScrollToCaret()
		
		# Load the XML data from the file
		$restorefile = "$global:SelectedBigram" + "ServicesRestorePoint.xml"
		[XML]$xmlData = Get-Content "$InstallDrive\Visma\Install\backup\$selectedBackupfolder\$restorefile"
		
		$countServices = $xmlData.Objects.Object.Count
		
		$StartStopProgressBar.Maximum = $countServices
		$StartStopProgressBar.Step = 1
		$StartStopProgressBar.Value = 0
		
		# Iterate through each service and restart it
		foreach ($service in $xmlData.Objects.Object)
		{
			$serviceName = $service.Property[0]."#text"
			$serviceStartName = $service.Property[1]."#text"
			$serviceStatus = $service.Property[2]."#text"
			$ServiceStartType = $service.Property[3]."#text"
			
			if ($ServiceStartType -eq 'Auto')
			{
				Set-Service -Name $serviceName -StartupType Automatic
				$StartStopRichTextBox.AppendText("`n")
				$StartStopRichTextBox.AppendText("$serviceName set to AUTOMATIC ")
				Write-Log -Level INFO -Message "$serviceName set to AUTOMATIC "
			}
			
			if ($ServiceStartType -eq 'Manual')
			{
				Set-Service -Name $serviceName -StartupType Manual
				$StartStopRichTextBox.AppendText("`n")
				$StartStopRichTextBox.AppendText("$serviceName set to MANUAL ")
				Write-Log -Level INFO -Message "$serviceName set to MANUAL "
			}
			
			if ($ServiceStartType -eq 'Disabled')
			{
				Set-Service -Name $serviceName -StartupType Disabled
				$StartStopRichTextBox.AppendText("`n")
				$StartStopRichTextBox.AppendText("$serviceName set to DISABLED ")
				Write-Log -Level INFO -Message "$serviceName set to DISABLED "
			}
			
			if ($serviceStatus -eq 'Running')
			{
				try
				{
					Start-Service -Name $serviceName -ErrorAction Stop
					$StartStopProgressBar.PerformStep()
					$StartStopRichTextBox.AppendText("`n")
					$StartStopRichTextBox.AppendText("$serviceName set to STARTED ")
					Write-Log -Level INFO -Message "Service $serviceName started successfully."
				}
				catch
				{
					$StartStopRichTextBox.AppendText("`n")
					$StartStopRichTextBox.AppendText("$serviceName ERROR ERROR ERROR ")
					Write-Log -Level ERROR -Message "Failed to start the service: $serviceName. Error: $_"
				}
			}
			
			if ($serviceStartName -ne 'Localsystem')
			{
				Write-Host "$serviceName is running with $serviceStartName"
				$StartStopRichTextBox.AppendText("`n")
				$StartStopRichTextBox.AppendText("$serviceName running with Account ")
				$StartStopRichTextBox.AppendText("`n")
				$StartStopRichTextBox.AppendText("Notify customer ")
				Write-Log -Level INFO -Message "$serviceName running with $serviceStartName "
			}
			
			$StartStopProgressBar.PerformStep()
		}
		
		$StartStopRichTextBox.AppendText("`n")
		$StartStopRichTextBox.AppendText("Done with starting services")
		$StartStopRichTextBox.ScrollToCaret()
		$richtextbox1.AppendText("`n")
		$richtextbox1.AppendText("Services Started")
		$richtextbox1.ScrollToCaret()
	}
	
}

$buttonLoadDataRestorefile_Click = {
	#TODO: Place custom script here
	
	
	
	$data = @()
	$restorefile = "$global:SelectedBigram" + "ServicesRestorePoint.xml"
	[XML]$xmlData = Get-Content "$InstallDrive\Visma\Install\backup\$selectedBackupfolder\$restorefile"
	
	
	foreach ($service in $xmlData.Objects.Object)
	{
		$object = New-Object -TypeName PSObject
		$object | Add-Member -MemberType NoteProperty -Name 'Service' -Value $service.Property[0]."#text"
		$object | Add-Member -MemberType NoteProperty -Name 'Konto' -Value $service.Property[1]."#text"
		$object | Add-Member -MemberType NoteProperty -Name 'Status' -Value $service.Property[2]."#text"
		$object | Add-Member -MemberType NoteProperty -Name 'StartMode' -Value $service.Property[3]."#text"

		$data += $object
	}
	
	$result = $data | Out-String
	$StartStopRichTextBox.AppendText("`n")
	$StartStopRichTextBox.AppendText("====STATUS BEFORE UPGRADE====")
	$StartStopRichTextBox.AppendText("`n")
	$StartStopRichTextBox.AppendText("$result")
	$StartStopRichTextBox.ScrollToCaret()
}

$buttonCheckAfterUpgrade_Click = {
	#TODO: Place custom script here
	
	$result = @()
	$data = @()
	$services = "PBSScheduler_$global:SelectedBigram", "Scheduler", "Ciceron Server Manager", "NeptuneMB_$global:SelectedBigram", "PersonecPBatchManager$global:SelectedBigram", "PersonecPUtdataExportImportService$global:SelectedBigram", "RSPFlexService$global:SelectedBigram", "Visma.P-Background-Service - $global:SelectedBigram", "Visma.PersonecP.PufIa.WinSvc - $global:SelectedBigram"
		
	foreach ($service in $Services)
	{
		$checkservice = Get-Service -Name $Service -ErrorAction SilentlyContinue
		
		if ($checkservice -eq $null)
		{
			$StartStopRichTextBox.AppendText("`n")
			$StartStopRichTextBox.AppendText("$service does not exist on this server")
			$StartStopRichTextBox.ScrollToCaret()
		}
		
		else
		{
			$res = Get-CimInstance win32_service | Where-Object Name -eq $Service | Select-Object name, startname, state, Startmode -ErrorAction SilentlyContinue
			$result += $res
		}
		
	}
	
	[XML]$xmlData = $result | ConvertTo-Xml -NoTypeInformation
	
	foreach ($service in $xmlData.Objects.Object)
	{
		
		$object = New-Object -TypeName PSObject
		$object | Add-Member -MemberType NoteProperty -Name 'Service' -Value $service.Property[0]."#text"
		$object | Add-Member -MemberType NoteProperty -Name 'Konto' -Value $service.Property[1]."#text"
		$object | Add-Member -MemberType NoteProperty -Name 'Status' -Value $service.Property[2]."#text"
		$object | Add-Member -MemberType NoteProperty -Name 'StartMode' -Value $service.Property[3]."#text"
		
		$data += $object
		
	}
	
	$result = $data | Out-String
	
	
	$utresult = $utdata | Out-String
	$StartStopRichTextBox.AppendText("`n")
	$StartStopRichTextBox.AppendText("====STATUS LIVE====")
	$StartStopRichTextBox.AppendText("`n")
	$StartStopRichTextBox.AppendText("$result")
	$StartStopRichTextBox.ScrollToCaret()
	
}
]]></Code>
  <TV>0</TV>
  <Mode>0</Mode>
  <Assemblies />
</File>