<File version="3.2">
  <FileID>799e3816-d9c3-4b7d-bd34-218507671148</FileID>
  <Preview>iVBORw0KGgoAAAANSUhEUgAAAgAAAAIACAYAAAD0eNT6AAAAAXNSR0IArs4c6QAAAARnQU1BAACx
jwv8YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAEANSURBVHhe7d1ncFxngu73qbtlX+9371f7i10u
e8v3bnld5fthvXtvrXd2Z3dnZzWjmZGokSiKYhQzKUYATGAAc845R5AgQBAkARA555zR6ByQGMAg
UfP4fQ8JiSNhRpREsRvg/1fzVAPd57x9Djil9zmnT3f/BAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAICYc+LM/+7Oi//R//mXRwoWLiuLilhctWxZHCCGEkFGThKLl
y1cUjXvnt0V//uf/scjM7TZ/2n/4s/9Q+9Zbb+nMxWuqbPGq2T2gJlcfIYQQQkZLevrU3NOvoqpm
LV++Un/xF/+jnk/zf9xf/uX/UXT6wjVVd/Ypp7pLWZXtyiaEEELIqEpWRbsKG7yqbHZr/PgPv70A
2NP+1a0+5dZ0K7e6kxBCCCGjNDlVHeaAvleXrqR+ewFYnrCiqDNwT3fMink1XYQQQsiYSH5t9w9O
Xu2rHs/kRxrPJre6S7Xd/UpOSf/2AhAXl1DU4b/rnAEYaXBCCCFkNKWgzuUku6L9B2d4rML6Ht2p
7Bhxme8Su32F9c/Gs0frIy3z0ilvN5O+Ha/ny323v9eZAnDpStrLF4C82mc7OWIa3Cpo9Iz8GCGE
EBIjsZOhvU2+Wa5TV/J0+mq+zlwt+M6x6526kq9LGWXOmClZ1c/HG3n5b4tdz453/nqxM1Gn59U7
450ZaftSXsiL933tZ7uNZ68VOmWgyM7TZr/zzVxe7/oOBcC+BFBQ73YGcGJ2tqjFp6K2gIrMxF9U
1qZC+4f1DTy7f3i5r8csW2yXH+mxHznRel5CCCGxEzsXZFd06OTlXJU29KiwtsvMX+Yo+bvGTNJl
TT06bSbpm8XNOpmcp6Lazm8sV9bsVXmr/xspbfJ847nLmj06n1qoGwWNTiHIKW81862ZW4eXMcuX
Nj0fz8y1JY1u57bCGc/71Xj2LIK5LW1y68rNMiXfqlRZi9/Z/0Izlze6B79DAQjeN0f5zybvYvsH
NE9WnNeg4lvVKgreU9GNcpX+bIFK5u9WUWmbinp6v1rWbKCd+EvMzhbUtCuvusvc51VpsxnDPjY8
7rfkxfLw4u1IefEf2j5Xifkj5Fc9O7VS3OQzz+1ztm14zK/yfFudbbPjfP1xQgghozklZqK0BcAe
GduD2czyNmWZ379rMsvtUXWPzqcVOwXg7LUiZ+K199ur7bMrO3SnslOHzqZr3dYj2rDjxPMc1/pt
x3Q2LV851d3OsjaZJoVmvMsZZU4BOGfGzTVjZD0fz+ZOVadOXMnSpp0ntGn3GV26WarNe89q487j
OnE503k+Z1m7T/b0v9me1OxqXcmsMkUh4Ox/Ub1HTZ67L18AuoIPzIp2IjUxk2eJmeBLF+5X+V/8
o0qP3VRJ30OVvZ2gip/8ryr/X36j0oPpKnH3m2XtOmbCNQ0lr6hcl1MzlHw9V3fMRuVVtKq4OeBM
xmWtQdNozM9mfFsMysyGlpv77GPOc5rYZfJKy3T+yk3lNZq2Yx4rNcu9uK7dtoqOiPLNctduVZii
EjJjeZSVU6BL127o6q1i5ZlWlGv+QHZdm/K2oFnGPM+X2+FRblmziprsczzfZ0IIIWMidu7IqerS
udQiM2+Y/96bSdi+Lj4ce+Bn562vp6DWZR63F9I9W86uZ4/uL14v0a2SVme8EjOB2+vl7OMFdT3K
KGrSlu2H5fX65DNx97gVDARVX9ugDduOmufyfjWeiZ1zrtwsN+s167wZN99etW8Omu325prYl+JX
rtuj4qIylZVXa97idSorq1JJcblWrN3tbJO9yO/Z1f6dZrJ3K80UgKtZNapoD5r98JqDYK+avPde
vgC4QkNmR+0pB3vqwkyann6Vzdiuyp/8b6r4H/5OZfFHVGaaVMX//GtTAv5SFf/R3HcqS+XeAWci
r25zK/XadaWXulTXHXIm8rNnkpVR1qWqNlMOSmuVVdqsUjthN7pUWN2q7JIGczTud05t2EJQ2erV
raw7upiSoZulHarqCKikttNM1vXKNm2nzKxbaSbvvPIG3TTLXTUtqqyjX1XNrbqcfF13GoKq6fQr
684dnTlvfq8z/2eoaVFWcb3zvsjyZrcKKs3zFhfr3NnLul7U9mxf7T4TQggZE6kw/13PN5PteTNh
l5sykF/jcib3gtoeFda5lZJVqaMXbuv4pSwnx0xOXclRjjnqLzST+rNlXc56Febg8WJ6ibLK2p0z
AaXmCDvfjGPHskfaGYVNOnjkvAYHBrVjzwkdOpGsE6eT1dfbp83mKL7YzHF2WRu7nt0+WwBum0Jx
Ib3UOaNgX7Mfji0MVzIrTHk4rK4ulyKRXnV3u7XRlIzLt8ucx+1yzvaZ2An/ek6Nrt2pVXVn2Bnf
vhTQ6n+gyy9bAHoiD532UDkc36AqUktU/uf/1Uz4f2Xy16qYuknlSWdV8d//jXNf+X/+SJWmzVR2
R1RlnrioqlZXrl5XRkmLCisqdebUBVMIWpVbUKDLadm6dv2G0otbdCc/V2cv3tC1jJu6crtc5eaI
vsqkoqlV6dnmqL6+xdxWmXF9Sr2aosvp2c4Ef7vKNJ/CfCVfz9HVFHP/zQpVdPWZnQ4ot7hUl6/e
ULZpRzl5d3TyzBVl1XhUWlVtWlCycxFHQWWFzp9PVdod8/xnLiglr8HssykVL+43IYSQUZ2qjpBz
0Z49wrZloKDOY363R/1+3TAT9mYzmaZcu6nUtNtOrqXe0vETF7TveIoq2sLOsjZ2vcq2oC7dKHNO
vV8w45WZQlHw/PHiRp+ZyNu0e/9J1dbUaub81Vq18ZDiVmxWQ32DNu08rtIWuy3PxzOpMONdvV1p
CkWbLppxi8wkbl+zLzDba2PPxNuzBctW7dSNG7f1cOi+bmZkaemqHc4ZBPu4Xf7ZOvb6AL/Sc+uU
lluvOlevs/92Lm8PPTRz4ssUgGUJRe7eR6o0fzT7h3PSaRK4q8r150wJ+Dsz4f8nk/+s8v93hsr/
p7fNz/+3yd+oqrRNVZ4BZ53ankHVdvQozU70RVVKv1msqp6I0lPNxNzUr4a2NqVl5+lWTqGu57ep
weXRtfTbKmjtV527X4VF+Tp7+YYysnN1+kKa8pu7lX79tvJbIiosLFB6Trmu3y5QccddlVeW6qpp
UVXd/aruCJv176q6sVFXzD/mraIKpWdVq9bTb8pHqVJvZeqyfVmirELXblapxu3X9fQcM86Aarte
2GdCCCGjPvZI2F4jZifsPygALQElZ1Zq1+7DGuiPKOD3OumNhFRSVKykHcdV0dHnLOtM2C8UAHuK
3h6x2zMK9jF79F9iCkBmWbuSNu1Va0uzSktKlJ+bp2pz4FlSXKx1Ww6pvNVsy/Plbex4tgDYt+9d
zChXUZ3LuW7NTuw29mz42s2HdPnSVZWXVyh+5WaVlZXrSnKK1mw66Dxe8nzZIhM7nlMA8upV39Pn
7L+dyzvCj16uANgvEfD0PVZ1V0Q1L8a0iZrQA1VdLlTF385QxX/3t2bS/99V/pP/y+SvVPFe4rPl
eswE3hVUQUWtaTX1SjWt5VZJjdJS0pVpGktOzh2l3C7T7Tv5ulna7BzFX07NU6b5Q6WYf4yqnrtq
6PIqLT1d13NrVVDTovQbGbpeVGkKQJbyzR8wPz9X6Xl1ys7N0bXsCt1ITzVH9eWq9txXfYdHuaU1
yi6p0tX0LHNbqSsppjjUNCvFNLuMvCJzf55yyst1LaPCbG9AaVevKb20wxQAs49f329CCCGjNrXd
vc6p8Ytmwq5qD5kyYCdYe3G43xxdu7Rl90mt27RP6zcfcJJkkpi0R+evF5ij57CzrI1dzx5gJpu5
xh6VX0wvU4U54i56/rg9o2An752HLjjjbd5xRFt2HDW3h7Vmwx6duHTbOaPw5XgmVWa8lMwq54zC
ZTOufUnBudbNOXUfMEfwYR08dU2btx3SelMgjl/O1vpth83vB3XgZIrKzXh2OfuSvd2fms6ImePq
lZ7foEZzMG73387lXb1PTAG4/nIFwNv/RLUuM5G7+r6K+SPWmUZRFxlSrf+eai6aZrPhrGrWn1b1
vjQzeUZU5x00y/Wp3t2n8voW3bxTJHv1ZL17QMWV1c7Pdd0B5Zgj8VuFDar13lVBQb6S03LMkXq1
Stt61WCWresMqKim3UzO99Tkf6DaNnuKo1MltR2qNJN0ZZP5uSmgug63Ms1YWaUNKjZtqrZnwDxX
r3muOmXcKVGeaWwNrojySirMzz0qq23QrbxKFdR2mSboVrG5r849qNLqWmWaMlLT/bV9JoQQMqpT
bw5K7YWAl82Ru52fSpvtheDPUt4aciZRe/1ZsZlTbOzPJWaZivbIl8vZlJrUmXnxyi0zn9S6nAm7
xkzg9v4vlzPj2fWKGp+NNZyS5sCI49l5NjW7xjmjkHyz0ikU5WbSL2+z2/UslR2mwJj17XbaOcre
2t+rzP0VLyxnY/f3dmGj866CZt9d5/daE1f/5y9fAHwDn5nJ3kym5g83YjyDauh7rIZ7T59l8DM1
mMn/xWUavffUEhgyG3HP+b3J98DZoAYz4Tb7zf1mYm8ODJqj+TxlFHeqNfLYaSzO+vYbCM36De5n
YzV47prf7zpj2vvs7412G9x3n43jv28eH37+ATX67jvPbddxxjLL2McbvfZ++7PZjudjOtvqbJsZ
21mfEELIWIk9qLSvtduXAOrtgao5iKwzR8pfxv4+Yl5Y5vlyjaZAXDJH/vaUu72tbguYMc2yX1vu
j+ZryzWZ+eyqKRQFdW7nvful9W6npNSax4fz4phf/W5vn/3+YprM/l7PqdWt4ha1mAP14b9BT//T
ly8A/sHPncnVfnjAjxn73sS6Tnu1vvnD2kl9hGUIIYSQH5Jmc7CXVdrmnLZPvlnxPVPprH+7yEyu
5oAxr+rZywAjL/syseOVKz3PHK2b+a+4wZSKG+VKzqgcYdmXi13/Wnatarv6nPl1eP89A79X8ssW
gMDdp+bo+J5zhNxsbtvDj9URfvLK025vez9XZ+9nIz5OCCGEvIp0mbnG3tp554fEGSfy1e1Iy3yX
DI/jzIORz0Zc5rvEjtcWemQO4s1BtpnDbcz/Xr4ABE0BaLany333ndPiWQXlSr2Vq2s3cwghhJBR
mdRXkFgf7+qNbOWVVsu+nd8eyNuDeN/LFoClS5d9WQBa/UNqcPVq3bq12pC0Xvv27tGe3bsIIYQQ
EoPZvm2rqspLNfjw6bPr5J4XgJe6BmDkArBebW1t+uKLL/Tw4UNCCCGExGAePXqke4MDCg3alwFe
QQFYvz5JjY2NzuCDg4OEEEIIidEM9PVSAAghhJA3LRQAQggh5A0MBYAQQgh5A0MB+JFz9+5dDQ0N
EUIIIa819+7d08DAwIhzkw0F4EeMnfx7e+33Mners7OTEEIIeS2x78jzer26f//+iPOTzWstAG/C
0fCDBw++3F/7s9vtNn+X9UpMTHRuCSGEkB8z69atc27b29v15MmTP3oW4LUVADv5h8Nh1dbWjtlU
V1c7f3B72sXusy0APT09zuQ/3MQIIYSQHzt2zrW3dh6KegGwG2JPhd+5c0dNTU2qr68fc6moqFBB
QYGzr3afhwuAbWO2FAAA8Dr8/ve/d0pATBWA8vJyBYNBeTyeMRV7hG9fdyktLf3GGQBbAOw/AAAA
r8Pnn38eewWgrKxMPp/PmRjHUuxr/fb0PwUAABBtY7gAuBUIhRWJROT3euRyjbTMyPH6fc4Ru8/v
ff57wBknHPB/Y9nvEgoAACBWjMkC4OrxKBjoUeHNFF24eFnlTS71RUIKmAn924qA29OtpuoGtba3
qaGqQe5AQC3VBbp44bzSC2sUML+PtN7LhAIAAIgVY7AAmCP/iE8F549q2fRPtWrZHM1I2qD023kq
LG1SKBLWoNnhgUjQTPY+9fcPmD/AoDm6t+XAo1Bvs/bP3KKUmze0Y8YuFVbla/vcRUpYs1YT5s3S
6TtVigS+37ZRAAAAsWLsFQC3R/0DPdq3eLY+Tbqqe4+H5Oms1JoZv9U7Cw+ps71SW9et0c5Ld+Tu
rNWxQ7u0Zs1GpZc0KhgIOgVg34zNunozXbtn7VVq6iFNeCdOTb33FXQ1q665TR4zkY/43N8SCgAA
IFaMyZcAPH6/OqoLlTj3PX340Ydac/SMdq/5VAuW71DSpnjFbzqg+MSF2rx5hf7+3yZoy6YVmrlq
jWq7+9TX3/LlGYDt07arqsely9vjNO69CfpgQaLym7sU8HpGfN5vCwUAABArxuRLAO7uTjW2dihy
94Ee+Gu0YtlULVh1UMlnT2jx8ulqfyCVpu/SO7Pmaf7eG9Jn3Zq7ernSq71mO1qdMwC2AGybulW5
Ta3yBnv16ME9XdyzQPO2XVZvb1DuEZ/7T4cCAACIFWOuALjdHoW8XTq5Z42mLYhT0opPlbBzu07u
2qx5kxO1eddaTZ8fr5nxi3Xs8Fb97O0PFb9wlhZt2622nl719jdr7/RNupqRrp2f7Na1jPOaM3+e
kjZu0MxF85ScU6MQ1wAAAEa5MfkSQI/HL19Xo66eP6HjJ86ouMUtX0uF0i5nq7WtQZdOn1BKcasa
bx/S3/56qo5dSFF1m0dBn8d5F0BdWY2aW1tVU1onj8+rkqyrOn78uJLvVPAuAADAmDA2C0CPy5QA
ryK9feozGx/wuuX2+hWOBOX1+p7dHwmrtaZYqfnV6h3sd5Zx3iLoMmXBHOE7nwNgbu2p/kAoYsbp
UyRoPwfAjP2N53u5UAAAALFijBaAl4jLJY8pBc6kbn4ecZlXHAoAACBWvLkFIAqhAAAAYkXMFYCu
ri7ny4BCoZDz5TljKbbU2P2jAAAAoi3mCoCdDDMzM51JsqSkZMwlPz9fRUVFzr7afaYAAACiIaYK
gPNkZiPskbI9Xf7iV+mOldj9smc37B/d7i8FAAAQDTFXAGzs0fFYzvDpfxsKAAAgGmKyALxJoQAA
AKIh5grA8MbYjHT0PNpj94szAACAaIupAmA3pL+/Xy6Xy7lafiyms7NTfr/f2Ve7zxQAAEA0xFQB
sEfIdvK37wKoqKhwPg9gLMW+vbGwsNCJ3Ve7zxQAAEA0xFwBsB8EZCd/e6W8fTfAWIo98rdnAfgc
AABAtMVkAbBHy3bCtBPjWAqfBAgAiBVjugB4PM8+gc/jHvnxPx63M1kPx943PJb7O4/1VSgAAIBY
MSYLgP1WP/tNfp1tTaqrb1SPJ6BQMGDG9Dz7xr+vL28mfPs1v17Ps8n+D/L82wE7WhvNWE1ye4Py
eew6X1vuJUIBAADEijFZALxBv5pyUxX38SRNnfg7zd1xSBXVDapv7FQoHFI4HFbIftWv26NgMKxI
sEcVZVVq67TFIaCGgps6lHRet69c1qmDmWoou6GlH03UlA9/p3m7jqmjxz9yWfiWUAAAALFi7BUA
M6n3D/Ro76K5Wr3njj77bFClRalat3SeFm84q4rKQqWmpiq7pNFMyJ0qLMxTwZ0rmjt5ug6mlSsy
0Ku6zCvauOCgrp06qcNbz2vnisXaeLRYnz0KKzM7TTWtpmRQAAAAo9gYPAPgViDkV2naGU19/23N
XrxUF7MLtXvJ+xo3b7uSz+3WtEkT9e7UWbp04aD+6efva/PB7Rr/i58r4WimIoP9qs9O0dYlR5R2
5pQObLmmouzzmmLGmrt4sc5mViocDozwvN8eCgAAIFaM0WsAXAr1DcrfXafCjDOas3imEpL26erN
Kt2+vltLlq7UhN/9szZu3aJJq0/qwUOXdm3cp8KGHoUjIdV9WQBOaueaZPX+/ol8nbXKTzuqibNn
6UZlt0J+z4jP/adCAQAAxIoxVwDs6/ohd7uO7t2kDYcvKvPqMa1KitfGtRu1avE6zU+Yp52nkpUw
4y2t27hev1t+UL2D7Vo7a752n8pVcLBPdbcva/3c/Uo5eVy7E47r8Omd2nr0im5dOqBFyxNUUO+R
30cBAACMXmPyDIDH51dLRZaSVi1T3LIEXSquV2fZTe3eeFTpyWe1Ij5O8eu2Kjs3TxczCuTv8+n2
8UPaeyBNPZGQOuoqlJWar8riIuVl1qipJktrly/TsmUrlVxYp0jw+5YTCgAAIDaMyQLQ43KZEhDQ
wOBdZ+fCfq88/qD6B8yOhCPOfXcHBxQMBBQJ+eXqdinY26e+3qB6zM9ur0/BsF8+v1+BoFnXOzzW
oMIBn/MSw4jP+y2hAAAAYsXYLAAxGgoAACBWUABeYygAAIBYEZMFwH4ZUDAYdD56dyzFlhq+DAgA
EAtisgBkZ2errq5O1dXVYyo1NTXO5F9QUODsq91nCgAAIBpiqgDYDent7VVzc7OamprGZOy+24sI
7b7afaYAAACiIaYKgI3dmKGhoTGd4aN/GwoAACAaYq4AvGmhAAAAooECEOVQAAAA0UABiHIoAACA
aKAARDkUAABANFAAohwKAAAgGigAUQ4FAAAQDRSAKIcCAACIBgpAlEMBAABEAwUgyqEAAACigQIQ
5VAAAADRQAGIcigAAIBooABEORQAAEA0UACiHAoAACAaKABRDgUAABANFIAohwIAAIgGCkCUQwEA
AEQDBSDKoQAAAKKBAhDlUAAAANFAAYhyKAAAgGigAEQ5FAAAQDRQAKIcCgAAIBooAFEOBQAAEA0U
gCiHAgAAiIaYKwDDG3P//v0xneH9pQAAAKIhpgrAvXv3FAgEVFxcrLKysjEZu2/19fXOvtp9pgAA
AKIhpgqAPTLu6upSQUGBuru71d7ePqbS0dGhhoYGFRYWUgAAAFEVcwXATvzl5eXy+/1yu91jKh6P
xykBpaWlFAAAQFTFZAGwp8p9Pp8zMY6l2BJgzwRQAAAA0TYqC4Crx6Nw34Cz4b1Bv/l95OW+GZd6
PD71DtiLDQcV8nvkcpn7Rlx2OC65zTrhYEDuER9/+VAAAACxYtQVADv5h/xdSju+15k0T90uUygY
NMt71OP65vJ/EDOR+7vrdWrHBrPuZt0obVLQ7x152eexk39nfYkuZuSq0+P5QSWAAgAAiBWjrAC4
Fez1KefMAcXPXaezpw9q8cZEnbxwRcmpJYoM9Kq/r1/9kbC8Xr/67M/9/YqEAs664V6XLm1O0srl
O3Vq3yYt2LxV9d0R3TU73t8bkc/rM+v0qTcSUTgUkscc/fvDffJ2NOhOUYW6zeO9vX1mzD4FvB55
/UFn/L5IyDyfTxHzc79Z3+91yzVCGaEAAABixagrAJE+v1L3JOrDyatV0tRqJmGPjia8p//6ToLK
qgu1fMEMzdhwSE3mqH194lJNnT5dOy/ekj8UNpN1t3YvnqPZKw6orrVF3e6AupvLtCkxXss2HVV1
bYk2rInX0pWJOnj6hJr8gyq4ekTnL1/UyWt3zNF/u/atX6RPZi3W9fIWtVRkKiEuXusOJqupuVR7
li3R/KXLdae6WwGzXV/ffgoAACBWjL5rANxehQM+XT2QoGlTJ2nyinXat3ujEtfuVVLSfG05m60T
B1ZqqZn8f/7OTF1KOa+5CQt1o9ptjuqDCrpadGj9LH0y6QMt3rJD8cs+0D/86n395q1faGHiKr39
3nzdKM3VurjVunwrV/vX79C547v1ftxunTm2WvM2H1dOxgVdvrBPkye/pbfeGa9/+/W7WrFxlX71
i3/T/OVJSs1rUCD4ze2nAAAAYsWoOwPgc3epID9HDZ5B6Wmv9qz7RDOWbNLxY+e0etXHutFiNjTr
gCZ8Ol/Tk07pnjnqj1u7VGcKu9TvbVdWboF6Br+QBhqVMO89/fQf/05Ld5zX5XPHtXffJo1fuk0t
/Q/UePOMEhYu1f7zGaovvKwP4/do16bJWn+5TJ8/CKny9kG998ufauuJa+a5D+nAyaM6ffGokubO
1eY9GfL1h75xvQAFAAAQK0ZdAQj4vbp9ca8mTJqoeTMna+GO/cq+dkyzxsXp6JnDmjR5st5fsEw3
rh7VP/3Lv2jixx9q6a6D6vSEFfF16fTeRL0/cbpmmvU3nLqknEunNXnKDE1bukbHzx3R7MQ9qu0x
y3rKtWj2JJ291SJX2WVNX3dU1ZU5mj9riiZP/EgHU9J1Zf8OTZg2V7NWb9epi3sUP22SJv1uog6d
K1aw11538IfbTwEAAMSKUfcSgH0XgL1yv76yRAWFRWrq8ino7VJNRZ3zdsDa8iKVN3vlLk3Wr6Yt
VUZxpTp6/PJ7zbpur1nWpcqSQhUWlavdHVJvyKu6imIVVzaaZTxq7+h0xrGTdVdHq7rcHvV0d6mt
o8v5cKL2+nIVlVbL5Yso7O9WeUmRKuvbFQkHVV9WopIK+5h5/he2eTgUAABArBh91wA4cZvHzaRu
JmSvx60eM0n7TCmwE6xzv1nX1d6ssppGefyBZ8sMr+ss+2xdj/uFseykbdb3er66eM/jtffZdb66
32vG9vt9zyZ4M5Ydx2eKgx3H64xrHnPG/WYoAACAWDFKC8BLxBztB4Yn6hgJBQAAECvGbgGIwVAA
AACxIuYKgP02QDtBjuUCYL8SmAIAAIimmCsAXq9Xd+7ccSbJsZi8vDzn2w7tvtp9pgAAAKIhpgrA
cOzH6/b29jofyzsW8+K+UgAAANEQkwXAbtBYz/C+UgAAANEQkwXgTQoFAAAQDTFXAOzGDA0NjenY
P/bw/lIAAADREFMFwG5IJBJRQ0OD6uvrnduxlrq6OnV2dvIuAABAVMVUARj+HIDs7GxnsqytrR1T
sZO/fQdAQUEB7wIAAERVTBaAiooKBYNB5y2BYyn2sw2GP+eAMwAAgGiKyQLAJwECAPDjGpUFwOP1
KRQOKxz0f/fP+nd7FAiFFA6H5PO4nW/+G3G5F2O/9MfnHfmx7xAKAAAgVoy6AuD1+eVqq1FaylWl
5ZbLGzBFIBx4/s1+X49LHrN8yBSFHpfL+SrhQMClwltpSrl2Qw2dXgV9f7oEuM3k393WoILyGnWb
CfyHfLkQBQAAECtGVQFwe7zydtfqcFy85i1dofEzp2nP1TTlZJWoyxcyY9gP2BlQwBytB0wxuHfv
rjrry3Qru0oBUwICYa9yTx/UoilztWT2FH2yYaeaeyLOH2CwPyKPGb+3t0/9fX0KhUJmsu+WP9Qv
T1OZzl2/o06PT5E+80ca6JfPY7bHG3C2uz8SdIpCr92PgT55TRkZqVRQAAAAsWJUFQCPmeQ7Kq/q
w3+fpULXoIb6vCpM36tf/Mt7OpqSoROH92rv3qMqqm1VWVG69h89rd1r5+jfxi1RlSug+3e7tPGT
aVp9KFePn9xVfUOtujpadOGYWe/MDXV2tejKpRPae/CoMrJuq8vfr7rSDGXn5ym/rNaUCq9unNur
TdsPqaI9IH9rhQ7s3asTqQXyetuVcmCvdh48ptp2r/Pywte3nwIAAIgVo+slAPtavL9HqQeTNP53
H2jivDW6mnZMH46bogu3crRtxSf6zc9/qvhN67V49my9t3S3Tu6O07hJK1Tdba8bCKih4IYWTf21
Pp70sXZfvK5jBxL0z796V//+y18rcdsm/ftbE7Tz5GEtXhyvGxVNOpq41kzymzQ+Ya8yUg9r+qIV
2pa0XIdOH9HKFbP0i7ffMwXjI23YuUZv/9M/a8q8ZbqS26hQcIQzGBQAAECMGGUFwK1OM4G6AiGz
0feVc3Gjpn66SFv2XlNJ0XWt2LxWe9bOVvzyOZq/fLNOFHerteCKth66pf67EfV0dqit260+s8O9
HflaMGuc/ts//LVmrNqtfds2auvOjZoYt0uuh49UdOaItqzbqH1nrqkqN1kfr9inres+0Nb0JvNn
e6q2vGP65c//i5ZvPahNGzdo/4nj2rF3o9YtW6Gj5/PkiwS+cb0ABQAAECtGVQHw+oNqLknXgkUL
tH77bi1cNl9HL51Q3MeLtGrlUs1clKhty6do0eI5mrt8vfZmNamt8LQm/Gqh8lrc6ve1a/+WFZoT
v15bVi3Rqu3bdGjTRs1aul7rduzS/iPb9f7Cjap29yniytWUCeN09Eq1ukrOatzS3cq+dUbT5pnn
iltgisFx7Vy5UgtWb1fijr3ac3STNicu18zfvqu12zMUHLTXEPzh9lMAAACxYnSdATDx+32qzE3V
gf37deRKljxhvwqupuhWdrFuXzylA4eO6lZeicoqKlXd2i1vd4NST15WcX27/MGgeloqderIAe0/
cEJFLT4NBjqUfOqgDp7LMJNzi/JKKtXZ45HX3a3SgkzVtXvkbqtTTkm1AgGf8lLNcxy9oLrusAId
VTp26IDOXC8029uptKOHdPTsZTV2e+Qzk/3Xt50CAACIFaOuANir6/3BsPr7+9UfeXaUHYxEFAoG
FLJX8Jv77c8Bv//ZhXhuryL9Efnte/5dLrm9fvXZdfv7FPCa+8zjvX3m996Q8y6AYODZZwu4etwK
BO1nBZjnNfeHzOTfY+4Lhu27BHqdK/3tWPb5esP2dL9HYTuOecyuw7sAAACxbNQVgNEcCgAAIFZQ
AF5jKAAAgFgRkwXAfhmQ/SAeWwLGUvx+P18GBACICTFXAOxkmJmZ6Xxtrp0ox1ry8/NVVFTk7Kvd
ZwoAACAaYqoA2NiL6uypcnvBnp0Yx1rsftmvOrZ/dLu/FAAAQDTEXAGwG2OPjsdyhk//21AAAADR
EHMF4E0LBQAAEA0UgCiHAgAAiAYKQJRDAQAARAMFIMqhAAAAooECEOVQAAAA0UABiHIoAACAaKAA
RDkUAABANFAAohwKAAAgGigAUQ4FAAAQDRSAKIcCAACIBgpAlEMBAABEAwUgyqEAAACigQIQ5VAA
AADRQAGIcigAAIBooABEORQAAEA0xFwBsBszNDTkbNBYzPC+De+v/ZkCAAB43WKqANy7d0+hUEjl
5eWqrKwckykrK1Nzc7Ozr3afKQAAgGiIqQJw//59dXV1KS8vT21tbc5EOZbS0tKi2tpaFRYWOvtq
95kCAACIhpgrAN3d3c4ZgEAgII/HM6bi9XrV2dmp0tJSzgAAAKIqJguAPU3u8/mciXEsxe12q729
nQIAAIg6CsBrDAUAABArKACvMRQAAECsGBUFwE6cbvc3J9Q/Gmd595e/u5+//m7j8Xx1/w/NV+N6
5La/f8t2UgAAALHiDTgDYCb87k41NdSrtrZe7d1uZ8L+5nIuUxy8CgYDzmT+zce/FlswujvU2FCn
2rpGuX1++Uy5cI207PNQAAAAsSK2C4CZkHsDrTqyfbsuZdWYydne51EgGFb4+UTt8QUUDocV9HvN
ROpWqO+umgqvaMP28+ox9w+Eu3UkcZ5++c6HmjppvMbP2qzy1oAiETNGKCivOWJ3xohE5O9pVVFR
pbqdI/tn4/qcn30KhQLy+/0KhsIKBUPqD7Zq++Jp+vV7H2na7Hk6nZKhwzu262xGpXoH+sy6IacQ
UAAAALEo5gvAQLBFW5cv19G0CoXCQQV8LhVlp+p6Tol84YCaSnN07VqaCirbzKQbUG3ZHR3eEq9Z
8Ufk7usz6zdp4/JEJRe6ze5GtHnGPJ1Ir1BbXY7Sbt5Ruy+sruYypWcUqCLrtMb9eppu1/fI21au
lJRU1XV2qaOtQdlZeaqoqVLO7TRlljdrMNSg1UtW63ZtUHocUu71i4r7NE7HrlfI1VKo1PTbanT5
/qAEUAAAALEi5gtAvykAO1avNpN2lQbuDagoeZNmTXtX46ZO1bH8WjVnHNG0ie/qt59sVdqVQ1o6
d5w+/HCc3k04Jn9/nwYjndq+aIre/uATLZo/RZ8s2aosM1kvnv4bvfvBh4rfc0bb5k3RL9+dooUT
Jun/+9k7OpV+U3tXj9eUKR9pwa5tSloyR+9PWGIm/E80eco4vfXRPF3LL9bmeRP17sRZ2rhpuzZs
WK/5CxN18PAxrZn/O733wXuavuakOnwBeZ5fF0ABAADEilFQAJq1I3GtLuS0S0992rx0sa5W+FR/
84gWrNilK4d2aXX8Qv363fGaNG2eztzpkK8uVQtXHlZPb685Um/VtvjFStx7UbeObtSClVu1Zek8
/cO/fqSVKxZrYcJG7dm2Vovi4rVhVZKWbzuv/JvHNT/hpL546tb6xXM1aWq80jMzteiXP9eE+fFa
+MknOnYpRRvjl2nT4WSV5qcraUW8FixJ1KKPP9JPf/qeVibGacbcdars9sv//CwABQAAECtivgAM
htu0eeFMzU/cr/Qb17Rl5SytSlqrxJVxWrVrlxb/co6OHjus9z+cr5VrlykuYbU2L5+q8Z/ulneg
X4PBJq1fGq9Tt5vN7oa0b+VyLZw9V0sXxOvs+bM6djlNF7Zu1dJ5szXxw/c0YVq8Ll05oxWLp2vf
vi36dPkyfbpglS5nl+hQ3Ayt23pAB4+dUV5xntYsXaGU0h49HWxS0pJPNWnGMq1ZvlJxcxfq7IXT
2nfqhjq9vi8vKqQAAABiRWwXgB63ggG3cq8cU3x8vJnc1ysl85ZO7443k/85dQWCKrhwXKvMY+v2
XVZje51ObFmthLVrlJxRLE8goIC3U1k3MlRU3apgJKCKzJsqKqtU6oktilu9WZl1XapIPa/VK9fo
Rkmx0o7s0qVbparMOaqlS1cpo6RaBdmZKq3vlqe5SFtWm0n+yBW1usy46Rkqb+hSyNtmniNdl6+k
q7K+RdkXdytu+RpdKW40+2EvTqQAAABiS4wXgB65XD0KhHt1z2zk3bsDCgeDivSbn/sj8pjHA5Fe
DZrHBvvD8np86h0Y1N3BuwqH/Opxucz6pkSEQvJ73XJ1u+QLhhTw+xXqHTDL9ZuC4JY3FHb+CGFT
GMJ9/eY5/PIFes19gwr5fQqY5/SZ5dzegAbM2IO9IXNU/2xc561/z58jEjbPYyb8YKT/2bo+j3nM
RQEAAMScmC8AYykUAABArKAAvMZQAAAAsYIC8BpDAQAAxAoKwGsMBQAAECtitgDYj921E+ZYisfj
UUdHBwUAABB1MVcAurq6VFhY6Fw9byfLsZTOzk41NTWpqKiIAgAAiKqYKgB2UrRH/rYA2KPksRi7
b7W1tU7ZsftMAQAARENMFQAbuzF2crRlYCxneH8pAACAaIi5AvCmhQIAAIgGCkCUQwEAAERDTL4E
MDQ05GzQWMzwvg3vr/2ZAgAAeN1i7iLAYDCo8vJyVVRUjMnYtzjadwIMXwdAAQAARENMFYDhtwHm
5eU5H5jT3Nw8ptLS0uK8A8C+E4ACAACIppgrAPaDgOwZgEAgMOKH6YzmeL1e5/MA7NsBKQAAgGiK
yQLwXT8K2B8KO18JPNAbcV5CCAa8f/A1vCPFNfx1vvZrgkd43FnGjBEIR8wfICKPe+RlvktsCeCj
gAEAsWDUFwD7Xf0V1y9pRVyc1h87paysLGXlVcsX8Mk9wvJO3B75PW26dT1D5fUd5sjcPeJyfjN2
UcoZbT1wRu2esLw/sARQAAAAsWJUFwBvMKLmnHOaOnm+9p+5qoMbkjR38kytOXBb9x7fV8iUAK8v
oGAwpFAwYI72vaYwhBUK9+lhf5NWzl+qi7ktGuwPv3CE75bXb9YJ9en+3XZtmrlUm/bs0KbtF9QR
CJpx7FhBBf1+s0xY4XBQXs/IBeLroQAAAGLF6C0A5ii+t9ej01tWa8uJLN17+EAP7vbp5snN+mDc
JFMKpmvn+XJ11tzQuvh5+nTrCdV19ijtQII++miSNmzdpZUrtig9J1dHDu/W7coWBczEH+ppUfKO
Vfp0/jJt2rhOP/t//lEfTRynv/6bXyi5sFa5Fzdo/sIlOn4zV+cPbtX0TxJ0KadGgdCfOOPwPBQA
AECsGNUFoD/cpQPrV2v/pVL19QfVf39AmceSNHnBXhXfPqklC1Zo0cTf6BfvvKe3fv6Wps5ZqLhl
61VSWa1bJw7r04lT9NOf/Vwbzt2Uzxzduz0+BT3Nurx3vSaM+4X+/d1JmrVgnc6dO6gFS3Yo+/pR
vfV3f6/3J76vt3/zO73/7mTtOJyhbo/HmdxH3M4XQgEAAMSKUfwSgFvBSFg55oh/dvwetYcG1FGU
q81xS7T+SJ4iPfmKX7hUk3/5tlbvOqWr505r67oELV5xQIH+AbXmpWrBB7M065NPlLD6gFp9YUX6
Qiq4sEuzx6/W+VO7Nf6jaZobt0M3My5o+eojunNll377rx/rys0bOnNwh+bMW6XrJe0KB70jbN83
QwEAAMSK0X0RoMcvv6tR+1bGafyEKZo8abGS1m/UgQuF8rXnauOWE8q+dkTzJ43XlOXbdKe8WifW
Ttf7H3yoJYsTtSZpv0rrmnRwVZy2XclX32CvWouyFDd+uiZ/9LEmzF+hdVuOqqQyUwlTpujo1Vs6
tWm+Jk+Zrk0nzmrH5t3KKGlWwE8BAACMLqO7APS45Pb6FfT2qKGuVk0d3fL5v3ot3r7Vzx8IqK25
QU1tXfIHQ/K6u1VfX6dOj1c+e/Ge2yuvx6X2jk6zjn2vvk+ujmY1NDSp24xhx3Kb5bo7WtXeZR73
2PUb1G3W/65vDaQAAABixSgvAM9iJ1b7ITv2any3M+n75bE/m/t95mefz0zWz6/Ud7s9zrIe85h9
3JngzX329+HxPGZyd5YxtwE7ll3u+ev8w+s/+/nZ+sPrfVvs8hQAAEAsGBMF4Kt4FAy36vT6vcoo
blFvX6tOrN2r7Kp2RcIh+c2Yz47ovfL7A+b3Z5O8fS6v+dln7gs8P4Pg9oXU663T/p2HVNTQ7XzA
0PBjIz/3t4cCAACIFWOsAHgV6W/Upo8X61xWg+7ea1LShMW6kFOlxqoiFVfVyx8KyetqU1FBvkpq
m9TR3anamhpVVVSqtDBfxeX18gTCcne3qyr3vGZOT1BuU7daa0tUWFEnt9//vUsABQAAECvGXAEI
9zVqm5m0L91p1OD9Vh2cs1hTPp6tCb/7WOOmT9OZwlJd3TFdE6d9pF9NW6z4JQv07rvzdOzYUa37
dKp+9c4cnbmep+MbP9LkieP09+PjdPXaSS2bOU6/nTRTe1NKFQx9vxJAAQAAxIoxWABatGPmMl3M
bdWjoQ7tmztf770/XymlAdVlHtPUKTO0YPlO9T8K6viGVZo8YZb2XyxQR2mqkpYu1oe/flsfTZ2j
uI2ndH+oW5vWrtK0X/9S//TbyZoz7UPNW3NcrvD3+24ACgAAIFaMsQLgVjAc0qUd85V05IzKcpI1
f81KLZz+qdbvTtaB7Su1NGmLEpfOV/L1y1o7b44mTV2kU5l5OjhnvlYlHtXaRQv18YIEJcQv1dXk
w5o8daYS5s9W/PItunTxjE5fK5Qv+P2uBaAAAABixRgrAPYKfr+6Oyp0ZNdaJSRuUmZloXaumK3f
vTdRC9cdUIs/qLxz2zThvV/pr347RdsOX1R+Zaua8zK0ctYczZi/UpfyKpV1dqtmfDJda3efUnNj
pfaunq1PEjbqdnWnAj7PiM/9baEAAABixZgrAM5nA3h8Ckd61dvXr3uRTp0+eMQUgW49fDCosJm8
L+7bovlzpmvx4atyhQYU9nvk8QfUZ/8AA/0K+X0KhHqdP0hfb9j5bIBI34Dzh/Dbrw92jfS83x4K
AAAgVsRsAfDbq+3NhPlDY18WsB8G5PPao/av7rdv/wua+51v8nth+R8zHo9HHR0dIxaAtWvXUgAA
AK9NzBWArq4uFRYWmqNslzNZ/ljp7Owc8f4fM/Y57b4XFRX9QQGwpScxMVF9fX364osvCCGEkB89
T548+XIeinoBsJNiwByV2wJgj5LHYuy+1dbWflkA7K09M1BTU+M0sa//TQghhJAfI3bSHxoaio0C
YGMnQXsmwE6MYzF232yG99f+0e39n332mfMPQQghhLzO/KmDz9daAN7U2CJACCGEvO6MNCcN57UW
gBePkgkhhBDy4yYmzgDYjbBfujPSFfSEEEIIebWx327b39//R0vAay0AlZWVzkVy9fX1hBBCCPmR
YufikpIS50J0eybg63OyzWt9CcBO/vadAKFQiBBCCCE/Unp7e9XQ0OCcCYiZAmBPSdgPAiKEEELI
jxNbAuyZAAoAIYQQ8gaFAkAIIYS8gaEAEEIIIW9gKACEEELIGxgKACGEEPIGhgJACCGEvIGhABBC
CCFvYCgAhBBCyBuYmCwAdsPsdwIQQggh5MdJJBKJnU8CtN8FUFFRoebmZrW2thJCCCHkR0pHR4fK
yspipwC4XC61tLSora2NEEIIIT9y7HcCRP3bAG1sC3nw4AEhhBBCXkP+2ORv81oLACGEEEJiIxQA
Qggh5A0MBYAQQgh5A0MBIIQQQt7AUAAIIYSQNzAUAEIIIeQNDAWAEEIIeQNDASCEEELewFAACCGE
kDcwFABCCCHkJfOnPlkv1vJt20oBIIQQQl4i9uPsa2pqlJ+fr5KSkpiO3Ub7dcD244BH2hcbCgAh
hBDyErEFwE6u9ltt7ZfbdXd3v2S6nFtXT496vrZe1ws/v6rYbbNzsf02QAoAIYQQ8gNjC4CdVO23
7Nmv2e2xE/rLxONV0O9XZ1uLWts75fMH5fN65PF8hzG+Q+y22W/etV/BTwEghBBCfmC+VwFwexQK
+HXt5EqN/2CyJk2coLMp6Tp2aJ92pZaotzekYCikgM9rlnfLHwwpFAzI3eNy1g2a34NmffdIY/+R
UAAIIYSQV5jvUwB8gZBqss9p+tJEVXUF1NNSruKsq0pclaC4s0V60OtSZsYN5VW3KRLyqeJOpm7n
5KvTG1LY06n8rJvKKqqR1+cbcfyRQgEghBBCXmG+TwEIhsJKPrxCy05k6V5vUG5fUI8H/NqZlKCk
izm6enKz3p80U5PjlutK8kFN+uUv9cGUmUrLb9KN5N0a9/4E/Xr8FJ3Oq1c48HIlgAJACCGEvMJ8
vwIQUtrJ9Vq097qZjO8qHOnVUKRHOzev1Yod27U4YYY6BqWsS5s0acV6xScs0Oq123U95ZqmT/gv
Gj8nQYtnTtHm5AL1hvwjPsfXE7UC0NTUpMePH+vevXuEEELImMnQ0JDzLoDvUgC8voBctblatGSG
9p1LV8qZfbp45ohWJSZq9eFz2py0SNtPXNV6c5uwNUmnTx1UwofjtXr1MW1fM18JO87r2In9OpFZ
/p3PAJSXlzsH5CPti83gqy4A5eVlCpnG4/V6CSGEkDETn8+n2tpatba2qrOzUx0dHS8Vtzegqpwz
WjR7ruYuWKLbxdW6mZaslKJmtZTe0PzZs7Xi0FV1NBVp8/xZWhi/Tnm1PeqquqO4+bM1Z/UelTR1
yNXdNeL4X4/dNlsA6urq5Pf7R9wXj8ejSDhkCsDjV1cAamtrnE8fikQihBBCyJhKf3+/+vr61Nvb
+x0S0eDdIX3+9HM9/fxz3R3o1737D/RgsF/9g/f19OlTffbwgRl7UI8/f2qW+cws06e+gXtmHfP7
k0fO6frIiGOPHLuNdltH2gebcDisPrNdr/wlgEePHun+gyHn1MOD+/ecQvB9Yv9AdoyHQ0O6f2/k
ZQghhBDy3fPqLwJsaNQT02D6gj2qr2tQcOCBnn72RA/MBD4wfOHBwKAePHykRw/vm58HvnFhgo3d
uP7eoNpaGlXf2qUBUwLujbAcIYQQQr57XnkBaG5t091Ak7Z/+qnmzJuqleuPK7+iSf6wnfQf6+kX
X0hfPJarpV51LX599vmTZ0f39x5oaOi+hh59pi9+/1TSkK5vj9O//maiZs5fpoNp1Xr09At9Ydb/
/Ik9s/BAn332mR4/GtLgHykRhBBCCBk5r7wAdHR1qjHzsOYv3CM7jQcq0vT+r97RnrQ69ffUK/Xq
NZXUtuj42rn6eOkhdXjc8of6Ffb3qLPbr66mIqVcy1H/gwFdSFiufWkd+sJXplXz9qnD3ajrV1OU
U96mQMCr/Jw7yitv0uCDB7o7ws4RQggh5KvYs+v2rYE/yksATS1tetjXqVNJszVh8iKdz7iiT975
jTZcqtJAW5YWz/hIb38wV9MmfKAZcRu1fctWXS/3qCX/ohLX7dHqae/rnd/N0sVrVUrbtVT/8O8T
NGP8VK0/Uqm+tsxn609Yqg2rV2jcb2YpOadOdx89pAAQQgghfyL2rX/2AsDq6mrndrC/7xVfA9DY
oKFHT/Tos6fqarylOdNma/7qQ2r2+5V9eLd2bErS5AkTNWfZJmUUVOrMvh26Vd8vd8UVrdl4VBdO
bFb8ykSdSy3Sxc2JStyfqY7qm1q9bK1OHD6kvZuTNOnDjzVjXpwOX66QdZeXAAghhJA/GVsA7DsE
7FsZX30BSEpSR3uHanNP6tMNm3X+1B4tWrFWSxd8qgPnkpU0YZH27Duu2dPnacaiT5W48bDO792m
eYt3aXtiguLWHNClHTu0YNoUrd5zRmfWx+mD2Rt1av92JSzfqGXjl2j/gROaPXW2Ppy1WHsvFOuz
3z/h6J8QQgj5I7ETvz3lbz8ZsL293TkDYN8GODjQ/4pfAmhu0eO7fl07sU/bt+9XtTukzrJ0Xb1e
os66Eh02E/yhCzdV11iklPNpam6v18n9u3XsRJqqG1xqvHPdlISjavIPyF2bo927dmr7juOqdQ8p
UFOgg2b9IxfSVVBaofpWt+4P3R9xhwkhhBAy+OVnA9hPMLQfAGQ/yMj+/qO8BPDw0RN9/nvn7Lwe
Pbivocf2ww8eOy8NOL74XI8ePtFTczs09FB20d///qm574GGnnzuLPLw/l3df/SZ87N51Ixjf3++
/u8/15PHj/XQTP5/7G2EhBBCyJsee8FfVVWV6uvrnVtbAkpLS51P7H2lZwBWrVrtPAlfBkQIIYTE
Ruzpfvuav5307W0wGHQ+JfCVvAugxTek2o6QMm/fVjDgd1pFvxmYEEIIIdGNnZMHB/qc24H+Z7f2
/nuD/Yrc+4HfBWBXbPHdU9+Dp2awJ06jIIQQQkjsJnz3sVzhITV57v2wAmDTaAaxTYIQQgghsR87
bw/P4T+oABBCCCFkdOalC0B8fELxQ8lZgRBCCCGjOw/MnH49I+vbC8CUKVMr082CyaYt2MZACCGE
kNGb6xmZ2rRl27cXAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAgFftJz/5/wEbmWPL4l7FPQAAAABJRU5ErkJggg==</Preview>
  <Form>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</Form>
  <Code><![CDATA[
$formStopAndStart_Load = {
	#TODO: Initialize Form Controls here
	
	Refresh-StatusBar
	
	If ($global:SelectedBigram -eq 'Select Bigram' -or $global:SelectedBackupfolder -eq 'Select Folder' )
	{
		$richtextbox1.AppendText("`n")
		$richtextbox1.AppendText("You Need to select BIGRAM and BackupFolder")
		$richtextbox1.ScrollToCaret()
		$formStopAndStart.Close()
	}
	
	
	if ($global:SelectedBackupfolder -eq 'Select Folder' -or $global:SelectedBigram -eq 'Select Bigram')
	{
		$buttonStartIIS.Enabled = $false
		$buttonStopIIS.Enabled = $false
		$buttonStopServices.Enabled = $false
		$buttonStartServices.Enabled = $false
		$buttonCheckAfterUpgrade.Enabled = $false
		$buttonLoadDataRestorefile.Enabled = $false
	}
	
	else
	{
		$buttonStartIIS.Enabled = $true
		$buttonStopIIS.Enabled = $true
		$buttonStopServices.Enabled = $true
		$buttonStartServices.Enabled = $true
		$buttonCheckAfterUpgrade.Enabled = $true
		$buttonLoadDataRestorefile.Enabled = $true
	}
}

$buttonClose_Click = {
	#TODO: Place custom script here
	$formStopAndStart.Close()
}

$buttonStopServices_Click = {
	#TODO: Place custom script here
	
	$result = @()
	
	$services = "PBSScheduler_$global:SelectedBigram", "Scheduler", "Ciceron Server Manager", "NeptuneMB_$global:SelectedBigram", "PersonecPBatchManager$global:SelectedBigram", "PersonecPUtdataExportImportService$global:SelectedBigram", "RSPFlexService$global:SelectedBigram", "Visma.P-Background-Service - $global:SelectedBigram", "Visma.PersonecP.PufIa.WinSvc - $global:SelectedBigram"
	
	$StartStopProgressBar.Maximum = $services.Count
	$StartStopProgressBar.Step = 1
	$StartStopProgressBar.Value = 0
	
	$StartStopRichTextBox.AppendText("`n")
	$StartStopRichTextBox.AppendText("Stopping Services ")
	
	foreach ($service in $services)
	{
		$res = Get-CimInstance win32_service | Where-Object Name -eq $service | Select-Object name, startname, state, Startmode -ErrorAction SilentlyContinue
		$result += $res
	}
	
	$xmlData = $result | ConvertTo-Xml -NoTypeInformation
	
	# Save the XML data to a file
	$restorefile = "$global:SelectedBigram" + "ServicesRestorePoint.xml"

	$xml_exist = (test-path "$global:InstallDrive\Visma\Install\backup\$global:SelectedBackupfolder\$restorefile")
	

	
	if ($xml_exist -eq $false)
	{
		$xmlData.Save("$global:InstallDrive\Visma\Install\backup\$global:SelectedBackupfolder\$restorefile")
		$StartStopRichTextBox.AppendText("`n")
		$StartStopRichTextBox.AppendText("$restorefile Service Restore File created in backupfolder ")
	}
	
	
	Write-Log -Level INFO -Message "Stopping Services --------------"
	
	foreach ($service in $services)
	{
		$checkservice = Get-Service -Name $service -ErrorAction SilentlyContinue
		
		if ($checkservice -eq $null)
		{
			$StartStopRichTextBox.AppendText("`n")
			$StartStopRichTextBox.AppendText("$service does not exist")
			Write-Log -Level INFO -Message "$service does not exist"
			$StartStopRichTextBox.ScrollToCaret()
			$StartStopProgressBar.PerformStep()
		}
		else
		{
			Stop-Service -Name $service -Force -ErrorAction SilentlyContinue -Verbose
			$StartStopRichTextBox.AppendText("`n")
			$StartStopRichTextBox.AppendText("$service Stopped ")
			$StartStopRichTextBox.ScrollToCaret()
			$StartStopProgressBar.PerformStep()
			Write-Log -Level INFO -Message "$service Stopped!"
		}
	}
	
	$StartStopRichTextBox.AppendText("`n")
	$StartStopRichTextBox.AppendText("Services Stopped")
	$StartStopRichTextBox.ScrollToCaret()
	$richtextbox1.AppendText("`n")
	$richtextbox1.AppendText("Services Stopped")
	$richtextbox1.ScrollToCaret()
}

$buttonStopIIS_Click = {
	#TODO: Place custom script here
	
	
	$StartStopRichTextBox.AppendText("`n")
	$StartStopRichTextBox.AppendText("Stop $global:SelectedBigram site")
	$StartStopRichTextBox.ScrollToCaret()
	
	
	$checksite = Get-IISSite -Name $global:SelectedBigram
	
	if ($checksite -eq $null)
	{
		$StartStopRichTextBox.AppendText("`n")
		$StartStopRichTextBox.AppendText("$global:SelectedBigram site does not exist ")
		$StartStopRichTextBox.ScrollToCaret()
	}
	
	else
	{
		
		
		Write-Log -Level INFO -Message "Stop $global:SelectedBigram Site"
		
		Stop-IISSite -Name $global:SelectedBigram -Confirm:$false
		$StartStopRichTextBox.AppendText("`n")
		$StartStopRichTextBox.AppendText("$global:SelectedBigram site Stopped ")
		$StartStopRichTextBox.ScrollToCaret()
	}
	Write-Log -Level INFO -Message "$global:SelectedBigram site Stopped"
	$richtextbox1.AppendText("`n")
	$richtextbox1.AppendText("$global:SelectedBigram site Stopped")
	$richtextbox1.ScrollToCaret()
}

$buttonStartIIS_Click = {
	#TODO: Place custom script here
	$checksite = Get-IISSite -Name $selectedBigram
	
	if ($checksite -eq $null)
	{
		$StartStopRichTextBox.AppendText("`n")
		$StartStopRichTextBox.AppendText("$global:SelectedBigram site does not exist ")
		$StartStopRichTextBox.ScrollToCaret()
	}
	
	else
	{
		
		
		Write-Log -Level INFO -Message "Start $global:SelectedBigram Site --------------"
		
		Start-IISSite -Name $selectedBigram
		
		$StartStopRichTextBox.AppendText("`n")
		$StartStopRichTextBox.AppendText("$global:SelectedBigram site Started ")
		$StartStopRichTextBox.ScrollToCaret()
		Write-Log -Level INFO -Message "$global:SelectedBigram site Started"
		
		$richtextbox1.AppendText("`n")
		$richtextbox1.AppendText("$global:SelectedBigram site Started")
		$richtextbox1.ScrollToCaret()
		
	}
}

$buttonStartServices_Click = {
	#TODO: Place custom script here
	Add-Type -AssemblyName PresentationCore, PresentationFramework
	$ButtonType = [System.Windows.MessageBoxButton]::YesNo
	$MessageIcon = [System.Windows.MessageBoxImage]::Information
	$MessageBody = "Have you started the website? Otherwise, PUFLA will not start..."
	$MessageTitle = "Website Started?"
	
	$Result = [System.Windows.MessageBox]::Show($MessageBody, $MessageTitle, $ButtonType, $MessageIcon)
	
	if ($Result -eq [System.Windows.MessageBoxResult]::Yes)
	{
		$StartStopRichTextBox.AppendText("`n")
		$StartStopRichTextBox.AppendText("Starting Service to original mode and status ")
		$StartStopRichTextBox.ScrollToCaret()
		
		# Load the XML data from the file
		$restorefile = "$global:SelectedBigram" + "ServicesRestorePoint.xml"
		[XML]$xmlData = Get-Content "$InstallDrive\Visma\Install\backup\$selectedBackupfolder\$restorefile"
		
		$countServices = $xmlData.Objects.Object.Count
		
		$StartStopProgressBar.Maximum = $countServices
		$StartStopProgressBar.Step = 1
		$StartStopProgressBar.Value = 0
		
		# Iterate through each service and restart it
		foreach ($service in $xmlData.Objects.Object)
		{
			$serviceName = $service.Property[0]."#text"
			$serviceStartName = $service.Property[1]."#text"
			$serviceStatus = $service.Property[2]."#text"
			$ServiceStartType = $service.Property[3]."#text"
			
			if ($ServiceStartType -eq 'Auto')
			{
				Set-Service -Name $serviceName -StartupType Automatic
				$StartStopRichTextBox.AppendText("`n")
				$StartStopRichTextBox.AppendText("$serviceName set to AUTOMATIC ")
				Write-Log -Level INFO -Message "$serviceName set to AUTOMATIC "
			}
			
			if ($ServiceStartType -eq 'Manual')
			{
				Set-Service -Name $serviceName -StartupType Manual
				$StartStopRichTextBox.AppendText("`n")
				$StartStopRichTextBox.AppendText("$serviceName set to MANUAL ")
				Write-Log -Level INFO -Message "$serviceName set to MANUAL "
			}
			
			if ($ServiceStartType -eq 'Disabled')
			{
				Set-Service -Name $serviceName -StartupType Disabled
				$StartStopRichTextBox.AppendText("`n")
				$StartStopRichTextBox.AppendText("$serviceName set to DISABLED ")
				Write-Log -Level INFO -Message "$serviceName set to DISABLED "
			}
			
			if ($serviceStatus -eq 'Running')
			{
				try
				{
					Start-Service -Name $serviceName -ErrorAction Stop
					$StartStopProgressBar.PerformStep()
					$StartStopRichTextBox.AppendText("`n")
					$StartStopRichTextBox.AppendText("$serviceName set to STARTED ")
					Write-Log -Level INFO -Message "Service $serviceName started successfully."
				}
				catch
				{
					$StartStopRichTextBox.AppendText("`n")
					$StartStopRichTextBox.AppendText("$serviceName ERROR ERROR ERROR ")
					Write-Log -Level ERROR -Message "Failed to start the service: $serviceName. Error: $_"
				}
			}
			
			if ($serviceStartName -ne 'Localsystem')
			{
				Write-Host "$serviceName is running with $serviceStartName"
				$StartStopRichTextBox.AppendText("`n")
				$StartStopRichTextBox.AppendText("$serviceName running with Account ")
				$StartStopRichTextBox.AppendText("`n")
				$StartStopRichTextBox.AppendText("Notify customer ")
				Write-Log -Level INFO -Message "$serviceName running with $serviceStartName "
			}
			
			$StartStopProgressBar.PerformStep()
		}
		
		$StartStopRichTextBox.AppendText("`n")
		$StartStopRichTextBox.AppendText("Done with starting services")
		$StartStopRichTextBox.ScrollToCaret()
		$richtextbox1.AppendText("`n")
		$richtextbox1.AppendText("Services Started")
		$richtextbox1.ScrollToCaret()
	}
	
}

$buttonLoadDataRestorefile_Click = {
	#TODO: Place custom script here
	
	
	
	$data = @()
	$restorefile = "$global:SelectedBigram" + "ServicesRestorePoint.xml"
	[XML]$xmlData = Get-Content "$InstallDrive\Visma\Install\backup\$selectedBackupfolder\$restorefile"
	
	
	foreach ($service in $xmlData.Objects.Object)
	{
		$object = New-Object -TypeName PSObject
		$object | Add-Member -MemberType NoteProperty -Name 'Service' -Value $service.Property[0]."#text"
		$object | Add-Member -MemberType NoteProperty -Name 'Konto' -Value $service.Property[1]."#text"
		$object | Add-Member -MemberType NoteProperty -Name 'Status' -Value $service.Property[2]."#text"
		$object | Add-Member -MemberType NoteProperty -Name 'StartMode' -Value $service.Property[3]."#text"

		$data += $object
	}
	
	$result = $data | Out-String
	$StartStopRichTextBox.AppendText("`n")
	$StartStopRichTextBox.AppendText("====STATUS BEFORE UPGRADE====")
	$StartStopRichTextBox.AppendText("`n")
	$StartStopRichTextBox.AppendText("$result")
	$StartStopRichTextBox.ScrollToCaret()
}

$buttonCheckAfterUpgrade_Click = {
	#TODO: Place custom script here
	
	$result = @()
	$data = @()
	$services = "PBSScheduler_$global:SelectedBigram", "Scheduler", "Ciceron Server Manager", "NeptuneMB_$global:SelectedBigram", "PersonecPBatchManager$global:SelectedBigram", "PersonecPUtdataExportImportService$global:SelectedBigram", "RSPFlexService$global:SelectedBigram", "Visma.P-Background-Service - $global:SelectedBigram", "Visma.PersonecP.PufIa.WinSvc - $global:SelectedBigram"
		
	foreach ($service in $Services)
	{
		$checkservice = Get-Service -Name $Service -ErrorAction SilentlyContinue
		
		if ($checkservice -eq $null)
		{
			$StartStopRichTextBox.AppendText("`n")
			$StartStopRichTextBox.AppendText("$service does not exist on this server")
			$StartStopRichTextBox.ScrollToCaret()
		}
		
		else
		{
			$res = Get-CimInstance win32_service | Where-Object Name -eq $Service | Select-Object name, startname, state, Startmode -ErrorAction SilentlyContinue
			$result += $res
		}
		
	}
	
	[XML]$xmlData = $result | ConvertTo-Xml -NoTypeInformation
	
	foreach ($service in $xmlData.Objects.Object)
	{
		
		$object = New-Object -TypeName PSObject
		$object | Add-Member -MemberType NoteProperty -Name 'Service' -Value $service.Property[0]."#text"
		$object | Add-Member -MemberType NoteProperty -Name 'Konto' -Value $service.Property[1]."#text"
		$object | Add-Member -MemberType NoteProperty -Name 'Status' -Value $service.Property[2]."#text"
		$object | Add-Member -MemberType NoteProperty -Name 'StartMode' -Value $service.Property[3]."#text"
		
		$data += $object
		
	}
	
	$result = $data | Out-String
	
	
	$utresult = $utdata | Out-String
	$StartStopRichTextBox.AppendText("`n")
	$StartStopRichTextBox.AppendText("====STATUS LIVE====")
	$StartStopRichTextBox.AppendText("`n")
	$StartStopRichTextBox.AppendText("$result")
	$StartStopRichTextBox.ScrollToCaret()
	
}
]]></Code>
  <TV>0</TV>
  <Mode>0</Mode>
  <Assemblies />
</File>