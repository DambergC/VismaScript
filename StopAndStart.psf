<File version="3.2">
  <FileID>799e3816-d9c3-4b7d-bd34-218507671148</FileID>
  <Preview>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</Preview>
  <Form>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</Form>
  <Code><![CDATA[
$formStopAndStart_Load = {
	#TODO: Initialize Form Controls here
	
	Refresh-StatusBar
	
	
	if ($global:SelectedBackupfolder -eq 'Select Folder' -or $global:SelectedBigram -eq 'Select Bigram')
	{
		$buttonStartIIS.Enabled = $false
		$buttonStopIIS.Enabled = $false
		$buttonStopServices.Enabled = $false
		$buttonStartServices.Enabled = $false
		$buttonCheckAfterUpgrade.Enabled = $false
		$buttonLoadDataRestorefile.Enabled = $false
	}
	
	else
	{
		$buttonStartIIS.Enabled = $true
		$buttonStopIIS.Enabled = $true
		$buttonStopServices.Enabled = $true
		$buttonStartServices.Enabled = $true
		$buttonCheckAfterUpgrade.Enabled = $true
		$buttonLoadDataRestorefile.Enabled = $true
	}
}

$buttonClose_Click = {
	#TODO: Place custom script here
	$formStopAndStart.Close()
}

$buttonStopServices_Click = {
	#TODO: Place custom script here
	
	$result = @()
	
	$services = "PBSScheduler_$global:SelectedBigram", "Scheduler", "Ciceron Server Manager", "NeptuneMB_$global:SelectedBigram", "PersonecPBatchManager$global:SelectedBigram", "PersonecPUtdataExportImportService$global:SelectedBigram", "RSPFlexService$global:SelectedBigram", "Visma.P-Background-Service - $global:SelectedBigram", "Visma.PersonecP.PufIa.WinSvc - $global:SelectedBigram"
	
	$progressbaroverlay.Maximum = $services.Count
	$progressbaroverlay.Step = 1
	$progressbaroverlay.Value = 0
	
	$StartStopRichTextBox.AppendText("`n")
	$StartStopRichTextBox.AppendText("Stopping Services ")
	
	
	foreach ($service in $services)
	{
		$res = Get-CimInstance win32_service | Where-Object Name -eq $Service | Select-Object name, startname, state, Startmode -ErrorAction SilentlyContinue
		$result += $res
	}
	
	$xmlData = $result | ConvertTo-Xml -NoTypeInformation
	
	# Save the XML data to a file
	$xml_exist = (Test-Path -Path "$global:InstallDrive\Visma\Install\backup\$global:SelectedBackupfolder\ServicesRestorePoint.xml")
	
	if ($xml_exist -eq $false)
	{
		$xmlData.Save("$global:InstallDrive\Visma\Install\backup\$global:SelectedBackupfolder\ServicesRestorePoint.xml")
		
		$StartStopRichTextBox.AppendText("`n")
		$StartStopRichTextBox.AppendText("Service Restore File created in backupfolder ")
		
		
	}
	
	Write-Log -Level INFO -Message "Stopping Services --------------"
	
	
	$progressbaroverlay.Maximum = $services.Count
	$progressbaroverlay.Step = 1
	$progressbaroverlay.Value = 0
	
	
	foreach ($Service in $Services)
	{
		
		$checkservice = Get-Service -Name $Service -ErrorAction SilentlyContinue
		
		if ($checkservice -eq $null)
		{
			
			$StartStopRichTextBox.AppendText("`n")
			$StartStopRichTextBox.AppendText("$Service does not exist")
			Write-Log -Level INFO -Message "$Service does not exist"
			$StartStopRichTextBox.ScrollToCaret()
			$progressbaroverlay.PerformStep()
		}
		
		else
		{
			Stop-Service -Name $Service -Force -ErrorAction SilentlyContinue -Verbose
			$StartStopRichTextBox.AppendText("`n")
			$StartStopRichTextBox.AppendText("$Service Stopped ")
			$StartStopRichTextBox.ScrollToCaret()
			$progressbaroverlay.PerformStep()
			
			Write-Log -Level INFO -Message "$Service Stopped!"
		}
		
	}
	
	$StartStopRichTextBox.AppendText("`n")
	$StartStopRichTextBox.AppendText("Services STOPPED")
	
	$StartStopRichTextBox.ScrollToCaret()
}

$buttonStopIIS_Click = {
	#TODO: Place custom script here
	
	
	$StartStopRichTextBox.AppendText("`n")
	$StartStopRichTextBox.AppendText("Stop $global:SelectedBigram site")
	$StartStopRichTextBox.ScrollToCaret()
	
	
	$checksite = Get-IISSite -Name $global:SelectedBigram
	
	if ($checksite -eq $null)
	{
		$StartStopRichTextBox.AppendText("`n")
		$StartStopRichTextBox.AppendText("$global:SelectedBigram site does not exist ")
		$StartStopRichTextBox.ScrollToCaret()
	}
	
	else
	{
		
		
		Write-Log -Level INFO -Message "Stop $global:SelectedBigram Site"
		
		Stop-IISSite -Name $global:SelectedBigram -Confirm:$false
		$StartStopRichTextBox.AppendText("`n")
		$StartStopRichTextBox.AppendText("$global:SelectedBigram site Stopped ")
		$StartStopRichTextBox.ScrollToCaret()
	}
	Write-Log -Level INFO -Message "$global:SelectedBigram site Stopped!"
}

$buttonStartIIS_Click = {
	#TODO: Place custom script here
	$checksite = Get-IISSite -Name $selectedBigram
	
	if ($checksite -eq $null)
	{
		$StartStopRichTextBox.AppendText("`n")
		$StartStopRichTextBox.AppendText("$global:SelectedBigram site does not exist ")
		$StartStopRichTextBox.ScrollToCaret()
	}
	
	else
	{
		
		
		Write-Log -Level INFO -Message "Start $global:SelectedBigram Site --------------"
		
		Start-IISSite -Name $selectedBigram
		
		$StartStopRichTextBox.AppendText("`n")
		$StartStopRichTextBox.AppendText("$global:SelectedBigram site Started ")
		$StartStopRichTextBox.ScrollToCaret()
		Write-Log -Level INFO -Message "$global:SelectedBigram site Started!"
		
	}
}

$buttonStartServices_Click = {
	#TODO: Place custom script here
	
	
	
	Add-Type -AssemblyName PresentationCore, PresentationFramework
	$ButtonType = [System.Windows.MessageBoxButton]::YesNo
	$MessageIcon = [System.Windows.MessageBoxImage]::Information
	$MessageBody = "Have you started the website? othervise PUFLA will not start..."
	$MessageTitle = "Website Started?"
	
	$Result = [System.Windows.MessageBox]::Show($MessageBody, $MessageTitle, $ButtonType, $MessageIcon)
	

	
	
	if ($Result -eq [System.Windows.MessageBoxResult]::Yes)
	{
		
		$StartStopRichTextBox.AppendText("`n")
		$StartStopRichTextBox.AppendText("Starting Service to original mode and status ")
		$StartStopRichTextBox.ScrollToCaret()
		
		
		# Load the XML data from the file
		[XML]$xmlData = Get-Content "$InstallDrive\Visma\Install\backup\$selectedBackupfolder\ServicesRestorePoint.xml"
		
		$countServices = $xmlData.object.object.count
		
		$progressbaroverlay.Maximum = $countServices
		$progressbaroverlay.Step = 1
		$progressbaroverlay.Value = 0
		
		
		# Iterate through each service and restart it
		foreach ($service in $xmlData.Objects.Object)
		{
			$serviceName = $service.Property[0]."#text"
			$serviceStartName = $service.Property[1]."#text"
			$serviceStatus = $service.Property[2]."#text"
			$ServiceStartType = $service.Property[3]."#text"
			
			if ($ServiceStartType -eq 'Auto')
			{
				Set-Service -Name $serviceName -StartupType Automatic
				$StartStopRichTextBox.AppendText("`n")
				$StartStopRichTextBox.AppendText("$serviceName set to AUTOMATIC ")
				
				Write-Log -Level INFO -Message "$serviceName set to AUTOMATIC "
			}
			
			if ($ServiceStartType -eq 'Manual')
			{
				Set-Service -Name $serviceName -StartupType Manual
				$StartStopRichTextBox.AppendText("`n")
				$StartStopRichTextBox.AppendText("$serviceName set to MANUAL ")
				Write-Log -Level INFO -Message "$serviceName set to MANUAL "
			}
			
			if ($ServiceStartType -eq 'Disabled')
			{
				Set-Service -Name $serviceName -StartupType Disabled
				$StartStopRichTextBox.AppendText("`n")
				$StartStopRichTextBox.AppendText("$serviceName set to DISABLED ")
				
				Write-Log -Level INFO -Message "$serviceName set to DISABLED "
			}
			
			if ($serviceStatus -eq 'Running')
			{
				
				try
				{
					Start-Service -Name $serviceName -ErrorAction Stop
					$progressbaroverlay.PerformStep()
					$StartStopRichTextBox.AppendText("`n")
					$StartStopRichTextBox.AppendText("$serviceName set to STARTED ")
					Write-Log -Level INFO -message "Service $serviceName started successfully."
				}
				catch
				{
					$StartStopRichTextBox.AppendText("`n")
					$StartStopRichTextBox.AppendText("$serviceName ERROR ERROR ERROR ")
					Write-Log -Level ERROR -Message "Failed to start the service: $serviceName. Error: $_"
					
				}
				
				
				
			}
			
			if ($serviceStartName -ne 'Localsystem')
			{
				write-host "$servicename is running with $serviceStartName"
				$StartStopRichTextBox.AppendText("`n")
				$StartStopRichTextBox.AppendText("$serviceName running with Account ")
				$StartStopRichTextBox.AppendText("`n")
				$StartStopRichTextBox.AppendText("Notify customer ")
				
				Write-Log -Level INFO -Message "$serviceName running with $serviceStartName "
			}
			
			$progressbaroverlay.PerformStep()
			
		}
		
		$StartStopRichTextBox.AppendText("`n")
		$StartStopRichTextBox.AppendText("Done with starting services")
		$StartStopRichTextBox.ScrollToCaret()
		
	}
}

$buttonLoadDataRestorefile_Click = {
	#TODO: Place custom script here
	
	
	
	$data = @()
	
	[XML]$xmlData = Get-Content "$InstallDrive\Visma\Install\backup\$selectedBackupfolder\ServicesRestorePoint.xml"
	
	
	foreach ($service in $xmlData.Objects.Object)
	{
		$object = New-Object -TypeName PSObject
		$object | Add-Member -MemberType NoteProperty -Name 'Service' -Value $service.Property[0]."#text"
		$object | Add-Member -MemberType NoteProperty -Name 'Konto' -Value $service.Property[1]."#text"
		$object | Add-Member -MemberType NoteProperty -Name 'Status' -Value $service.Property[2]."#text"
		$object | Add-Member -MemberType NoteProperty -Name 'StartMode' -Value $service.Property[3]."#text"

		$data += $object
	}
	
	$result = $data | Out-String
	$StartStopRichTextBox.AppendText("`n")
	$StartStopRichTextBox.AppendText("====STATUS BEFORE UPGRADE====")
	$StartStopRichTextBox.AppendText("`n")
	$StartStopRichTextBox.AppendText("$result")
	$StartStopRichTextBox.ScrollToCaret()
}

$buttonCheckAfterUpgrade_Click = {
	#TODO: Place custom script here
	
	$result = @()
	$data = @()
	$Services = "Scheduler", "Ciceron Server Manager", "NeptuneMB_$selectedBigram", "PersonecPBatchManager$selectedBigram", "PersonecPUtdataExportImportService$selectedBigram", "RSPFlexService$selectedBigram", "Visma.P-Background-Service - $selectedBigram", "Visma.PersonecP.PufIa.WinSvc - $selectedBigram"
		
	foreach ($service in $Services)
	{
		$checkservice = Get-Service -Name $Service -ErrorAction SilentlyContinue
		
		if ($checkservice -eq $null)
		{
			$StartStopRichTextBox.AppendText("`n")
			$StartStopRichTextBox.AppendText("$service does not exist on this server")
			$StartStopRichTextBox.ScrollToCaret()
		}
		
		else
		{
			$res = Get-CimInstance win32_service | Where-Object Name -eq $Service | Select-Object name, startname, state, Startmode -ErrorAction SilentlyContinue
			$result += $res
		}
		
	}
	
	[XML]$xmlData = $result | ConvertTo-Xml -NoTypeInformation
	
	foreach ($service in $xmlData.Objects.Object)
	{
		
		$object = New-Object -TypeName PSObject
		$object | Add-Member -MemberType NoteProperty -Name 'Service' -Value $service.Property[0]."#text"
		$object | Add-Member -MemberType NoteProperty -Name 'Konto' -Value $service.Property[1]."#text"
		$object | Add-Member -MemberType NoteProperty -Name 'Status' -Value $service.Property[2]."#text"
		$object | Add-Member -MemberType NoteProperty -Name 'StartMode' -Value $service.Property[3]."#text"
		
		$data += $object
		
	}
	
	$result = $data | Out-String
	
	
	$utresult = $utdata | Out-String
	$StartStopRichTextBox.AppendText("`n")
	$StartStopRichTextBox.AppendText("====STATUS LIVE====")
	$StartStopRichTextBox.AppendText("`n")
	$StartStopRichTextBox.AppendText("$result")
	$StartStopRichTextBox.ScrollToCaret()
	
}
]]></Code>
  <TV>0</TV>
  <Mode>1</Mode>
  <Assemblies />
</File>