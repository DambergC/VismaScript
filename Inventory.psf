<File version="3.2">
  <FileID>1675b376-67a2-4c14-9366-a4f84698131d</FileID>
  <Preview>iVBORw0KGgoAAAANSUhEUgAAAgAAAAIACAYAAAD0eNT6AAAAAXNSR0IArs4c6QAAAARnQU1BAACx
jwv8YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAADRZSURBVHhe7d15cJR3gub56uje6N75c2J2Y3Y3
JmJ7dyN2Nzp6u7e7Zrqra3qnqtxV7bPKZRvb1cY2xmBzH8Y2YG6wuTE3xjY35gYJ0IU4hO77vu8j
T91CEgib69nf7xXCkE6T2AYXvPp+Ir4hJGWmUonD75OpVPITAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA4PuI+5M/
+ZOqv/iLP6966qknqyZOnFw1eeIU5y0RERE9/E2ePKXqzdGjq/7Df/j3VX/6p39aZY7ttrv7sz/7
s+a/+qu/0tRp03XoeLzK6vyqaelSdXMHERERPey1dJrjdqeyCiu0fOVq/def/1z//b/7d7p5mP92
f/Hnf141bep0ZRbVKqsyoPOFDUoqqFdSIRERET0SmeN2SkmLShvatHnLp/qf/uN/jDwAnnziiar9
R2KUUx00B/96JRMREdEjWVqZR9nFdRo/blzkATB54uSqioZWpRQ3KqWogYiIiB7RzhXUqaH1ktav
3xh5AEydMrWqOdirZDMAUomIiOiRzf4YvyHYrzVr1t7DIwCTp1Q1+nuUWtKstJImIiKiP3qZ5R5l
V/nue/Zyh75GRnmLsiu9YU/3Q8qq8Ci99ObXKHtQX8NrvsY3j9vJRY1qaL2o1fc8AAI9SittcS6M
iIjoj1lGWbNizhdr97FU7Y5K05770O4oe1mpikspVaY5KGeag/+p9ArtjR78XLjzfJ/sZR0/W+h8
H/ZrnMut0b4TGc73Eu7036fdx1J0OCHXucefbm6r22+7lOImNd77AJhc1RS4YC7E4yyVu2a+mYya
gHl7D6clIiL6juWYe7cnkoq05+h5xScXKe78/axQuw4nKcEc+M/l1mrnoSTFJhUq7n59HXM59jrv
i0rRsdMFzgF55+HzOnEmz3yuOPx5vk/maxyOzTDDIt15JOD2288+mt/Udum7DYCMcq/z0Mg3qg0q
s9KnTPNFMosalXmmUBkN7cr0dpmPf8t5iIiIvkd5NUHtO5mp6NN5yqv2OQ9rp9+H7OXk1/jNgTPT
OTjHpZXrC3NvvaDWbz5n7kmHnDbbHPfy61qVXxuS+Zi9jvZgG3o+W445LiaYg729p55q7o1v239W
+dXeO047+HC9OZ5WeG5dZm61XxlmMORWB2593Sxze6TZe/k3zzN0/ozyZqUW1OrTfWec63n77Wcf
zW9qH7j3AdAc6A07ALLMFcqMy1WmucDMRnPQL2xQ1utLlfPyB8pacUCZZqllNrQNjoPQ85qP2Stm
fxYS+rkfUlbF4M8+7A0T7vNERPToZg+u+2OydOJsgfP+ubzB33H/odnLsT+LP5qQo6izhYpPr9CB
ExnKqfKaz9XdcVr7c/R9J1K0cPmnWrB8q/N2qHlLt2jV5i+UkF7mnO7289nSzEH8VGqpvjie7gyA
nYeTlFtpv49aJeWbr2M6Z7LnPXY6R8vW7dTcJZu1aUe0zmRXa+O2Y5r74Sbz8V2KOpPrnM5eP3se
563pvPk6qQV12nbw3DcGQPrQAFh9rwMg2KusSr9zQbeqCSjLrpGfT1DuY1OUlVOr7I5Lyt58Qvk/
+WvTPyj3v01W9qFUZXu6lF112/nNn7PKKxUXn6nk8sH377jsH1BWmf35kCfs54iI6NGuoK5NB+Oy
FWMGgP1xQHJRk/Nz7R+avZw8c6c2ygyA4+eKdSqzUgdPZijfHOvsQXbodPagbd/OW7JeyefTVVZa
qcrKGlVWVDvl5xdr69bdzgHbvn7O0PmGsneIT6eVmQGR6RyMdx0+rzwzMuxBO9nciR7KHnMXr/xM
+/cfVUlJudZt3K5J7y7Vxs07VVJcrr17D+vDNduc050v+Pp8tlRzfdPM5e04dN55xOD22y/T3Jlv
6bj8HQZAa6+5oQPKNQfqWzV1KjsmR3n/wzMq+MlfKffvRys7KkO53V8q9+XFN0fA3ynv3z+u3M/i
lNvS5VwR57zmRskuL1XU4TNKqgiooL5D+XXtztuCWvtQh314o805bU5V0PlznjlvXk3b4Gnq7efM
++bjt85n/qMobAgoKemcos+UKLeh0zmN/Xxhfafzeedr15jLrh86T7vzF26/N+eyzF90ztD3R0RE
D12FDe06FJejmHMF5sDpdw7IaSHlmIOiPV7kmf/f39ngsSPd/lZbyHlSzQCwx4CoU7k6kVSsxMwq
ZwAU1gbN5+zpB0svaVGKOe3cRWt148YNdXdfUHaOGSOmYnNgts6eTdGqzfudrzd0vqGyK3yDA+Bk
pnNnddeR8yqo8d8aGfZ62O8p09w53huVpDkL1qi1tU3Xr1/X3i+OOZfv9wX1wfzVZkQkO4PCnn7w
fIO/6mcfZUgvatAOMy7ya4J33H7263s6v7zHATBxclVLW9/gzyHMBd2qwdyQ5srn//Uo50Cf/5Of
Ku9/fEJ5W04qL7tG+f/z783H/svgx//TC8pLq1B+Y/vgee0BvaJcx6POK7XGo9T0PJ1KStOxkwmK
y6hSdnGluYGKlFnTqeLqJp1NzVNKqUdZhYU6EZOoE6fzlVXvU2pGvhKT0hUVk6CY1HLzjVUp+sAX
2vlFlGIy61VU26Kz55J1NDpWJ5OLlVPXoRzzF3TqdIpOJJzTyaRspVd2mNP5lJKZp9O5DWYUhHyf
RET00FRi7nweTshTbFKR836aOTak3yyjzOscoHccOKWFyz5x7kHf3gLzsc07o5VS2KhMe9rbzptW
4nHugEYn5ikmuVRnzHHsUGymis0dznTzuQx7+SZ7PnvauYvXqr+vTxvMPfOJ5p756i0H9eqb76mh
vklxcWe09tMj5njScet8Q9kBciajQgdisp0fV+8+mmyOQQFzmfY37QbLcN42O8fKvdHJmvbuEpWV
VzkH/+KSck017+87mWLuuLaGnGcwey8/0wyBnUeSVWju/N5++9k74t6ur8wA+PjeBoDHDAB7r9se
HO8o2Kv8BbvMQf4fTD8bfPtn5u1He5W3YKfy/+Tn5mP/5IyA/DErVdBqLsecr9DcA8+vqtCJqBSl
NzQp9ugh5+chyekpOnAoQUn5xYqOPa1zpebee5n5c9xZJRWWK/rocbPOUnX8eIxi8qqUePKY9pgb
LzkzQwcPxiixqEanYk/qgLnBUqvMKko5rUPmz0m5RTpx/IRismqVlp2ivXuO63RWiWLi4xWb7VFp
XaNiYsz5CwMqbgzzfRIR0UNRWUuXjpyyA6DYOWCnmwOyPfDbsisDOpVRqYVL1qmosERFRWWm0jta
sWqzDsZmOPfOh87nDIdSr3OwtAMgNqVMZ3NrzQDIMgOg3fnc0OnsPXP7Necs/FjNTY3atmOfZsxe
rqWrP9fUGYtUUVGpQ4eitP7zo86jz7d/DZt9BNwZALHZzu/r7z6aYgZAcPAgbu5Up9tn69s/l5vB
YN5ftWmfPlq+UfV19WpqalJtbZ0+XLbBDI79zs/07fPz7OkGzzuYfS5cZkmTMwCKGtrvuP3yzNfy
dV/5DgOgvd952KXQjIA7aupwPp7/2jLlOff27RAYHAN5v5+jPOdRADsC/loFv5ymws4B53xFDR0q
qK7USTMAMhqblHAiVnHZXpX7fIqLsgfyZnPwTlNceomSsrKUkF6vvOIcfbHnsI4lnNGxmDNKLKjU
GXMAP5nWoPJAq06djFNCXr2SU+yvVFSo1NemUzHxOpFeq/K2r5STdV7Hk/PMWMjUsZNZyvf1Kycn
WydP5ym1qEAxZ0tU0NypotDvkYiIHprKPd06kpiv2PNFYQdAbEqp5i9crd7eLnV3d6ir6+u+vHxR
az7eoj1R550f+95+YHYGgLl8+9sFsallzpPpnAFgjnEZ5nP2nr8tywwAe/pZc1epqrJSfr9HdbU1
qqmuVmNDvfmandqz54DWbj1kjnVdt843VN7NAXAwLkc51f7BAWAOzJnOE9jtz+gHn8heYIbH+s8P
a/mKDWpt9Ss5OV1T31mo9PRMBYM+fbRsnTbviHJ+nG2vk/Pk95uXYZ9XNzgAUlRsj9O33X72Nwj8
Pfc4AOy/I+xtv2gupNPcO+64M3PDFPt6VGQ+V7DikPL+l9+Zg/1/Nv3UDIK/U95/9wvz5783f/5H
5c/doeI2cznmfCVNXSqqqdSJY8nKbG5WwvGTis/xqszbYgbASSUUBFVaU6Fj0bE6diJJ6fXdKirN
Nffy45Vc1WkWYI8zFhJPxigmvUFlfrP6zIhIMH9hyclnFXWqSIXeDiUlmvMnFquo2fz59BnFZVUq
PSfdXGaGclsuqry+XnGnEnX4SIxOF/tUagbAN75HIiJ6aKr0XRj8Nb3z5v/t5iA5dOC05VQPPmFv
/ofrtdQcIJeZg+ftLV+5UbPnr1J8WqnznICh89nsgbeksd35EXN8WoXO59friLmXXmq+Zma535zm
ZpV+51788rXbtXjJGq1ctUkrV2/+OvP+7LnLtf9kqjngmoPz0PluZh/WP2uORYfic51743vMACg1
x9LsKvsctK8rNsfJjduPaPGHa7R6zRbNmrdKm3edMG9XOO/br21/nFHc2H3H+Wz2e8subdYue9kt
XXfcfvZOe+DCNa265wHQcVElzd3Oz16+kbnAEm+PSjoGVJxdp4KlXzjPCyj4X19QwX96Xvl/+ZIK
F+5xvnCJuSL2PKXmsorr63QqPkfZLV6dTUzS2QKfyr0+nU44p7PFAVV4W3X6VLyizpWaYXBBZc0B
paSc1YGD0ToYfUqnC2uUfC5ZibktKve36txpcxmF5sYtLtKRI4d1PKNepXW1io2J1YFD0YpKzFNe
c49yCnIVY/7jyW+5YEZEnzLTTmt/tFmDDT3meg1ePyIiejir8vcq6kyh4pNLzJ3QTuefqbf3/G32
SeP2mff24fuDcZk6HJ91RwdjM3XK3Pt2TmcaOp/NXk5pY6dOnClQQnqlkgsadCQuW2XmQJxV8fXp
bPa89nkEhxOyzYE89Gtk6KQZJ0Onu/18Nvvk83NZVc7zGOy98b3HUlVuvi/7BPWvn6wYdIaCHSbH
zxbokPlezuZUq6ixy/lVQPv+8XMFyjaDwj6S4Zyn+uvz26+RW9bivLpgmefOY3eR+R4Dvd9hAPjM
ACg197rtAfJba+lWmbmHXxrsH3zffCG7akrNjVca6FWpWW3fOM/dspfn/HnwrXOv334jDfZHCG3O
IxLfPJ85rTlfSVO7GRyd5hu317nDeVjfDhh7Q9w6rRkA1cFepaWcU3xmrUo9fTe/HhERPaxVB/qc
AXAqrUwVngvmANhuDpZ3VmTuFdv/x5c2h2Q+VtzUYw68Hd84j72cSm+vYs4VKSHDDABzgD+WkKtq
X685qN55Wpt9eP8bl3/za5SYO5v2CYCh57HZY1GyGShHzACwv522NypNVeZY5Xwf5sB9K/N+oRk4
g5fZa653t/NjAXv9S833Xdrcq8L6Lue09oBvGzqvPV9+lV97jqWZO9Z3HrvtIwvB3uv3OgAmVvk7
L5kL6TUHYHsQjpD5YuXmBis3K+1W5h582NNGLMz5zGVVRLq8Oz7/zdNX2OvX7Ne5U7E6cipXuY29
qvR9/XkiIno4qwledJ6lf/x0vqrNnboKc1CrMHcIf3DmcqrMHcij8Tnm3nat7JPqDp7IUGWLufz7
9jU6neuckFKq6LNFzh3VPeZeekldq/lct/NIwO3Z84R+7F6y30dqfp32Hc9UpT0G33b72Tvzrf03
vssAGDAH0T5nbbkiM2YqWsxCKm8yi6rTHPxd9L0REbk4ey+92Nz7PnaqwHkC3d6odOde9A/tC3M5
u46k6Lg5MJeZg7E9TsQml2m3+Vi403/fdh9N1aG4XBWae+rV/n6dza5zPvb1aez3c/v3FPrncJ+/
Mzsq7ME/q8yvqpDjW3nLBbX167sNgEpfv3PDD1Xl7zP133z7KNZvluSAagIXw3yOiIgeyswBrdr5
/3a/uUdrH929v9nLrQ6Ybr4t99h70OFP+327/Xuwb+3YCHe6H5K9Y2uPb/bt7cfuCvP9tNsBsOoe
B0Cga8BcUXNlzQXZKn32gi6YG8h8E0RERD9yNebg/CAaPPgPfZ3wp7kf/Rjfiz1OV3h6bg0n5/jt
7VP7xXscABMmTHAGQPXNAWDf2gs9fPS4Nm7eorXrNmjd+o1ERET0kLRm7Tpt3vKJGhub5eu56jzK
cPsAWLlqzfcbAHaxbNy0WfPnzdXBgwe0d+8eIiIiekjauXOHYmNO6svLA/J0Xr6/A+Djteudg791
9epVIiIieki6du2a+vr6nH+v4L4PAPvQv10Z9gtduHCBiIiIHpJ6e3vV3t7OACAiIhpOMQCIiIiG
YQwAIiKiYRgDgIiIaBjGACAiIhqGMQCIiIiGYQwAIiKiYRgDgIiIaBjGACAiIhqGMQCIiIiGYQwA
IiKiYRgDgIiIaBjGACAiIhqGMQCIiIiGYQwAIiKiYRgDgIiIaBj2UA4Ae6UuXbpEd2lgYMB5G+72
IyIiitRDNwDsFero6FBRUZHy8/NVUFBAYbK3TUlJibq7u53bLNxteS/19PQQEZFLCvf/+W/roRsA
/f398ng8io+Pd0ZAuIMfDZaQkKC2tjb1mb+8cLfl3bL/odhHEOzfDRERuSN7UL/XIfDQDoDU1FS1
trbK5/NRmPx+v1JSUpzb6PsOgMuXLwsA4B72ePDIDwB7cLMHupaWFgqTvY2Sk5MZAACAWxgAwyAG
AAAgFANgGMQAAACEYgAMgxgAAIBQDIBhEAMAABCKAXBPeeT1Dj6j3mu+XvjTPLwxAAAAoRgAEfPI
H/Cpqb5W1TW1avH55fPeZQR4vAoE/GYohPncHykGAAAgFAPgrnnka/Wr/NQ2vfGvv9GTTz+mCfP3
qLg2IL8vzAiwjw40VquwsFT1TebAG/r5P1IMAABAKAbA3fK0qsOfolkvvKm1h/Plb0zXxnkbdLrM
o+6OgJpbvAq2dSgYDKqzu0c9ff1qr4zShLeXK6O2RcFAq9o6utXd3aWOoF9+vzldZ4e6OrvV1dGm
js5OdbYHH/hQYAAAAEIxAO6WJ6A2f5FWTnhRC1bvVGGpX33dXh3dsVLrThSr21uho9uW60j0Mc1+
e6RGTVytrYsm6G/+j7/V+A2nFfRkaduHYzTqjfH6ODZH+WnHtWjefL01cbRmr9+qeVOnaeam46rz
+uWzjx6Euw73IQYAACAUAyBC3mCrGjOOaNGkl/TLf/6lJm84oB3LZmjU5E1mEMRqyquTNHf823pp
5BjNfm+JFk6dot//YZqOZBXqyJIxGjFytObNGqdfP/G63p/+lp5+9j1t37VYTz02Wp/u26JRr83W
yZxaBYMP6jkMDAAAwDcxAO5as1o8fnV29aizo0vNVdEaOeI9HTi0XbPnvqMF8+dp5p5EFZ3apfdn
vKLR45Zo+2ebNGHGJlU2ZemDx3+lnz31iiZMmaiJb5vTL5ilKQuiVV9+RG+9vUHVDWf17tgPdCSt
kgEAAPhRMQDukjfQruacaL2/bL4OZpSpPGefXnz+HcUXFumzj1/V//lfRuhsU63ObduqXZ/v04rp
4/TayBf1/Jsf6VxJgT6f9m+a+eEX8nlKdGjvQW1ZOUfjZh1QRcEevTb6Y5VVxWnSa+/pcCoDAADw
42IA3CWPJyC/p1T710zX4795Qo8/+bzm70lS51UpZ+cE/X7SApW196ns+E5N+PWv9cwrk3X4fII2
T3lRY2ftUUXNeX049kk98fgzmro1WrHHdmrZhjhVl57UwsV7VVmTrJUL1+tUbo0CAW/Y63A/YgAA
AEIxACLl8Sng98vT0qxm8+eutoDyT67Qk8+/pm2ni9XaHpTPfN55bQCP1/w5YE4/eDD3+uyvC3rV
3NxiPn7zn+Y179vT+Z3TeJyPP+jXDGAAAABCMQDuJfM1PF6vvKagr0X5iQe05UC8qptb5b958PaY
g/rQqwTa62Qb+rPXjAOPc7qht4Mfv/3tg8x+DQYAAOB2DIDvWLPJ39qhnq52+czB3L4f7nQPUwwA
AEAoBsAwiAEAAAjFABgGMQAAAKEYAMMgBgAAIBQDYBjEAAAAhGIADIMYAACAUK4YAKmpqc7BzY4A
+maBQMAZSQwAAMCQR34A2ANcbGysMwIofPbgn5CQ4PzlMQAAANYjPQDsFeru7nYeBWhqalJzczOF
yd42diiFuw3vJQYAALjPIz0AhrKPBFDkwt129xIDAADcxxUDgB5sDAAAcB8GAEWMAQAA7uOKAWCv
GEUu3G13LzEAAMB9XDEAurq61NHRoc7OTgqTvW3skyXD3Xb3EgMAANznkR4A9olt9nfcExMTdf78
efqWkpKSdPbsWWcM2L/wcLfl3WIAAID7PPIDwP4KoD3I2X+rP9yvwFGz82qAdgTwQkAAgCGuGAC8
FPDd46WAAQChGADDIAYAACAUA2AYxAAAAIRiAAyDGAAAgFAMgGEQAwAAEIoBMAxiAAAAQjEAbq/Z
HCz9reo236j9Zi/0dCroa1FzuNM+gOzX8Qda1dbqN9dl8Nf37kcMAABAKAbAbXl9XtWXpGjX+o+1
fNlyrdlyVHl1rQp4w5/+/uaRz9uk4uxUJaWVmCHikyfs6b57DAAAQCgGwK085gDpV9q++fqvf/+0
3p3znl5/+U29t/68Al3tam1rN998m4J+r3PaQLDNvN8qv8+jFo/P+XxbW8B5QaJA0C+vPaAH/Oag
7jHDwi+/OZ/H41fQXk5rUF5zvX3m463mz63BgDltmy72+nRs/RxNmHtIvgtt5jLCXc/vHgMAABCK
AXArMwCCLTq7b5WmfZjg3Di1Mev11kurVBqsUUZ8jGJiTymnvNmczmvuqZ9RfHyyKuoDavNUK+VM
ghLPF6qpsU7FOaWq8zWrrqxGDU1Nqq+sUEVZnbmOtUo/E6e4pGw1BzyqralQVlaGktMLVV1TaD4X
rdVzZmjKh1Hy9zAAAAAPDgPgVvYRAJ/SD32oJ341UotXfag3xr6huZ+cl7ckRkvHj9aYV1/Q6x/s
V0pClGa88Iye++0ITTHvn9qxUv/2zDP6zWNvafXaLXr3lfeVUJGmhc+P0JL9CTq0erkWf3RQ8fvG
a8SzT+mJ3z6vpXHH9fm8CfqXX7+iyVNnae7Mf9WI557Vz37xhF5efkJtPe0MAADAA8MAuNXgAMgw
A+A3//yC3p8/Vx9ui1Kxr0vB6vP6ZOkijR/9e/3DU+P16Ser9OrTv9OsjRu0c3uMPp8/US+MGqWP
Vm7VwSOp+mzJKK3Y8Lneff4f9dK7m7Vl9Uf6aMunmv7mBCXWdag5eYteGz9T8yZO0KK1J5V+fLXG
TV2lwOUuHdjwgd5afIxHAAAADxQD4Fb2RwAendu3UhPnHFb3jSu61NWj7p5CrfnD65q9+IDSYrfq
hZdnaH/iOSUc3q6V82fo9TEf6URyoo7v26Tpr4/V+yuPKTVxvh773SRt2fy55o6dpFHzZutAwjGN
f32O8toG1F6wR2+9OV0zZ83XJ0fTlbB3icbP2acvdVEn18/RxEUMAADAg8UAuJVHbWYAnNmzRK9O
+FQNXW3ytfjU1lWpz96cqpEjZ2vle2P0//zGHNh3fKL3n3lNE6aP08SZC7Vl0UJNenGMxr4+UnPX
R6k0d6ee+dufaXtGq/bPelk/nbZRnu4G7f7gSb0+aaomjn5DMz/9TCvee08f7cqStzJa77z8C739
zrt64el/0isLjil4oYMBAAB4YBgAt+Xztqg8P1VxiTlqvvlreB5fq5qKUrV96SItXb5Cnxw4q4ra
eiXv+0SLFy9RdG6T2muLdWDVEi35+HPl1LUpUFeg0yePqbguqKqCJB1PK1OHOfh6qpO1bfVCLVp/
VHXeJmUlnVVyTpU6uvzKidunJQsXauOevUpKLZEnwK8BAgAeHAbAbdkX4vH5W9XeFvj6hXjMW2/A
vjhQn3MDXLCPDHi9au3qcW68jqBXLT6/Os3n+y50K2hGRLPHr/aOTvm9zc6v93W2+p1/l9/ja1P3
BXO6ng75PF4FW9vUGvCqqalFwfauwb+Mri61tZrvhRcCAgA8QAyAYRADAAAQigEwDGIAAABCMQCG
QQwAAEAoBsAwiAEAAAjFABgGMQAAAKEYAMMgBgAAIJQrBkBqaqoCgcF/iY++mR1HDAAAwO1cMQDO
nDmjuro6VVdXU5hqamqc24gBAAAY8kgPAHvl29ranEcA0tLSlJ6eTmGyt09GRoa6urqcv8Rwt+Xd
YgAAgPs80gPAZq/UxYsXnUcD6O6Fu/3uJQYAALjPIz8A6MHHAAAA92EAUMQYAADgPgwAihgDAADc
xxXPAbh06RLdQ+Fuv3uJAQAA7vNIDwB7hewz2ysrK1VWVkbfUmlpqfPrgPYv2t5m4W7Lu8UAAAD3
eaQHgH1mu32hm7i4OOXm5ionJ4fClJ2drfj4eOdXJu1feLjb8m4xAADAfR75ATD0SoD2RW78fj+F
yb5Kon25ZF4ICAAwxBUDgH8L4O7xbwEAAEIxAIZBDAAAQCgGwDCIAQAACMUAGAYxAAAAoRgAwyAG
AAAgFAMgYh7na9jCf/7hjwEAAAjFALhbHp8CwaACzq/S2bdetTTfeRqv1yef1w4Er7kO5vNmMNjr
4rntNH/sGAAAgFAMgG/L61ebr1KHV0zXvz71tH47brqOJNbKH/TeOrh7PC1qqKtVTW2DmhrrVV1T
r+amWhUXlau+yXz+9sv7I8YAAACEYgCEzaNgu0/ph1dp9IgFOltZphNbV2nRR0dUe8HcWD19zg13
uadFJ7Z/rI8+Oa/q/AN6b+4hNXtz9NmWwyppbjXX0ZzWnK63p11+T7M8/nZ1XzDn7TXXvzMory+o
7l57WV0KBjxqDnl04X7FAAAAhGIAfEutbQGlH12lN18Zp6Rin7o6utXV2SF/1Tl9smScxk1foP2p
5/XhyH/W3/56jGZPelr/19/8XluiY3T86AlFnziorauWafLYNzRpwV4VtvTIW3hYi6a9oTcmz9AH
n59Rbdl5rZg5TmMnrNLpzDq1BuyPEMJfnx8SAwAAEIoB8C15fAEFGkp04uOJevyXj+lfnntHMVV1
OjJ/lEa+PVFz3x+rp0a8rbdfH6GXJqzWro3T9a/PzlLcmV2a8tb7mj3+Ff3yicnasXu9prz0ppZv
P67NM5/RjGVrtf3j9/Xbtz/UpwtmaMSzr2jy+Hc0b3G0Gnva5A1zXX5oDAAAQCgGwLdkH45v7ehR
b0erGqrztXHpTL01aaZe//Uv9P+Zg/boN17T6Ncn6P25C7R4c5IqsnZr0nv71VQfq/fenqkPZr6r
2evO6bqC2rtigd6dMUNvTFyr0s4BtZcc1qSp63QyepvenfKyxkyap0/3Zam5w/9AnjfAAAAAhGIA
hMtcZsDTpNh9q/XRsdNq7/Zr/4Z5emPCEs0Z87JW7k5TT2u5jh88pPUfztS7S6OVc26L3hj/qcrL
ojR9zAy9/94MfbDujC4O1GvrojmatWiV3hv3mvamV6j+1AaNN5d1aP8XOrrnqDbOmaARoxapoL1b
QU+Y6/MDYwAAAEIxAMLmkT/gV+GZzzVqxBN66ukn9fiYmYou8Ko+ZacmPPcLPfXMC5r+eZxSYlfo
lV/9mzYe2qgpvx+hOStWa+GHa7Ry2UdauT1ZvX0N2rt2udbtTVZe3DKNfPZFPf/cv+jvR6/R+ejd
mvirx/TUcyO14UiGfIGAvAwAAMCPgAHwrZkR4PerubZapaVlqqlvcl4PwH6sobZSpeVVavKa933N
qquuVl1jk5rqalRdW6+mlmY1N9sGL6vZvO/1+JR6bJfmzJylkWP+oGdWRcsfbDOXX6Xyymo1+/wP
5OBvYwAAAEIxAO6aR15zufayfd6hZ+h//THngO28AJD98+DHveZ0Xq/5s31rPmbPY/8c8Hl17sDn
mjtvrhZ8vF3JlS1mPJjT37ws+5oCd37t+xcDAAAQigHwI9VsCnZ0OTd434Vutfk8zsfCnfZ+xwAA
AIRiAAyDGAAAgFAMgGEQAwAAEIoBMAxiAAAAQjEAhkEMAABAKAbAMIgBAAAI5YoBkJqa6hzc7O/o
0zcLBALOSGIAAACGPPIDwP6OfWxsrDIzM5WRkUFhSk9PV3x8vPOXxwAAAFiP9ACwV6i7u1v19fWq
qalRbW0thcneNo2Njc5ftL3Nwt2Wd4sBAADu80gPAJu9UhcvXqR7KNztdy8xAADAfR75AUAPPgYA
ALgPA4AixgAAAPdhAFDEGAAA4D4MAIoYAwAA3IcBQBFjAACA+zAAKGIMAABwHwYARYwBAADuwwCg
iDEAAMB9GAAUMQYAALgPA4AixgAAAPdhAFDEGAAA4D4MAIoYAwAA3IcBQBFjAACA+zAAKGIMAABw
HwYARYwBAADuwwCgiDEAAMB9GAAUMQYAALgPA4AixgAAAPdhAFDEGAAA4D4MAIoYAwAA3IcBQBFj
AACA+zAAKGIMAABwHwYARYwBAADuwwCgiDEAAMB9GAAUMQYAALgPA4AixgAAAPdhAFDEGAAA4D4M
AIoYAwAA3IcBQBFjAACA+zAAKGIMAABwHwYARYwBAADuwwCgiDEAAMB9GAAUMQYAALgPA4AixgAA
APdhAFDEGAAA4D4MAIoYAwAA3IcBQBFjAACA+zAAKGIMAABwHwYARYwBAADuwwCgiDEAAMB9GAAU
MQYAALgPA4AixgAAAPdhAFDEGAAA4D4MAIoYAwAA3IcBQBFjAACA+zAAKGIMAABwHwYARYwBAADu
wwCgiDEAAMB9GAAUMQYAALgPA4AixgAAAPdhAFDEGAAA4D4MAIoYAwAA3IcBQBFjAACA+zAAKGIM
AABwHwYARYwBAADuwwCgiDEAAMB9GAAUMQYAALgPA4AixgAAAPdhAFDEGAAA4D4MAIoYAwAA3IcB
QBFjAACA+zAAKGIMAABwHwYARYwBAADuwwCgiDEAAMB9GAAUMQYAALgPA4AixgAAAPdhAFDEGAAA
4D4MAIoYAwAA3IcBQBFjAACA+zAAKGIMAABwHwYARYwBAADuwwCgiDEAAMB9GAAUMQYAALgPA4Ai
xgAAAPdhAFDEGAAA4D4MAIoYAwAA3IcBQBFjAACA+zAAKGIMAABwHwYARYwBAADuwwCgiDEAAMB9
GAAUMQYAALgPA4AixgAAAPdhAFDEGAAA4D4MAIoYAwAA3IcBQBFjAACA+zAAKGIMAABwHwYARYwB
AADuwwCgiDEAAMB9GAAUMQYAALgPA4AixgAAAPdhAFDEGAAA4D4MAIoYAwAA3IcBQBFjAACA+zAA
KGIMAABwHwYARYwBAADuwwCgiDEAAMB9GAAUMQYAALgPA4AixgAAAPdhAFDEGAAA4D4MAIoYAwAA
3IcBQBFjAACA+zAAKGIMAABwHwYARYwBAADuwwCgiDEAAMB9GAAUMQYAALgPA4AixgAAAPdhAFDE
GAAA4D4MAIoYAwAA3IcBQBFjAACA+zAAKGIMAABwHwYARYwBAADuwwCgiDEAAMB9GAAUMQYAALgP
A4AixgAAAPdhAFDEGAAA4D4MAIoYAwAA3IcBQBFjAACA+zAAKGIMAABwHwYARYwBAADuwwCgiDEA
AMB9GAAUMQYAALgPA4AiZv8DGRgY0LVr14iIyCUxAIiIiOiuMQCIiIiGYQwAIiKiYRgDgIiIaBjG
ACAiIhqGMQCIiIiGYQwAIiKiYRgDgIiIaBjGACAiIhqGMQCIiIiGYQwAIiKiYRgDgIiIaBjGACAi
IhqGMQCIiIiGYQwAIiKiYRgDgIiIaBjGACAiomGXPfgNDAzo0qVLrmno+wn3/YaLAUBERMOqPnPA
a2trU3FxsasqKipSdXW1c2AP932HxgAgIqJh1cWLF1VXV6f4+HgVFhYqLy/vkS8/P1/Z2dlKTExU
T0/PPY0ABgAREQ2rhgZAZmam80iA3+9/5AsEAvJ4PEpJSVF3dzcDgIiIKLShAZCenu4cPFtaWr5n
HvkDrWprbVXrzXxer/lYUK0Br1qaw53nwWQP/o2NjUpOTmYAEBERhev+DACvgm0dyotbrVEvPK3f
/e63Gjt7hYqq63Vs5wYt3p+mYLu5Vx72vPc/BgAREVGE7scA8Le2qTb1gEa//Yo2RKWouDBbhzbN
1p79+7V8/jsasTJW7T3t6ujsUX9/v3o7W51HBIKd3YPvd3fK52lSsxkS7V0XnI9dMKf5voOBAUBE
RBShHzoAPF6fOny12rZ6hiasPaPe/m61BoMKtrWrL1ClDYunaeS60+rra9WpHYs1duxYzdxxRu0X
/EresU6TJ03SzBVbVNjUo55AnaK2LtAk87ElO0+rpfX7PWrAACAiIorQ/RgAbY1lWr9ktN4/WqTe
Nt/g57x+9fgqzQCYrtGbzqj4zGY9P+59bd3xqabNeE3rd23R9DdGaMz0mXpn9hIdPVOupKgVenzU
BC2eNVUjXvmDVieUq6v15uV9hx7KAfDFF3t1/fp15/cuiYiI/tjZF8yxAyA1NfXWs+e/U+ZA3+mt
0Zal4zXG3NPv7mod/LjPr15/pdbMGac/rI7TF0v+WWM/SZKuDihxzwd6Zt4GrZ4zVi+9PEJzF3+m
xPO5WjXuL/WXP3tGo18bqd+/8G9aeqJQPfa5A6FfM0Jer9cZAElJSc7B3f5IIdz3fnv2NB0dHQ9m
AKxbv1Hbt21TZ2dn2CtMRET0Y2cPlvYFc+xrADQ0NDhj4LtVr6bGWmUnxetIdJrqmhtVbz9eX6+W
+kolRB/U7oRspcRs1uFzufI0NSrr/HFtjc8x97g75KlO0/qZs7XtWIpOndyi2KxqtQb88vnMPf/G
etXWhn69e6umpsZ5PYChRwTupebmZl00Q+CBDIBdO3c6K8P+riUREdEfO/vrevahb3vn1L5v//xd
a2trV3dPr/p7u9V+22W0mQP8hb5+XbzQpe7eAfX3dKnVfL6rp08D5rT269knBg5c+UoXzfsXzGn6
esz1uO2yf0hdXV23vseh7/du2R+B9Pc/wB8BXLt2zflZAxERET0c2R8DPLAfAfAkQCIiooczOwLs
owYPfAD09PTq8tXrcly7Yr5gj3rCXKHvlH294/7LujF4qdKNaxrou/DDL5eIiMjl/TgD4Np1XbnS
q9Jzh7Tso6XaHH1age4b5nh9Wf29d16hnp4L6r90WVe+uuQc4G//XGh9/RfV5S3Rwa3rtGLpUq3c
G6Oq7gFd6ov86w9ERETDuR9hAOzVjRs3VJ+6TzNeGq9F61drytuTtHrtAe2NTlJzhzngX7yky1eu
6urVa7px9ZLq8hK192iu+q9f0ZcDF9Vrr2xfvwYG+tXbd1Ff2tNeuayvrnypxrMb9N/+91/pvTWr
NWfa+5q1/qw6v/rKfM5e3lVzfvurEP26/OWX+uqrL3WRcUBERPRjDIB9kr5UwicfaNy7uwcfqjcH
+YLo5Xr88Te0J61el7qblXsmVjGxiSpr9Cpu0zQ9/sKHKvF51djgUeeFXvW0e1VT6zdjwK+clFNK
TCpW96Wv1HjqE41+8RNdspdbdlKTnl2uql6fis7GmctLUH51UJ2draqoKNb589mq8XeYQcAIICKi
4d2P8gjA9RtSoCRGKyf+Tm+Mna/Pjmaq4NQq/fT//s+atj1LA8F8bZszRdMmvKpR09dq1qjH9Tf/
NFp7oz7T1OlbVNv7pVoLD2jKrM90eu8mvfncc/rt46O1enuBvEW79NRf/0bTl36kd0dO0uwt+c7l
bZ87zVzeKxo1Y5sO7/5Yz/7qWY2evEpnqwO6NPSoAhER0TDLHvjtqyHa3wJ44M8BuHLtuq5eva4L
DfnaueEjvfDKeC3duU3z5n6qivYBXW4r1L71KzR53Ev6x8dGadm61Vq0IUUdzSc0bsJ61fd9qbai
g5o+5xMdWDdPI994Xcs27lBMQp0a83bomf/3t5q3ZZOWvDNd0+adkLe7XEc2rjSX97K5vNf10dK5
Gj9hqzrNELl6qd95nkG4G4WIiMjN2YN+MBhUbm6u81oB9rUQHtwAsK8DcGVAZSXZqux1fgCg5O0r
9eYf3ta4BbvlvdGqAxPH64OFUWooS9CE0e9o3pJFmrM+VT3BWI0buUHN5sDdW35Ak6ZvVGZ+ps7H
HdCSqZP1ztKjKkzfo7de3CJzXSV/iuaMflXTxk3X4gXHzOWd0vjRM7Rw+WK9v/Skuq9/pf4wNwgR
EZHbswd/+zLI9uWPMzMzH/wA+OKLfeZu90XF7XhXT456Q/Pnv6vnx83SZycP6IORL2rxjhOKWrlS
bzw/TctmjtPfPTZOyz9boFefGKvDaSla/fpren7CAi1+Z4JGTVmv2G1rNel3r+vtMW9qydZ4VaXv
0GP/2881bv48TXpljKavPK6oNas0+rmpWjZrnH76qzGauXSeps45pM5rXzIAiIho2GUP/vZV/2pr
a51XALQvG2wP/g/8hYCuXb+hgW6vzh/eqU2bNutYcpkGrlxQ+dlDOnwiX20dzTqze6s+++xzHUnM
VaO3VOcO7FNSoUeemjP6dMtWHTl2Rhm5Derp9Ctl/zZt3XlYVW2XNdBWpdj9O/TJxk3asuOkytuv
66u2RiXu+fTm5WWppLxE+UX16unv42f/REQ0rBq652///QP7DyDZ1/+3/2iQHQT2pYMf6ABwXgmw
76KGXgfo+pXL5kDcp8tXb+j61cvq67+kq4Of0o1rX+nSxcu6euOGvhro18WBwc9cv35VV7685Pwa
4BXnlX+ua6DffHN9A+ZPQ67psv1YyOVdHrisLy9Hfl0BIiIiN2Wf8Gd/5m+zD/nbg7+912//5UB7
8OelgImIiFyY/cf4srOznewjAPaef1NTkxITE51/ffCBPQKw5uN12rlzh7n3ft1ZIURERPTjNfSs
f5u9tz900Lf/JHJPT8+DeQSg0nNBmzZvUUzMCecK2N81JCIioh+3rq5OJ/ukv6GH/bvNW/u+fR5A
nxkK920AVPn6VdHSo4bGJl0euORcuF0YRERE9HBkXxXXHp+vXrmilo6B+zUA7KMAffL3XJW360tn
WRAREdHDlbfrsnPwr/H33zp+/+ABYLNrosJDRERED3OVtx2778sAICIioker7zUAqnwXnTMSERHR
o1mFp09t9zoAJk6cVGtfr6dzQM5qICIioke0fvuyetLadRsjD4CXXnqp6uO1G7R6zVqtWv0xERER
PaKtNq3fsEljxr4VeQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAd/rJT/5/sSQUJfJhNmQAAAAASUVORK5CYII=</Preview>
  <Form>O6o+1oc21iYAACODCAAAAAAABADtWV1zoswSvk9V/oPlxbkxtWDEiHWSVDWMrkYx4td7zM1bBAlBEbKAov76
0z2YLzWK2c3WeU8tqSKOMt3PPN39zAxzeXs/tswovD49yWQuk0YmWj5ZV9nuMoys6be/HG/kx+G3
qh9Mk/tZZtdPZ5mBFYSO711J30T6O8uoMzeaBdaVZ82iwHDPMu3ZveuYDWvZ8yeWd3VfKhlFs3iR
LxckS5TL2YxnTNHzA9qre3PLi/xgmc2Yj447CvD5rOp7UeC7YZbDRcDtwH+ygmi57gizyO+ahmsx
Z2p5BAYfvTjL5AuXwvOjh7pq/sjKXlfR08E+qusgxq6zwg4XFzjgQuniYCciS/GDkRV0o6VLrpyF
NSqwgx3rpu89Dxx/VRzPCJbXAKAAVKCu4if6D6pfwU9VG28q3YDfdHj+fX0psHWdnmx/9/nrj7U/
1v4vrbEJzGPwoW4qtzGrKD0RVnpfgmZYqdmKB1iJ9/ZvxsZ0iGLw4CaGW1Bl1vMhHldKoA2sNrD6
I4thadTLoM2WbZ1pERNhGYAM2vTu9ARHUTMZ9liFNArt1mYKjTKOfwk2vJqxOgEWksVzaA5r6IG1
eoipXkEMAUNMzRLx2BYR40ogjMJKRGurtvzumzftpkwWggmNst3SVVHpmTCzd/nfh+35qoMSALGg
QwGakxtk5XuX8xaix3m4ieD0ZAemVO2lUMdRW9CKVUnt2TDXj8oQjHUYwwwaFfWFR8MmjKtUvB3d
Pj1JUNvI9Cga6EwA1odI34NRlcGL4QK0CuVjmY1DWBT6hNH9PG/rdpm3x0kbedvHdDRBDHWbePoA
aQA3dWjbrE2xPz2Ju7wqPLKQ+znemqcn8gpjo5k0bilNDwFrZDGYYFvckb1NWzWBySDqxKweIORG
PP4cxve8LXMU24FIWhEeM0p83urJiE18mw2sDkFMPPqAzFcaVEWheWS+7X4iGKDFagf1LeFpfn7I
4rt8Q0yPxXbMum+Z5dlBeqeYFPtCet4+8JlDXm5mY9SSZVgEDe4oUssdz+/XN4GqpirnQJPWvJow
B1hAQ6J0rTtcMaVUvO1u50g7biaIsTLs87rGdo1bzB1bp/Mn4rG5Qsw6wryRgFgg1V9UgPO2raGp
FTMnYWRGedISFVk5PVnYVAMazWZN6ega4KqOKm/XyCJiQ2ZnMYjQrFcJtf/pyg9MPp9+76+GENla
EZoy6fyFwn1WPlWn85iqqEMWbIih0edVxeeqJa8BN63FN/lG2rHCKmKDHrSR3FidA5MAnfD5lM+v
n6hTxHin4Rzfr97qanldYPg7rktiVv2rR/OIuNPi7nzLcd50qiKL2oA67vHY1+FWZ1Dl2rLN68E6
pXUHWVC+IwvvVjq4fcrrxEJHTD+fJnO6o+Coc2z8ahHXJedQiaFsk8W7xZo3dpTGNsQxX89xRcW1
lPN+XtCBDXid1fQ0dTqm/PzPuA+h3ccaeB66CTXESLyZXBEbpA1ReFxVhTKOsl9AhW3RGuH0ZLa9
SsAeIWVDZTAm3uIPR72iMTGpQnvVFqiz92uklq1KNNP8sHVifpC+qkhLpkWsU5upzYoGBRtCuDF3
rw8IA/B8s6kmzjcjx1df8gXxprk8EgjLe2tBHYJtA1dxqoEO43qWqk7n80TncW7qDEsUGeQh2g30
hZVzqA5B4HU8mifrkBxnekg8tTBDhUqi0h7Ut9cZVFV8j6NTjUy35tfNOp0X+WxHFidDERpylfRu
H8a3VxLTxCethEPSeYF2JMYYFTQ2pdcM3YyMBj9ihUFLJF6/3/US3vxdOU8rm8a8hxhd2uP4pG8o
/RqM9uxx9q/JNVv9ASjDT7qGM3Jfxba37/lkXiDVXqgaqc/gVTsog4MO8TghHvtD2oe1dB2nJfTg
7Vhpf+mOEjdrY1tRoDUkJVC7lON3OulXSMrQXmGkOn2ciWyF9l2/FduO6yZWGWUDrjlXmH+sqWPJ
dW1wfjdvf6z9sfYPsSbgheuQHZf0gDcb8A6g0A3adGMCvVl5ILms0XZEkcmMRbcaKgYouHemiXpI
L5xvASTScxMU2gbg5Idriwe7FkNbwg1sTVByaDAWbCbkHmKGDmW6Ce0XFJvY5KtLYf3Ke/16/ND7
8hbes9fvzhIO9ulGRhC1/dCJHHrZrmI3K2gbgZXiNKBnLaLs9R5fFfpl/XDTN0Yb4P6m7y4F/tRz
l8MHMsosinzvy49k7rkb1fVDa9+BzI5zFc989IPsteKjgelZpuPYj9tc7jhbMWahFQ4M1xkZSTCq
hhtaKXoyx3B9u2OFOFQMoeGZlpuiW9M3146KJTrKkfIpOiU59oacFH2S86JS8Sxzvn0stSOtjPu6
N7IW2Ws5zdM8Cf9lTJ/+nRZPP7RUf/qEg793LerfsdBf4Hh29roXzFKaGDjhzHD5kZZimBPVdynq
O/tfCklap09yLMtoFipG8OV5/uLpuCx/TR5KnaKUOnVe/KVOHH7QeH5+VOaUU2fOx3iOj1rHMR/J
quIvvjxuLyq6dnhc+Oi0F6XC90LfNRBW+SmNRL0GPV8oYUy2z34/ivom2tTBL4oyOiqnya/X6JdS
R/8XBP23zkdtIwxjPxh9tljzGLaSeKTOPztNHbS8eI6ikEq9X2JWTB2zI+AcJ9MbKxYVwzLZ5OBv
/u3GouV/O2e6VhTh3Bb+TM7k8+kV/r3XL02aVLKQyHx6OL8uaZ6d/hOThjv5mZQ5YnZ46/JL8yXV
8jPJl7RgfmG2cJcHc+VN4/ljeP1fdEiFWdYmAAA=</Form>
  <Code><![CDATA[#requires -version 5.1

$formInventory_Load = {
	If ($global:SelectedBigram -eq 'Select Bigram' -or $global:SelectedBackupfolder -eq 'Select Folder')
	{
		$InventoryTextBox.AppendText("`n")
		$InventoryTextBox.AppendText("You Need to select BIGRAM and BackupFolder")
		$InventoryTextBox.ScrollToCaret()
		$formInventory.Close()
	}
	
	#TODO: Initialize Form Controls here
	Refresh-StatusBar
	
	if ($global:SelectedBackupfolder -eq 'Select Folder' -or $global:SelectedBigram -eq 'Select Bigram')
	{
		$buttonSystem.Enabled = $false
		$buttonSettings.Enabled = $false
		$buttonPassword.Enabled = $false
	}
	
	else
	{
		$buttonSystem.Enabled = $true
		$buttonSettings.Enabled = $true
		$buttonPassword.Enabled = $true
	}
	
	#Requires -Version 5.1
}

$buttonSystem_Click={
	#TODO: Place custom script here
	
	$Services = "Scheduler", "Ciceron Server Manager", "NeptuneMB_$global:SelectedBigram", "PersonecPBatchManager$global:SelectedBigram", "PersonecPUtdataExportImportService$global:SelectedBigram", "RSPFlexService$global:SelectedBigram", "Visma.P-Background-Service - $global:SelectedBigram", "Visma.PersonecP.PufIa.WinSvc - $global:SelectedBigram"

		
		###################################
		# INVENTORY OF SERVICES
		###################################
		
		$data = @()
		
		foreach ($Service in $Services)
		{
			$InfoOnService = Get-CimInstance win32_service | Where-Object Name -eq $Service | Select-Object name, startname, state, Startmode -ErrorAction SilentlyContinue
			
			if ($InfoOnService -ne $null)
			{
				$object = New-Object -TypeName PSObject
				$object | Add-Member -MemberType NoteProperty -Name 'Service' -Value $InfoOnService.name
				$object | Add-Member -MemberType NoteProperty -Name 'Konto' -Value $InfoOnService.Startname
				$object | Add-Member -MemberType NoteProperty -Name 'Status' -Value $InfoOnService.state
				$object | Add-Member -MemberType NoteProperty -Name 'StartMode' -Value $InfoOnService.startmode
				
				$data += $object
			}
			
			else
			{
				$object = New-Object -TypeName PSObject
				$object | Add-Member -MemberType NoteProperty -Name 'Service' -Value $Service
				$object | Add-Member -MemberType NoteProperty -Name 'Konto' -Value "--"
				$object | Add-Member -MemberType NoteProperty -Name 'Status' -Value "Does not exist"
				$object | Add-Member -MemberType NoteProperty -Name 'StartMode' -Value "--"
				
				$data += $object
			}
			
		}
		
		$result = $data | Out-String
		$InventoryTextBox.Clear()
		$InventoryTextBox.AppendText("`n")
		$InventoryTextBox.AppendText("Services Installed:")
		$InventoryTextBox.AppendText("`n")
		$InventoryTextBox.AppendText($result)
		$InventoryTextBox.ScrollToCaret()
		Write-Log -Level INFO -Message "Services Installed:"
		Write-Log -Level INFO -Message $result
		
		###################################
		# INVENTORY OF APPLICATIONS
		###################################	
		
		$data2 = @()
		
		$installed = Get-ItemProperty -Path 'HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall\*',
									  'HKLM:\SOFTWARE\WOW6432Node\Microsoft\Windows\CurrentVersion\Uninstall\*',
									  'HKCU:\SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall\*',
									  'HKCU:\SOFTWARE\WOW6432Node\Microsoft\Windows\CurrentVersion\Uninstall\*' -ErrorAction Ignore | Where-Object publisher -eq 'Visma' | Select-Object -Property DisplayName, DisplayVersion, Publisher | Sort-Object -Property DisplayName
		
		
		if ($installed -ne $null)
		{
			foreach ($inst in $installed)
			{
				
				
				$object = New-Object -TypeName PSObject
				$object | Add-Member -MemberType NoteProperty -Name 'Applikation' -Value $inst.displayname
				$object | Add-Member -MemberType NoteProperty -Name 'Version' -Value $inst.displayversion
				$object | Add-Member -MemberType NoteProperty -Name 'Utgivare' -Value $inst.publisher
				
				$data2 += $object
			}
			
			$result = $data2 | Out-String
			$InventoryTextBox.AppendText("`n")
			$InventoryTextBox.AppendText("Applications installed:")
			$InventoryTextBox.AppendText("`n")
			$InventoryTextBox.AppendText($result)
			$InventoryTextBox.ScrollToCaret()
			Write-Log -Level INFO -Message " Applications Installed:"
			Write-Log -Level INFO -Message $result
			
		}
		
		
		else
		{
			$InventoryTextBox.AppendText("`n")

			$InventoryTextBox.AppendText("NO Applications installed:")
			$InventoryTextBox.AppendText("`n")
			
			Write-Log -Level INFO -Message "No Applications from Visma installed"
			
		}
		
		###################################
		# INVENTORY OF APPLICATIONPOOLS
		###################################	
	
	$ISWebserver = Test-WebServer
	
	
	if ($ISWebServer -eq $true)
	{
		
		$appPools = Get-WebConfiguration -Filter '/system.applicationHost/applicationPools/add'
		$appPoolResultat = [System.Collections.ArrayList]::new()
		
		if ($appPools.count -ge '2')
		{
			foreach ($appPool in $appPools)
			{
				
				[void]$appPoolResultat.add([PSCustomObject]@{
						Name = $appPool.name
						User = $appPool.ProcessModel.UserName
						#Password = $appPool.ProcessModel.Password
					})
				
			}
			
			$result = $appPoolResultat | Out-String
			
			
			$InventoryTextBox.AppendText("`n")
			$InventoryTextBox.AppendText("Applications Pools:")
			$InventoryTextBox.AppendText("`n")
			$InventoryTextBox.AppendText($result)
			$InventoryTextBox.ScrollToCaret()
			Write-Log -Level INFO -Message " Application Pools:"
			Write-Log -Level INFO -Message $result
		}
		
		else
		{
			$InventoryTextBox.AppendText("`n")
			
			$InventoryTextBox.AppendText("No Applications Pools present   ")
			$InventoryTextBox.AppendText("`n")
			
			$InventoryTextBox.ScrollToCaret()
			Write-Log -Level INFO -Message "NO Application Pools"
			
		}
	}
	
	else
	{
		$InventoryTextBox.AppendText("No Webserver, no applicationpools.")
		$InventoryTextBox.AppendText("`n")
		$InventoryTextBox.ScrollToCaret()
		Write-Log -Level INFO -Message "No Webserver, no applicationpools."
		
		
	}
	
	
}

$buttonPassword_Click={
	#TODO: Place custom script here
	$global:SelectedBackupfolder = $global:SelectedBackupfolder

		
		###################################
		# Check backupfolder if encrypted
		###################################	
		
		$AppPaths = (Get-ChildItem -Path "$global:InstallDrive\Visma\Install\Backup\$global:SelectedBackupfolder\wwwroot" -Recurse -Filter web.config).DirectoryName
		
		
		foreach ($AppPath in $AppPaths)
		{
			
			[XML]$CheckElementXML = Get-Content -Path "$global:InstallDrive\Visma\Install\Backup\$global:SelectedBackupfolder\wwwroot\$global:SelectedBigram\PPP\Personec_P_web\Lon\web.config"
			
			
		}
		
		[XML]$CheckElementXML = Get-Content -Path "$global:InstallDrive\Visma\Install\Backup\$global:SelectedBackupfolder\wwwroot\$global:SelectedBigram\PPP\Personec_P_web\Lon\web.config"
		
		if ($CheckElementXML.configuration.appSettings.EncryptedData -ne $null)
		{
			$InventoryTextBox.Clear()
			$InventoryTextBox.AppendText("`n")

			$InventoryTextBox.AppendText("Backupfolder is encrypted!!!")
			$InventoryTextBox.AppendText("`n")
			$InventoryTextBox.ScrollToCaret()
			
		}
		else
		{
			
			$data5 = @()
			
			
			$pstid = Get-IniFile "$global:InstallDrive\Visma\install\backup\$global:SelectedBackupfolder\programs\$global:SelectedBigram\ppp\Personec_p\pstid.ini" -ErrorAction SilentlyContinue
			[xml]$Batch = Get-Content "$global:InstallDrive\Visma\install\backup\$global:SelectedBackupfolder\Programs\$global:SelectedBigram\PPP\Personec_P\batch.config" -ErrorAction SilentlyContinue
			[XML]$PIA = Get-Content "$global:InstallDrive\Visma\install\backup\$global:SelectedBackupfolder\Wwwroot\$global:SelectedBigram\PIA\PUF_IA Module\web.config" -ErrorAction SilentlyContinue
			
			$object = New-Object -TypeName PSObject
			$object | Add-Member -MemberType NoteProperty -Name 'NeptuneUser' -Value $PSTID.styr.NeptuneUser
			$object | Add-Member -MemberType NoteProperty -Name 'NeptunePassword' -Value $PSTID.styr.NeptuneUser
			$object | Add-Member -MemberType NoteProperty -Name 'Batchuser' -Value $Batch.configuration.appsettings.add.where{ $_.key -eq 'sysuser' }.value
			$object | Add-Member -MemberType NoteProperty -Name 'BatchPassword' -Value $Batch.configuration.appsettings.add.where{ $_.key -eq 'SysPassword' }.value
			
			$object | Add-Member -MemberType NoteProperty -Name 'PPP Username' -Value $PIA.configuration.appsettings.add.where{ $_.key -eq 'P.Database.User' }.value
			$object | Add-Member -MemberType NoteProperty -Name 'PPP Password' -Value $PIA.configuration.appsettings.add.where{ $_.key -eq 'P.Database.Password' }.value
			
			$object | Add-Member -MemberType NoteProperty -Name 'PUD Username' -Value $PIA.configuration.appsettings.add.where{ $_.key -eq 'U.Database.User' }.value
			$object | Add-Member -MemberType NoteProperty -Name 'PUD Password' -Value $PIA.configuration.appsettings.add.where{ $_.key -eq 'U.Database.Password' }.value
			
			$object | Add-Member -MemberType NoteProperty -Name 'PFH Username' -Value $PIA.configuration.appsettings.add.where{ $_.key -eq 'F.Database.User' }.value
			$object | Add-Member -MemberType NoteProperty -Name 'PFH Password' -Value $PIA.configuration.appsettings.add.where{ $_.key -eq 'F.Database.Password' }.value
			
			$object | Add-Member -MemberType NoteProperty -Name 'Service Username' -Value $PIA.configuration.appsettings.add.where{ $_.key -eq 'ServiceUser.Login' }.value
			$object | Add-Member -MemberType NoteProperty -Name 'Service Password' -Value $PIA.configuration.appsettings.add.where{ $_.key -eq 'serviceUser.Secret' }.value
			$data5 += $object
			
			$result = $data5 | Out-String
			
			$InventoryTextBox.AppendText("`n")
		$InventoryTextBox.AppendText("Settings from backup:")
		$InventoryTextBox.AppendText("`n")
		$InventoryTextBox.AppendText("$result")
			$InventoryTextBox.ScrollToCaret()
		}
	
}


$buttonSettings_Click={
	#TODO: Place custom script here

	

		###################################
		# Check backupfolder if encrypted
		###################################	
		
		$AppPaths = (Get-ChildItem -Path "$global:InstallDrive\Visma\Install\Backup\$global:SelectedBackupfolder\wwwroot" -Recurse -Filter web.config).DirectoryName
		
		
		foreach ($AppPath in $AppPaths)
		{
			
			[XML]$CheckElementXML = Get-Content -Path "$global:InstallDrive\Visma\Install\Backup\$global:SelectedBackupfolder\wwwroot\$global:SelectedBigram\PPP\Personec_P_web\Lon\web.config"
			
			
		}
		
		[XML]$CheckElementXML = Get-Content -Path "$global:InstallDrive\Visma\Install\Backup\$global:SelectedBackupfolder\wwwroot\$global:SelectedBigram\PPP\Personec_P_web\Lon\web.config"
		
		if ($CheckElementXML.configuration.appSettings.EncryptedData -ne $null)
		{

			$InventoryTextBox.AppendText("`n")
			$InventoryTextBox.AppendText("Backupfolder is encrypted!!!")

			$InventoryTextBox.ScrollToCaret()
			
		}
		else
		{
			
			###################################
			# INVENTORY settings
			###################################	
			$UseSSOBackup = (Test-path -Path "$global:InstallDrive\Visma\install\backup\$global:SelectedBackupfolder\Wwwroot\$global:SelectedBigram\$global:SelectedBigram\Login\Web.config")
			
			if ($UseSSOBackup -eq $true)
			{
				
				[XML]$UseSSO = Get-Content "$global:InstallDrive\Visma\install\backup\$global:SelectedBackupfolder\Wwwroot\$global:SelectedBigram\$global:SelectedBigram\Login\Web.config" -ErrorAction SilentlyContinue
				
				
				$useSSOValue = $usesso.configuration.appsettings.add.where{ $_.key -eq 'UseSSo' }.value
				$SingleSignOnMethodValue = $usesso.configuration.appsettings.add.where{ $_.key -eq 'SingleSignOnMethod' }.value
				$MultitenantModeValue = $usesso.configuration.appsettings.add.where{ $_.key -eq 'MultitenantMode' }.value
				
				
				$data3 += $object
				
				$result = $data3 | Out-String

				$InventoryTextBox.AppendText("`n")
				$InventoryTextBox.AppendText("INVENTORY SETTINGS LOGIN")

				
				$InventoryTextBox.AppendText("`n")
				$InventoryTextBox.AppendText("UseSSO = $useSSOValue ")
				$InventoryTextBox.AppendText("`n")
				$InventoryTextBox.AppendText("SingleSignOnMethod = $SingleSignOnMethodValue")
				$InventoryTextBox.AppendText("`n")
				$InventoryTextBox.AppendText("MultitenantMode = $MultitenantModeValue")
				$InventoryTextBox.ScrollToCaret()

				Write-Log -Level INFO -Message " INVENTORY SETTINGS LOGIN "
				Write-Log -Level INFO -Message " UseSSO   value = $useSSOValue "
				Write-Log -Level INFO -Message " SingleSignOnMethod   value = $SingleSignOnMethodValue "
				Write-Log -Level INFO -Message " MultitenantMode   value = $MultitenantModeValue "

			}
			
			Else
			{
				
				$InventoryTextBox.AppendText("`n")
				$InventoryTextBox.AppendText("Use SSO ")
				$InventoryTextBox.AppendText("`n")
				$InventoryTextBox.AppendText("No web.config present  ")
				$InventoryTextBox.ScrollToCaret()
				Write-Log -Level INFO -Message " INVENTORY SETTINGS ------------"
				Write-Log -Level INFO -Message "No web.config present for login component"
			}
			
			###################################
			# INVENTORY for license.json
			###################################	
			
			$haveLicensJSON = (Test-path -Path "$global:InstallDrive\Visma\install\backup\$global:SelectedBackupfolder\Wwwroot\$global:SelectedBigram\PIP\IntegrationApi\license.json")
			
			if ($haveLicensJSON -eq $true)
			{

				$InventoryTextBox.AppendText("`n")
				$InventoryTextBox.AppendText("INVENTORY SETTINGS API         ")

				$InventoryTextBox.AppendText("`n")
				$InventoryTextBox.AppendText("Integration API ")
				$InventoryTextBox.AppendText("`n")
				$InventoryTextBox.AppendText("license.json exist")
				$InventoryTextBox.ScrollToCaret()

				Write-Log -Level INFO -Message " Integration API   ---------------"
				Write-Log -Level INFO -Message "Settings from backup: license.json exist"

			}
			
			else
			{
				

				$InventoryTextBox.AppendText("`n")
				$InventoryTextBox.AppendText("INVENTORY SETTINGS API         ")

				$InventoryTextBox.AppendText("`n")
				$InventoryTextBox.AppendText("Integration API")
				$InventoryTextBox.AppendText("`n")
				$InventoryTextBox.AppendText("No License.json... ")
				$InventoryTextBox.ScrollToCaret()

				Write-Log -Level INFO -Message " Integration API    ---------------"
				Write-Log -Level INFO -Message "No License.json..."

			}
		}
	
}
]]></Code>
  <TV>0</TV>
  <Mode>1</Mode>
  <Assemblies />
</File>