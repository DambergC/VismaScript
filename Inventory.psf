<File version="3.2">
  <FileID>1675b376-67a2-4c14-9366-a4f84698131d</FileID>
  <Preview>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
+c7/B9PvJYdeJxKOAAAAAElFTkSuQmCC</Preview>
  <Form>rumO1qvO5SYAACODCAAAAAAABADtWV1zoswSvk9V/oPlxbkxtWDEiHWSVDWMrkYx4td7zM1bBAlBEbKAov76
0z2aLyWK2c3WeU8tqSKOMt09T3c/3cNc3t6PLTMKr09PMpnL9SATLZ+sq2x3GUbW9Ntfjjfy4/Bb
1Q+m6/tZJumns8zACkLH966kbyL9nWXUmRvNAuvKs2ZRYLhnmfbs3nXMhrXs+RPLu7ovlYyiWbzI
lwuSJcrlbMYzpqj5AeXVvbnlRX6wzGbMR8cdBfh8VvW9KPDdMMvNRYPbgf9kBdFyMxFmkd81Dddi
ztTyyBh89OIsky9cCs+PHpqq+SMre11FTQfnqK6DNnadFU6QL4pnmULp4uAkAkvxg5EVdKOlS6qc
hTUqsIMT66bvPS8cf1UczwiW1wCgAFSgruIn+g+qX8FPVRtvKt2A33R4/n1zKbBznZ7sfvf564+0
P9L+L6WxCcxj8KFuKrcxqyg9EVZ6X4JmWKnZigeYiff2b7aN6RDF4MFNDLegyqznQzyulEAbWG1g
9UcWw9Kol0GbLds60yImwjIAGbTp3ekJrqJmMpyxCmkV2q3NFFplHP8S2/BqxuoEWEgSz6E5rKEG
1uqhTfUK2hAwtKlZIhzbItq4EshGYSWitFVbfvfNm3FTJgnBhFbZbumqqPRMmNlJ+vfZ9nzVQQmA
UNChAM3JDaLyvctxC1HjPNy24PQkwaZU46VQx1Vb0IpVSe3ZMNePihD0dRjDDBoV9QVHwyYbV6lw
O3p8erK22kakR9FAZwKwPkT6HhtVGbwYLkCrUDyW2TiERaFPNrqfx20zLvPxeD1G3PYhHU3QhrpN
OH1gaQA3dWjbrE2+Pz2JuzwrPJKQ+zncmqcn8gp9o5m0binNDAFzZDGY4FhMiN6mrZrAZBB1QlYP
0ORGPP6cje9xW+bItwORuCI8ZpX4vNWT0TbxbTSwOgQx4egDIl9pUBaF5pHxlvxEMECJ1Q7y2xqn
+fkhie/iDW16LLZj1n2LLI8O4jvFJN8X0uP2gc4c4nIzGyOXLMMiaHBHnlomPL+f3wTKmqqcA03a
4GrCHGABDYnCte5wxpRS4ZY8zhF33EzQxsqwz/MaxzUuMXdsns6fCMfmCm3W0cwbCQgFYv1FBThu
uxyamjFzEnpmlCcuURGV05OFTTmgUTVrSkfnAGd1ZHm7RhLRNkR2FoMIzXqVrPY/nfmByevp9/5q
CJGtFaEpE89fKFxn5VN5Oo8pizokwYYYGn2eVbxWLXkOuGklvok34o4VZhEb9KCN4MbqHJgEqITX
U15fP5GnaOOdhjW+X73V1fImwfB37EtiVv2rR3VETJSYHG85jptOWWTRGJDHPe77OtzqDKqcW3Zx
PZin1HeQBOU7ovCu08HtU14nFDpi+nq6rumOgqvOsfGrROxLzqESQ9kmiXeLDW7sKI5tiGPez3FG
xV7KeV8XdGADnmc1PU2ejik+/zPuQ2j3MQeel25CDW0k3EzOiA3ihig8LqtCGVfZLyDDtqhHOD2Z
7XYJOCOkaKgMxoRb/OGqV7QmJlVor9oCdfa+R2rZqkSV5oetE/KD9FlFXDItYp7aTG1WNCjYEMKN
mdwfkA3A482mnDjf9hzvvuQLwk1zuSfQLO+tBHUItg2cxSkHOozzWao8nc/XPI+1qTMskWcQhyjZ
0BdUzqE6BIHn8Wi+7kNyHOkh4dTCCBUqa5b2oL7bZ1BW8T2OTjky3amv23k6L/JqRxInQxEacpX4
bp+Nb6+1T9c6qRMOiecF2pEYY2TQ2JReI3TbMxr8iBUGLZFw/X7XW+PmJ8U8dTaNeQ9tdGmP4xO/
IfVrMNqzx9nfk2u2+gOQhp90DStyX8Wxt+/5dV0g1l6oGrHP4JU7KIKDDuE4IRz7Q9qHtXQdyxJq
8BI67S/dUeJmbWwrCrSGxARql2L8Tif+CokZ2iv0VKePlchWaN/1W21LuG5ilVE0YM+5wvhjTR1T
rmuD87tx+yPtj7R/iDQBL+xDEi7pAW824B1AoRu06cYEerPyQHRZo+2IIpMYi241ZAxQcO9MhXpI
L5xvASTicxMU2gZg8cPe4sGuxdCWcANbE5QcCowFmwm5h5ihQpluQvvFim3b5KtLYfPKe/N6/ND7
8hbes9fvzhIOzulGRhC1/dCJHHrZruI0K2gbgZXiNKBnLaLs9R5dFfpl83DTN0Zbxv1N310K/Knn
KYcPZJRZFPnelx/J3HM1quuH1r4DmYRzFc989IPsteKjgOlZpuPYj7tYJpytGLPQCgeG64yMtTOq
hhtaKWYyx3B9u2OFuFR0oeGZlptiWtM3N4pKJTrKkfIpJq1j7A04Keasz4tIx/nusVRCWBn3dW9k
LbLXcpqneRD+y5g+/TutPf3QUv3pEy7+3rVofsdCfYHj2dnrXjBLKWLghDPD5UdaimFOVN8lryfO
vxTWYZ0+yDEto1moGMGXx/mLpuOi/DV4UHehKKUOnRd9qQOHHzSenx8VOeXUkfOxPcd7reOYjyRV
8Rdf7rcXFt0oPM59dNqLVOF7oe8aaFb5KQ1FvTo9XyihT3bPfj/y+ra16VkjX0BF5TTx9er9Umrv
/wKn/9Z61DbCMPaD0WeTNY9uK4lH8vyz0tROy4vnSAqp2PvFZ8XjuP4Im47j6q22RUXfTLaB+Jt/
u9W5/G8HTteKIixw4c8ETj6fnubfa/3SyEnFDa+Rc4RNvy5ynpX+EyOHK/mZuDmiTrxV+aVBk6oR
XTcIPGrSWvQLQ4arPBgwbwbPH8Pr/wKFCJXd5SYAAA==</Form>
  <Code><![CDATA[#requires -version 5.1

$formInventory_Load = {
	If ($global:SelectedBigram -eq 'Select Bigram' -or $global:SelectedBackupfolder -eq 'Select Folder')
	{
		$InventoryTextBox.AppendText("`n")
		$InventoryTextBox.AppendText("You Need to select BIGRAM and BackupFolder")
		$InventoryTextBox.ScrollToCaret()
		$formInventory.Close()
	}
	
	#TODO: Initialize Form Controls here
	Refresh-StatusBar
	
	$DisplayMode = Get-RegValue -RegPath 'HKLM:\SOFTWARE\Wow6432Node\Visma\TeliaCygate' -RegName DisplayModeScript
	
	if ($DisplayMode -eq 'Light')
	{
		Set-ControlTheme -Control $formInventory -Theme Light
	}
	
	elseif ($DisplayMode -eq 'Dark')
	{
		Set-ControlTheme -Control $formInventory -Theme Dark
	}
	
	if ($global:SelectedBackupfolder -eq 'Select Folder' -or $global:SelectedBigram -eq 'Select Bigram')
	{
		$buttonSystem.Enabled = $false
		$buttonSettings.Enabled = $false
		$buttonPassword.Enabled = $false
	}
	
	else
	{
		$buttonSystem.Enabled = $true
		$buttonSettings.Enabled = $true
		$buttonPassword.Enabled = $true
	}
	
	#Requires -Version 5.1
}

$buttonSystem_Click={
	#TODO: Place custom script here
	
	$InventoryTextBox.DetectUrls = $true
	
	$InventoryTextBox.add_LinkClicked({
			param ($sender,
				$e)
			Start-Process $e.LinkText
		})
	
	$services = "PBSScheduler_$global:SelectedBigram", "Scheduler", "Ciceron Server Manager", "NeptuneMB_$global:SelectedBigram", "PersonecPBatchManager$global:SelectedBigram", "PersonecPUtdataExportImportService$global:SelectedBigram", "RSPFlexService$global:SelectedBigram", "Visma.P-Background-Service - $global:SelectedBigram", "Visma.PersonecP.PufIa.WinSvc - $global:SelectedBigram"

		
		###################################
		# INVENTORY OF SERVICES
		###################################
		
		$data = @()
		
		foreach ($Service in $Services)
		{
			$InfoOnService = Get-CimInstance win32_service | Where-Object Name -eq $Service | Select-Object name, startname, state, Startmode -ErrorAction SilentlyContinue
			
			if ($InfoOnService -ne $null)
			{
				$object = New-Object -TypeName PSObject
				$object | Add-Member -MemberType NoteProperty -Name 'Service' -Value $InfoOnService.name
				$object | Add-Member -MemberType NoteProperty -Name 'Konto' -Value $InfoOnService.Startname
				$object | Add-Member -MemberType NoteProperty -Name 'Status' -Value $InfoOnService.state
				$object | Add-Member -MemberType NoteProperty -Name 'StartMode' -Value $InfoOnService.startmode
				
				$data += $object
			}
			
			else
			{
				$object = New-Object -TypeName PSObject
				$object | Add-Member -MemberType NoteProperty -Name 'Service' -Value $Service
				$object | Add-Member -MemberType NoteProperty -Name 'Konto' -Value "--"
				$object | Add-Member -MemberType NoteProperty -Name 'Status' -Value "Does not exist"
				$object | Add-Member -MemberType NoteProperty -Name 'StartMode' -Value "--"
				
				$data += $object
			}
			
		}
		
		$result = $data | Out-String
		$InventoryTextBox.Clear()
		$InventoryTextBox.AppendText("`n")
		$InventoryTextBox.AppendText("Services Installed:")
		$InventoryTextBox.AppendText("`n")
		$InventoryTextBox.AppendText($result)
		$InventoryTextBox.ScrollToCaret()
		Write-Log -Level INFO -Message "Services Installed:"
		Write-Log -Level INFO -Message $result
		
		###################################
		# INVENTORY OF APPLICATIONS
		###################################	
		
		$data2 = @()
		
		$installed = Get-ItemProperty -Path 'HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall\*',
									  'HKLM:\SOFTWARE\WOW6432Node\Microsoft\Windows\CurrentVersion\Uninstall\*',
									  'HKCU:\SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall\*',
									  'HKCU:\SOFTWARE\WOW6432Node\Microsoft\Windows\CurrentVersion\Uninstall\*' -ErrorAction Ignore | Where-Object publisher -eq 'Visma' | Select-Object -Property DisplayName, DisplayVersion, Publisher | Sort-Object -Property DisplayName
		
		
		if ($installed -ne $null)
		{
			foreach ($inst in $installed)
			{
				
				
				$object = New-Object -TypeName PSObject
				$object | Add-Member -MemberType NoteProperty -Name 'Applikation' -Value $inst.displayname
				$object | Add-Member -MemberType NoteProperty -Name 'Version' -Value $inst.displayversion
				$object | Add-Member -MemberType NoteProperty -Name 'Utgivare' -Value $inst.publisher
				
				$data2 += $object
			}
			
			$result = $data2 | Out-String
			$InventoryTextBox.AppendText("`n")
			$InventoryTextBox.AppendText("Applications installed:")
			$InventoryTextBox.AppendText("`n")
			$InventoryTextBox.AppendText($result)
			$InventoryTextBox.ScrollToCaret()
			Write-Log -Level INFO -Message " Applications Installed:"
			Write-Log -Level INFO -Message $result
			
		}
		
		
		else
		{
			$InventoryTextBox.AppendText("`n")

			$InventoryTextBox.AppendText("NO Applications installed:")
			$InventoryTextBox.AppendText("`n")
			
			Write-Log -Level INFO -Message "No Applications from Visma installed"
			
		}
		
		###################################
		# INVENTORY OF APPLICATIONPOOLS
		###################################	
	
	$ISWebserver = Test-WebServer
	
	
	if ($ISWebServer -eq $true)
	{
		
		$appPools = Get-WebConfiguration -Filter '/system.applicationHost/applicationPools/add'
		$appPoolResultat = [System.Collections.ArrayList]::new()
		
		if ($appPools.count -ge '2')
		{
			foreach ($appPool in $appPools)
			{
				
				[void]$appPoolResultat.add([PSCustomObject]@{
						Name = $appPool.name
						User = $appPool.ProcessModel.UserName
						#Password = $appPool.ProcessModel.Password
					})
				
			}
			
			$result = $appPoolResultat | Out-String
			
			
			$InventoryTextBox.AppendText("`n")
			$InventoryTextBox.AppendText("Applications Pools:")
			$InventoryTextBox.AppendText("`n")
			$InventoryTextBox.AppendText($result)
			$InventoryTextBox.ScrollToCaret()
			Write-Log -Level INFO -Message " Application Pools:"
			Write-Log -Level INFO -Message $result
		}
		
		else
		{
			$InventoryTextBox.AppendText("`n")
			
			$InventoryTextBox.AppendText("No Applications Pools present   ")
			$InventoryTextBox.AppendText("`n")
			
			$InventoryTextBox.ScrollToCaret()
			Write-Log -Level INFO -Message "NO Application Pools"
			
		}
		
		$CertAndBindings = Get-IISBindingsWithCerts
		
		$InventoryTextBox.DetectUrls = $true
		
		$InventoryTextBox.add_LinkClicked({
				param ($sender,
					$e)
				Start-Process $e.LinkText
			})
		
		
		$resultCertAndBindings = $CertAndBindings | Out-String
		
		$InventoryTextBox.AppendText("Cert and Bindings:`n")
		$InventoryTextBox.AppendText($resultCertAndBindings)
		$InventoryTextBox.ScrollToCaret()
		Write-Log -Level INFO -Message " Cert and Bindings:"
		Write-Log -Level INFO -Message $resultCertAndBindings
		
	}
	
	else
	{
		$InventoryTextBox.AppendText("No Webserver, no applicationpools.")
		$InventoryTextBox.AppendText("`n")
		$InventoryTextBox.ScrollToCaret()
		Write-Log -Level INFO -Message "No Webserver, no applicationpools."
		
		
	}
	
	
}

$buttonPassword_Click={
	#TODO: Place custom script here
	$global:SelectedBackupfolder = $global:SelectedBackupfolder

		
		###################################
		# Check backupfolder if encrypted
		###################################	
		
		$AppPaths = (Get-ChildItem -Path "$global:InstallDrive\Visma\Install\Backup\$global:SelectedBackupfolder\wwwroot" -Recurse -Filter web.config).DirectoryName
		
		
		foreach ($AppPath in $AppPaths)
		{
			
			[XML]$CheckElementXML = Get-Content -Path "$global:InstallDrive\Visma\Install\Backup\$global:SelectedBackupfolder\wwwroot\$global:SelectedBigram\PPP\Personec_P_web\Lon\web.config"
			
			
		}
		
		[XML]$CheckElementXML = Get-Content -Path "$global:InstallDrive\Visma\Install\Backup\$global:SelectedBackupfolder\wwwroot\$global:SelectedBigram\PPP\Personec_P_web\Lon\web.config"
		
		if ($CheckElementXML.configuration.appSettings.EncryptedData -ne $null)
		{
			$InventoryTextBox.Clear()
			$InventoryTextBox.AppendText("`n")

			$InventoryTextBox.AppendText("Backupfolder is encrypted!!!")
			$InventoryTextBox.AppendText("`n")
			$InventoryTextBox.ScrollToCaret()
			
		}
		else
		{
			
			$data5 = @()
			
			
			$pstid = Get-IniFile "$global:InstallDrive\Visma\install\backup\$global:SelectedBackupfolder\programs\$global:SelectedBigram\ppp\Personec_p\pstid.ini" -ErrorAction SilentlyContinue
			[xml]$Batch = Get-Content "$global:InstallDrive\Visma\install\backup\$global:SelectedBackupfolder\Programs\$global:SelectedBigram\PPP\Personec_P\batch.config" -ErrorAction SilentlyContinue
			[XML]$PIA = Get-Content "$global:InstallDrive\Visma\install\backup\$global:SelectedBackupfolder\Wwwroot\$global:SelectedBigram\PIA\PUF_IA Module\web.config" -ErrorAction SilentlyContinue
			
			$object = New-Object -TypeName PSObject
			$object | Add-Member -MemberType NoteProperty -Name 'NeptuneUser' -Value $PSTID.styr.NeptuneUser
			$object | Add-Member -MemberType NoteProperty -Name 'NeptunePassword' -Value $PSTID.styr.NeptuneUser
			$object | Add-Member -MemberType NoteProperty -Name 'Batchuser' -Value $Batch.configuration.appsettings.add.where{ $_.key -eq 'sysuser' }.value
			$object | Add-Member -MemberType NoteProperty -Name 'BatchPassword' -Value $Batch.configuration.appsettings.add.where{ $_.key -eq 'SysPassword' }.value
			
			$object | Add-Member -MemberType NoteProperty -Name 'PPP Username' -Value $PIA.configuration.appsettings.add.where{ $_.key -eq 'P.Database.User' }.value
			$object | Add-Member -MemberType NoteProperty -Name 'PPP Password' -Value $PIA.configuration.appsettings.add.where{ $_.key -eq 'P.Database.Password' }.value
			
			$object | Add-Member -MemberType NoteProperty -Name 'PUD Username' -Value $PIA.configuration.appsettings.add.where{ $_.key -eq 'U.Database.User' }.value
			$object | Add-Member -MemberType NoteProperty -Name 'PUD Password' -Value $PIA.configuration.appsettings.add.where{ $_.key -eq 'U.Database.Password' }.value
			
			$object | Add-Member -MemberType NoteProperty -Name 'PFH Username' -Value $PIA.configuration.appsettings.add.where{ $_.key -eq 'F.Database.User' }.value
			$object | Add-Member -MemberType NoteProperty -Name 'PFH Password' -Value $PIA.configuration.appsettings.add.where{ $_.key -eq 'F.Database.Password' }.value
			
			$object | Add-Member -MemberType NoteProperty -Name 'Service Username' -Value $PIA.configuration.appsettings.add.where{ $_.key -eq 'ServiceUser.Login' }.value
			$object | Add-Member -MemberType NoteProperty -Name 'Service Password' -Value $PIA.configuration.appsettings.add.where{ $_.key -eq 'serviceUser.Secret' }.value
			$data5 += $object
			
			$result = $data5 | Out-String
			
			$InventoryTextBox.AppendText("`n")
		$InventoryTextBox.AppendText("Settings from backup:")
		$InventoryTextBox.AppendText("`n")
		$InventoryTextBox.AppendText("$result")
			$InventoryTextBox.ScrollToCaret()
		}
	
}


$buttonSettings_Click={
	#TODO: Place custom script here

	

		###################################
		# Check backupfolder if encrypted
		###################################	
	
	 if (Test-Path "$global:InstallDrive\Visma\Install\Backup\$global:SelectedBackupfolder\wwwroot")
	{
		
		
		$AppPaths = (Get-ChildItem -Path "$global:InstallDrive\Visma\Install\Backup\$global:SelectedBackupfolder\wwwroot" -Recurse -Filter web.config).DirectoryName
		
		
		foreach ($AppPath in $AppPaths)
		{
			
			[XML]$CheckElementXML = Get-Content -Path "$global:InstallDrive\Visma\Install\Backup\$global:SelectedBackupfolder\wwwroot\$global:SelectedBigram\PPP\Personec_P_web\Lon\web.config"
			
			
		}
		
		[XML]$CheckElementXML = Get-Content -Path "$global:InstallDrive\Visma\Install\Backup\$global:SelectedBackupfolder\wwwroot\$global:SelectedBigram\PPP\Personec_P_web\Lon\web.config"
		
		if ($CheckElementXML.configuration.appSettings.EncryptedData -ne $null)
		{
			
			$InventoryTextBox.AppendText("`n")
			$InventoryTextBox.AppendText("Backupfolder is encrypted!!!")
			
			$InventoryTextBox.ScrollToCaret()
			
		}
		else
		{
			
			###################################
			# INVENTORY settings
			###################################	
			$UseSSOBackup = (Test-path -Path "$global:InstallDrive\Visma\install\backup\$global:SelectedBackupfolder\Wwwroot\$global:SelectedBigram\$global:SelectedBigram\Login\Web.config")
			
			if ($UseSSOBackup -eq $true)
			{
				
				[XML]$UseSSO = Get-Content "$global:InstallDrive\Visma\install\backup\$global:SelectedBackupfolder\Wwwroot\$global:SelectedBigram\$global:SelectedBigram\Login\Web.config" -ErrorAction SilentlyContinue
				
				
				$useSSOValue = $usesso.configuration.appsettings.add.where{ $_.key -eq 'UseSSo' }.value
				$SingleSignOnMethodValue = $usesso.configuration.appsettings.add.where{ $_.key -eq 'SingleSignOnMethod' }.value
				$MultitenantModeValue = $usesso.configuration.appsettings.add.where{ $_.key -eq 'MultitenantMode' }.value
				
				
				$data3 += $object
				
				$result = $data3 | Out-String
				
				$InventoryTextBox.AppendText("`n")
				$InventoryTextBox.AppendText("INVENTORY SETTINGS LOGIN")
				
				
				$InventoryTextBox.AppendText("`n")
				$InventoryTextBox.AppendText("UseSSO = $useSSOValue ")
				$InventoryTextBox.AppendText("`n")
				$InventoryTextBox.AppendText("SingleSignOnMethod = $SingleSignOnMethodValue")
				$InventoryTextBox.AppendText("`n")
				$InventoryTextBox.AppendText("MultitenantMode = $MultitenantModeValue")
				$InventoryTextBox.ScrollToCaret()
				
				Write-Log -Level INFO -Message " INVENTORY SETTINGS LOGIN "
				Write-Log -Level INFO -Message " UseSSO   value = $useSSOValue "
				Write-Log -Level INFO -Message " SingleSignOnMethod   value = $SingleSignOnMethodValue "
				Write-Log -Level INFO -Message " MultitenantMode   value = $MultitenantModeValue "
				
			}
			
			Else
			{
				
				$InventoryTextBox.AppendText("`n")
				$InventoryTextBox.AppendText("Use SSO ")
				$InventoryTextBox.AppendText("`n")
				$InventoryTextBox.AppendText("No web.config present  ")
				$InventoryTextBox.ScrollToCaret()
				Write-Log -Level INFO -Message " INVENTORY SETTINGS ------------"
				Write-Log -Level INFO -Message "No web.config present for login component"
			}
			
			###################################
			# INVENTORY for license.lic
			###################################	
			
			$haveLicensJSON = (Test-path -Path "$global:InstallDrive\Visma\install\backup\$global:SelectedBackupfolder\Wwwroot\$global:SelectedBigram\PIP\IntegrationApi\license.lic")
			
			if ($haveLicensJSON -eq $true)
			{
				
				$InventoryTextBox.AppendText("`n")
				$InventoryTextBox.AppendText("INVENTORY SETTINGS API         ")
				
				$InventoryTextBox.AppendText("`n")
				$InventoryTextBox.AppendText("Integration API ")
				$InventoryTextBox.AppendText("`n")
				$InventoryTextBox.AppendText("license.lic exist")
				$InventoryTextBox.ScrollToCaret()
				
				Write-Log -Level INFO -Message " Integration API   ---------------"
				Write-Log -Level INFO -Message "Settings from backup: license.lic exist"
				
			}
			
			else
			{
				
				
				$InventoryTextBox.AppendText("`n")
				$InventoryTextBox.AppendText("INVENTORY SETTINGS API         ")
				
				$InventoryTextBox.AppendText("`n")
				$InventoryTextBox.AppendText("Integration API")
				$InventoryTextBox.AppendText("`n")
				$InventoryTextBox.AppendText("No License.lic... ")
				$InventoryTextBox.ScrollToCaret()
				
				Write-Log -Level INFO -Message " Integration API    ---------------"
				Write-Log -Level INFO -Message "No License.lic..."
				
			}
		}
		
	}
	
	else
	{
		Write-Host "No www-backup"
		Write-Log -Level INFO -Message "No backup of WWW in $SelectedBackupfolder"
		$InventoryTextBox.AppendText("`n")
		$InventoryTextBox.AppendText("Found no www-folder in $SelectedBackupfolder")
	}
	
	
	
}
]]></Code>
  <TV>0</TV>
  <Mode>1</Mode>
  <Assemblies />
</File>