<File version="3.2">
  <FileID>1675b376-67a2-4c14-9366-a4f84698131d</FileID>
  <Preview>iVBORw0KGgoAAAANSUhEUgAAAgAAAAIACAYAAAD0eNT6AAAAAXNSR0IArs4c6QAAAARnQU1BAACx
jwv8YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAACemSURBVHhe7d1nbJx3gt/xzd27ILggL3MB8uYQ
3JvkENwhmyDIuyCHw2Yv2L299TZ712u5ybJW9rnKEtV7r7aaJatRoihZVCNFsUgswzZsYifFMpw+
7BIpUsW7v/z/D0lbtrlrUn6s0UN+P8AXLFM4I714fjMckt8DAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD4U/b9+Z//ue/73/9v
vg8+WOpLSVnhW7p0GREREXmkFStW+V58cZ7vL/7i3/jMcd32zf7sz/6s9hc//4XOXc5V7a2YmoMD
agz0ExERkUdqDg7K39CpzVt36D/85b/XxCH+T/u7v/tb37lLOarq6NP16g7lV90iIiIiD5VnKqwL
6mZ7XAt/98b0BoB92r+uI6EbtZ0qqOkgIiIiD3bDVNXeq4tXcqY3AFasWOlrj95xLlhoRgAREdFs
qbguIF9997eq6GaXc1327VSnz6Qic3uc22auq7j+2902e3l7PZP3tcBU09mnjMvZ0xsAy5at8N2K
3DZXEnD+oYiIiDyfOabZg2RuRasuF9TpSmH9jLts3xbVOwfXkoag8yj7888/RvZ25PvbzHWZg7e5
jVm+RnNdj3nbzHVllzab+/jFfbbj4mZXvzIuXZ3+ALDPABTVTb0wfOYKfa1R+ZrDU59ORET0lFXa
GFJ2SZNSM4p0LqtcZx+nq+VKv1KqtCtl5uDfqdOXSnQ2s/RL57HXfe5qxRQ9cj2PnNfenvzKW8rI
rTbX5/va+ezHk5f/0nU/ch7nfKZTF4t1Ib9GZU0h5z4Xm+oCAzMYACkrfB2xYXPBoLNwnOz7t2Iq
6UioxFxxyYUSlZgVVdLVO/5580U+P6+tMaxSe75HP0dERJSkKswD13PXqnT5eo3K7QGyrmvGFZsq
moI6daFYmcWNOn3RJ39LePzZhYnTS83XulHdrtyKli9VfLPLOVba80xen71sxjW/LplH76culaq4
psMcuL+4Lnt++22GnPIW87luc7vDznXdqGp3vs74ddnzB8x97Fa+Oe3kBZ8qWiLOffaZ6rsHZz4A
fA0hZzE5mQN/2e7zKjueq9KBUZVuPaOKv/y/Kn9po0pLW1Ta3ff5ecvMDfTdbFdBdYcZAWYITF7H
DCtrjjorZqrTiIiIZpK/LabzuTXKvHHTeYbb/pTbTMs3B157oE27XKqrvialXykz1x00nx8/3V7v
2ewybd7xsfYdPKVDR8/q0Cfp2rPvuLZ9eEI55oHzjZrOz6/PZ67rYm6VrhQ2KD2zXIVmOORXmszX
uWFOv1rSpB0fndDe/Se0ZY+5jn1p5v2T2vnhMaVl+pxv1dvz2stcN7ch3wyF05fL5Ddjx97nElND
cMgMgGm+BiAlZZmvMzFiDr4RlTebzD9aWUtUFX/3oir/9f9U+c5PVRYeUsX3X1HV9/6T/P/xJyo/
V6zyYL+zTvxtcRX4ynUxp0oVHf2qvJVw8rfGTHHnOivMW3+L+bht4jRz/ePv94zXFtS1G+Yfoz7i
XG788wln1djLOtdpzl9hb5+9HnMe57YSERFNUVV7Qhfya5VlHm2Xmge4RbVdToU15pG2+Xj8Qecj
mY/t+ezpj563whxU7YE/2zz4PWsO2hXmuFdYEzCnB5zj00dHL8jvr9bIyIjab3WoqzOgP/zh9/rk
2Fll5FWbR/j2a4+f3x4zL5nPZRU36uxVv4pr7av37U/g2RcYBswj/1at3bxPneY6qqrrlHr6gu6N
jWn33k90+orPud32vIX2/Ob23fC36Yy5TVXmGGnvc5mpKXxnZgMg0HN3/MDrHHzNwTo0IP+Pl6ry
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</Preview>
  <Form>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
xvmSFswvzBbu8mCuvGk8fwyu/wum+cSX1iYAAA==</Form>
  <Code><![CDATA[#requires -version 5.1

$formInventory_Load = {
	If ($global:SelectedBigram -eq 'Select Bigram' -or $global:SelectedBackupfolder -eq 'Select Folder')
	{
		$InventoryTextBox.AppendText("`n")
		$InventoryTextBox.AppendText("You Need to select BIGRAM and BackupFolder")
		$InventoryTextBox.ScrollToCaret()
		$formInventory.Close()
	}
	
	#TODO: Initialize Form Controls here
	Refresh-StatusBar
	
	if ($global:SelectedBackupfolder -eq 'Select Folder' -or $global:SelectedBigram -eq 'Select Bigram')
	{
		$buttonSystem.Enabled = $false
		$buttonSettings.Enabled = $false
		$buttonPassword.Enabled = $false
	}
	
	else
	{
		$buttonSystem.Enabled = $true
		$buttonSettings.Enabled = $true
		$buttonPassword.Enabled = $true
	}
	
	#Requires -Version 5.1
}

$buttonSystem_Click={
	#TODO: Place custom script here
	
	$services = "PBSScheduler_$global:SelectedBigram", "Scheduler", "Ciceron Server Manager", "NeptuneMB_$global:SelectedBigram", "PersonecPBatchManager$global:SelectedBigram", "PersonecPUtdataExportImportService$global:SelectedBigram", "RSPFlexService$global:SelectedBigram", "Visma.P-Background-Service - $global:SelectedBigram", "Visma.PersonecP.PufIa.WinSvc - $global:SelectedBigram"

		
		###################################
		# INVENTORY OF SERVICES
		###################################
		
		$data = @()
		
		foreach ($Service in $Services)
		{
			$InfoOnService = Get-CimInstance win32_service | Where-Object Name -eq $Service | Select-Object name, startname, state, Startmode -ErrorAction SilentlyContinue
			
			if ($InfoOnService -ne $null)
			{
				$object = New-Object -TypeName PSObject
				$object | Add-Member -MemberType NoteProperty -Name 'Service' -Value $InfoOnService.name
				$object | Add-Member -MemberType NoteProperty -Name 'Konto' -Value $InfoOnService.Startname
				$object | Add-Member -MemberType NoteProperty -Name 'Status' -Value $InfoOnService.state
				$object | Add-Member -MemberType NoteProperty -Name 'StartMode' -Value $InfoOnService.startmode
				
				$data += $object
			}
			
			else
			{
				$object = New-Object -TypeName PSObject
				$object | Add-Member -MemberType NoteProperty -Name 'Service' -Value $Service
				$object | Add-Member -MemberType NoteProperty -Name 'Konto' -Value "--"
				$object | Add-Member -MemberType NoteProperty -Name 'Status' -Value "Does not exist"
				$object | Add-Member -MemberType NoteProperty -Name 'StartMode' -Value "--"
				
				$data += $object
			}
			
		}
		
		$result = $data | Out-String
		$InventoryTextBox.Clear()
		$InventoryTextBox.AppendText("`n")
		$InventoryTextBox.AppendText("Services Installed:")
		$InventoryTextBox.AppendText("`n")
		$InventoryTextBox.AppendText($result)
		$InventoryTextBox.ScrollToCaret()
		Write-Log -Level INFO -Message "Services Installed:"
		Write-Log -Level INFO -Message $result
		
		###################################
		# INVENTORY OF APPLICATIONS
		###################################	
		
		$data2 = @()
		
		$installed = Get-ItemProperty -Path 'HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall\*',
									  'HKLM:\SOFTWARE\WOW6432Node\Microsoft\Windows\CurrentVersion\Uninstall\*',
									  'HKCU:\SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall\*',
									  'HKCU:\SOFTWARE\WOW6432Node\Microsoft\Windows\CurrentVersion\Uninstall\*' -ErrorAction Ignore | Where-Object publisher -eq 'Visma' | Select-Object -Property DisplayName, DisplayVersion, Publisher | Sort-Object -Property DisplayName
		
		
		if ($installed -ne $null)
		{
			foreach ($inst in $installed)
			{
				
				
				$object = New-Object -TypeName PSObject
				$object | Add-Member -MemberType NoteProperty -Name 'Applikation' -Value $inst.displayname
				$object | Add-Member -MemberType NoteProperty -Name 'Version' -Value $inst.displayversion
				$object | Add-Member -MemberType NoteProperty -Name 'Utgivare' -Value $inst.publisher
				
				$data2 += $object
			}
			
			$result = $data2 | Out-String
			$InventoryTextBox.AppendText("`n")
			$InventoryTextBox.AppendText("Applications installed:")
			$InventoryTextBox.AppendText("`n")
			$InventoryTextBox.AppendText($result)
			$InventoryTextBox.ScrollToCaret()
			Write-Log -Level INFO -Message " Applications Installed:"
			Write-Log -Level INFO -Message $result
			
		}
		
		
		else
		{
			$InventoryTextBox.AppendText("`n")

			$InventoryTextBox.AppendText("NO Applications installed:")
			$InventoryTextBox.AppendText("`n")
			
			Write-Log -Level INFO -Message "No Applications from Visma installed"
			
		}
		
		###################################
		# INVENTORY OF APPLICATIONPOOLS
		###################################	
	
	$ISWebserver = Test-WebServer
	
	
	if ($ISWebServer -eq $true)
	{
		
		$appPools = Get-WebConfiguration -Filter '/system.applicationHost/applicationPools/add'
		$appPoolResultat = [System.Collections.ArrayList]::new()
		
		if ($appPools.count -ge '2')
		{
			foreach ($appPool in $appPools)
			{
				
				[void]$appPoolResultat.add([PSCustomObject]@{
						Name = $appPool.name
						User = $appPool.ProcessModel.UserName
						#Password = $appPool.ProcessModel.Password
					})
				
			}
			
			$result = $appPoolResultat | Out-String
			
			
			$InventoryTextBox.AppendText("`n")
			$InventoryTextBox.AppendText("Applications Pools:")
			$InventoryTextBox.AppendText("`n")
			$InventoryTextBox.AppendText($result)
			$InventoryTextBox.ScrollToCaret()
			Write-Log -Level INFO -Message " Application Pools:"
			Write-Log -Level INFO -Message $result
		}
		
		else
		{
			$InventoryTextBox.AppendText("`n")
			
			$InventoryTextBox.AppendText("No Applications Pools present   ")
			$InventoryTextBox.AppendText("`n")
			
			$InventoryTextBox.ScrollToCaret()
			Write-Log -Level INFO -Message "NO Application Pools"
			
		}
	}
	
	else
	{
		$InventoryTextBox.AppendText("No Webserver, no applicationpools.")
		$InventoryTextBox.AppendText("`n")
		$InventoryTextBox.ScrollToCaret()
		Write-Log -Level INFO -Message "No Webserver, no applicationpools."
		
		
	}
	
	
}

$buttonPassword_Click={
	#TODO: Place custom script here
	$global:SelectedBackupfolder = $global:SelectedBackupfolder

		
		###################################
		# Check backupfolder if encrypted
		###################################	
		
		$AppPaths = (Get-ChildItem -Path "$global:InstallDrive\Visma\Install\Backup\$global:SelectedBackupfolder\wwwroot" -Recurse -Filter web.config).DirectoryName
		
		
		foreach ($AppPath in $AppPaths)
		{
			
			[XML]$CheckElementXML = Get-Content -Path "$global:InstallDrive\Visma\Install\Backup\$global:SelectedBackupfolder\wwwroot\$global:SelectedBigram\PPP\Personec_P_web\Lon\web.config"
			
			
		}
		
		[XML]$CheckElementXML = Get-Content -Path "$global:InstallDrive\Visma\Install\Backup\$global:SelectedBackupfolder\wwwroot\$global:SelectedBigram\PPP\Personec_P_web\Lon\web.config"
		
		if ($CheckElementXML.configuration.appSettings.EncryptedData -ne $null)
		{
			$InventoryTextBox.Clear()
			$InventoryTextBox.AppendText("`n")

			$InventoryTextBox.AppendText("Backupfolder is encrypted!!!")
			$InventoryTextBox.AppendText("`n")
			$InventoryTextBox.ScrollToCaret()
			
		}
		else
		{
			
			$data5 = @()
			
			
			$pstid = Get-IniFile "$global:InstallDrive\Visma\install\backup\$global:SelectedBackupfolder\programs\$global:SelectedBigram\ppp\Personec_p\pstid.ini" -ErrorAction SilentlyContinue
			[xml]$Batch = Get-Content "$global:InstallDrive\Visma\install\backup\$global:SelectedBackupfolder\Programs\$global:SelectedBigram\PPP\Personec_P\batch.config" -ErrorAction SilentlyContinue
			[XML]$PIA = Get-Content "$global:InstallDrive\Visma\install\backup\$global:SelectedBackupfolder\Wwwroot\$global:SelectedBigram\PIA\PUF_IA Module\web.config" -ErrorAction SilentlyContinue
			
			$object = New-Object -TypeName PSObject
			$object | Add-Member -MemberType NoteProperty -Name 'NeptuneUser' -Value $PSTID.styr.NeptuneUser
			$object | Add-Member -MemberType NoteProperty -Name 'NeptunePassword' -Value $PSTID.styr.NeptuneUser
			$object | Add-Member -MemberType NoteProperty -Name 'Batchuser' -Value $Batch.configuration.appsettings.add.where{ $_.key -eq 'sysuser' }.value
			$object | Add-Member -MemberType NoteProperty -Name 'BatchPassword' -Value $Batch.configuration.appsettings.add.where{ $_.key -eq 'SysPassword' }.value
			
			$object | Add-Member -MemberType NoteProperty -Name 'PPP Username' -Value $PIA.configuration.appsettings.add.where{ $_.key -eq 'P.Database.User' }.value
			$object | Add-Member -MemberType NoteProperty -Name 'PPP Password' -Value $PIA.configuration.appsettings.add.where{ $_.key -eq 'P.Database.Password' }.value
			
			$object | Add-Member -MemberType NoteProperty -Name 'PUD Username' -Value $PIA.configuration.appsettings.add.where{ $_.key -eq 'U.Database.User' }.value
			$object | Add-Member -MemberType NoteProperty -Name 'PUD Password' -Value $PIA.configuration.appsettings.add.where{ $_.key -eq 'U.Database.Password' }.value
			
			$object | Add-Member -MemberType NoteProperty -Name 'PFH Username' -Value $PIA.configuration.appsettings.add.where{ $_.key -eq 'F.Database.User' }.value
			$object | Add-Member -MemberType NoteProperty -Name 'PFH Password' -Value $PIA.configuration.appsettings.add.where{ $_.key -eq 'F.Database.Password' }.value
			
			$object | Add-Member -MemberType NoteProperty -Name 'Service Username' -Value $PIA.configuration.appsettings.add.where{ $_.key -eq 'ServiceUser.Login' }.value
			$object | Add-Member -MemberType NoteProperty -Name 'Service Password' -Value $PIA.configuration.appsettings.add.where{ $_.key -eq 'serviceUser.Secret' }.value
			$data5 += $object
			
			$result = $data5 | Out-String
			
			$InventoryTextBox.AppendText("`n")
		$InventoryTextBox.AppendText("Settings from backup:")
		$InventoryTextBox.AppendText("`n")
		$InventoryTextBox.AppendText("$result")
			$InventoryTextBox.ScrollToCaret()
		}
	
}


$buttonSettings_Click={
	#TODO: Place custom script here

	

		###################################
		# Check backupfolder if encrypted
		###################################	
	
	 if (Test-Path "$global:InstallDrive\Visma\Install\Backup\$global:SelectedBackupfolder\wwwroot")
	{
		
		
		$AppPaths = (Get-ChildItem -Path "$global:InstallDrive\Visma\Install\Backup\$global:SelectedBackupfolder\wwwroot" -Recurse -Filter web.config).DirectoryName
		
		
		foreach ($AppPath in $AppPaths)
		{
			
			[XML]$CheckElementXML = Get-Content -Path "$global:InstallDrive\Visma\Install\Backup\$global:SelectedBackupfolder\wwwroot\$global:SelectedBigram\PPP\Personec_P_web\Lon\web.config"
			
			
		}
		
		[XML]$CheckElementXML = Get-Content -Path "$global:InstallDrive\Visma\Install\Backup\$global:SelectedBackupfolder\wwwroot\$global:SelectedBigram\PPP\Personec_P_web\Lon\web.config"
		
		if ($CheckElementXML.configuration.appSettings.EncryptedData -ne $null)
		{
			
			$InventoryTextBox.AppendText("`n")
			$InventoryTextBox.AppendText("Backupfolder is encrypted!!!")
			
			$InventoryTextBox.ScrollToCaret()
			
		}
		else
		{
			
			###################################
			# INVENTORY settings
			###################################	
			$UseSSOBackup = (Test-path -Path "$global:InstallDrive\Visma\install\backup\$global:SelectedBackupfolder\Wwwroot\$global:SelectedBigram\$global:SelectedBigram\Login\Web.config")
			
			if ($UseSSOBackup -eq $true)
			{
				
				[XML]$UseSSO = Get-Content "$global:InstallDrive\Visma\install\backup\$global:SelectedBackupfolder\Wwwroot\$global:SelectedBigram\$global:SelectedBigram\Login\Web.config" -ErrorAction SilentlyContinue
				
				
				$useSSOValue = $usesso.configuration.appsettings.add.where{ $_.key -eq 'UseSSo' }.value
				$SingleSignOnMethodValue = $usesso.configuration.appsettings.add.where{ $_.key -eq 'SingleSignOnMethod' }.value
				$MultitenantModeValue = $usesso.configuration.appsettings.add.where{ $_.key -eq 'MultitenantMode' }.value
				
				
				$data3 += $object
				
				$result = $data3 | Out-String
				
				$InventoryTextBox.AppendText("`n")
				$InventoryTextBox.AppendText("INVENTORY SETTINGS LOGIN")
				
				
				$InventoryTextBox.AppendText("`n")
				$InventoryTextBox.AppendText("UseSSO = $useSSOValue ")
				$InventoryTextBox.AppendText("`n")
				$InventoryTextBox.AppendText("SingleSignOnMethod = $SingleSignOnMethodValue")
				$InventoryTextBox.AppendText("`n")
				$InventoryTextBox.AppendText("MultitenantMode = $MultitenantModeValue")
				$InventoryTextBox.ScrollToCaret()
				
				Write-Log -Level INFO -Message " INVENTORY SETTINGS LOGIN "
				Write-Log -Level INFO -Message " UseSSO   value = $useSSOValue "
				Write-Log -Level INFO -Message " SingleSignOnMethod   value = $SingleSignOnMethodValue "
				Write-Log -Level INFO -Message " MultitenantMode   value = $MultitenantModeValue "
				
			}
			
			Else
			{
				
				$InventoryTextBox.AppendText("`n")
				$InventoryTextBox.AppendText("Use SSO ")
				$InventoryTextBox.AppendText("`n")
				$InventoryTextBox.AppendText("No web.config present  ")
				$InventoryTextBox.ScrollToCaret()
				Write-Log -Level INFO -Message " INVENTORY SETTINGS ------------"
				Write-Log -Level INFO -Message "No web.config present for login component"
			}
			
			###################################
			# INVENTORY for license.lic
			###################################	
			
			$haveLicensJSON = (Test-path -Path "$global:InstallDrive\Visma\install\backup\$global:SelectedBackupfolder\Wwwroot\$global:SelectedBigram\PIP\IntegrationApi\license.lic")
			
			if ($haveLicensJSON -eq $true)
			{
				
				$InventoryTextBox.AppendText("`n")
				$InventoryTextBox.AppendText("INVENTORY SETTINGS API         ")
				
				$InventoryTextBox.AppendText("`n")
				$InventoryTextBox.AppendText("Integration API ")
				$InventoryTextBox.AppendText("`n")
				$InventoryTextBox.AppendText("license.lic exist")
				$InventoryTextBox.ScrollToCaret()
				
				Write-Log -Level INFO -Message " Integration API   ---------------"
				Write-Log -Level INFO -Message "Settings from backup: license.lic exist"
				
			}
			
			else
			{
				
				
				$InventoryTextBox.AppendText("`n")
				$InventoryTextBox.AppendText("INVENTORY SETTINGS API         ")
				
				$InventoryTextBox.AppendText("`n")
				$InventoryTextBox.AppendText("Integration API")
				$InventoryTextBox.AppendText("`n")
				$InventoryTextBox.AppendText("No License.lic... ")
				$InventoryTextBox.ScrollToCaret()
				
				Write-Log -Level INFO -Message " Integration API    ---------------"
				Write-Log -Level INFO -Message "No License.lic..."
				
			}
		}
		
	}
	
	else
	{
		Write-Host "No www-backup"
		Write-Log -Level INFO -Message "No backup of WWW in $SelectedBackupfolder"
		$InventoryTextBox.AppendText("`n")
		$InventoryTextBox.AppendText("Found no www-folder in $SelectedBackupfolder")
	}
	
	
	
}
]]></Code>
  <TV>0</TV>
  <Mode>1</Mode>
  <Assemblies />
</File>