<File version="3.2">
  <FileID>1675b376-67a2-4c14-9366-a4f84698131d</FileID>
  <Preview>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</Preview>
  <Form>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
fFcothpPH8OrfwBun5pSeCYAAA==</Form>
  <Code><![CDATA[
$formInventory_Load={
	#TODO: Initialize Form Controls here
	$InventoryStatusbar.Text = 'Bigram:' + $global:SelectedBigram + ' BackupFolder:' + $global:SelectedBackupfolder
	
	#Requires -Version 5.1
}

$buttonSystem_Click={
	#TODO: Place custom script here
	$selectedBackupfolder = $global:SelectedBackupfolder
	$selectedBigram = $global:SelectedBigram
	$services = "Scheduler", "Ciceron Server Manager", "NeptuneMB_$selectedBigram", "PersonecPBatchManager$selectedBigram", "PersonecPUtdataExportImportService$selectedBigram", "RSPFlexService$selectedBigram", "Visma.P-Background-Service - $selectedBigram", "Visma.PersonecP.PufIa.WinSvc - $selectedBigram"
	

		
		###################################
		# INVENTORY OF SERVICES
		###################################
		
		$data = @()
		
		foreach ($Service in $Services)
		{
			$InfoOnService = Get-CimInstance win32_service | Where-Object Name -eq $Service | Select-Object name, startname, state, Startmode -ErrorAction SilentlyContinue
			
			if ($InfoOnService -ne $null)
			{
				$object = New-Object -TypeName PSObject
				$object | Add-Member -MemberType NoteProperty -Name 'Service' -Value $InfoOnService.name
				$object | Add-Member -MemberType NoteProperty -Name 'Konto' -Value $InfoOnService.Startname
				$object | Add-Member -MemberType NoteProperty -Name 'Status' -Value $InfoOnService.state
				$object | Add-Member -MemberType NoteProperty -Name 'StartMode' -Value $InfoOnService.startmode
				
				$data += $object
			}
			
			else
			{
				$object = New-Object -TypeName PSObject
				$object | Add-Member -MemberType NoteProperty -Name 'Service' -Value $Service
				$object | Add-Member -MemberType NoteProperty -Name 'Konto' -Value "--"
				$object | Add-Member -MemberType NoteProperty -Name 'Status' -Value "Does not exist"
				$object | Add-Member -MemberType NoteProperty -Name 'StartMode' -Value "--"
				
				$data += $object
			}
			
		}
		
		$result = $data | Out-String
		$richtextbox1.Clear()
		$richtextbox1.AppendText("`n")
		$richtextbox1.AppendText("Services Installed:")
		$richtextbox1.AppendText("`n")
		$richtextbox1.AppendText($result)
		$richtextbox1.ScrollToCaret()
		Write-Log -Level INFO -Message "Services Installed:"
		Write-Log -Level INFO -Message $result
		
		###################################
		# INVENTORY OF APPLICATIONS
		###################################	
		
		$data2 = @()
		
		$installed = Get-ItemProperty -Path 'HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall\*',
									  'HKLM:\SOFTWARE\WOW6432Node\Microsoft\Windows\CurrentVersion\Uninstall\*',
									  'HKCU:\SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall\*',
									  'HKCU:\SOFTWARE\WOW6432Node\Microsoft\Windows\CurrentVersion\Uninstall\*' -ErrorAction Ignore | Where-Object publisher -eq 'Visma' | Select-Object -Property DisplayName, DisplayVersion, Publisher | Sort-Object -Property DisplayName
		
		
		if ($installed -ne $null)
		{
			foreach ($inst in $installed)
			{
				
				
				$object = New-Object -TypeName PSObject
				$object | Add-Member -MemberType NoteProperty -Name 'Applikation' -Value $inst.displayname
				$object | Add-Member -MemberType NoteProperty -Name 'Version' -Value $inst.displayversion
				$object | Add-Member -MemberType NoteProperty -Name 'Utgivare' -Value $inst.publisher
				
				$data2 += $object
			}
			
			$result = $data2 | Out-String
			$richtextbox1.AppendText("`n")
			$richtextbox1.AppendText("Applications installed:  ")
			$richtextbox1.AppendText("`n")
			$richtextbox1.AppendText($result)
			$richtextbox1.ScrollToCaret()
			Write-Log -Level INFO -Message " Applications Installed:"
			Write-Log -Level INFO -Message $result
			
		}
		
		
		else
		{
			$richtextbox1.AppendText("`n")

			$richtextbox1.AppendText("NO Applications installed:")
			$richtextbox1.AppendText("`n")
			
			Write-Log -Level INFO -Message "No Applications from Visma installed"
			
		}
		
		###################################
		# INVENTORY OF APPLICATIONPOOLS
		###################################	
		
		try
		{
			$appPools = Get-WebConfiguration -Filter '/system.applicationHost/applicationPools/add'
			$appPoolResultat = [System.Collections.ArrayList]::new()
			
			if ($appPools.count -ge '2')
			{
				foreach ($appPool in $appPools)
				{
					
					[void]$appPoolResultat.add([PSCustomObject]@{
							Name = $appPool.name
							User = $appPool.ProcessModel.UserName
							#Password = $appPool.ProcessModel.Password
						})
					
				}
				
				$result = $appPoolResultat | Out-String
				

				$richtextbox1.AppendText("`n")
				$richtextbox1.AppendText("Applications Pools:")
				$richtextbox1.AppendText("`n")
				$richtextbox1.AppendText($result)
				$richtextbox1.ScrollToCaret()
				Write-Log -Level INFO -Message " Application Pools:"
				Write-Log -Level INFO -Message $result
			}
			
			else
			{
				$richtextbox1.AppendText("`n")

				$richtextbox1.AppendText("No Applications Pools present   ")
				$richtextbox1.AppendText("`n")

				$richtextbox1.ScrollToCaret()
				Write-Log -Level INFO -Message "NO Application Pools"

			}
		}
		
		catch
		{
			Write-Log -Level INFO -message -"no app-pool"
			
		}
	
	
}

$buttonPassword_Click={
	#TODO: Place custom script here
	$selectedBackupfolder = $global:SelectedBackupfolder
	$selectedBigram = $global:SelectedBigram
	

	
		
		###################################
		# Check backupfolder if encrypted
		###################################	
		
		$AppPaths = (Get-ChildItem -Path "$InstallDrive\Visma\Install\Backup\$selectedBackupfolder\wwwroot" -Recurse -Filter web.config).DirectoryName
		
		
		foreach ($AppPath in $AppPaths)
		{
			
			[XML]$CheckElementXML = Get-Content -Path "$InstallDrive\Visma\Install\Backup\$selectedBackupfolder\wwwroot\$selectedBigram\PPP\Personec_P_web\Lon\web.config"
			
			
		}
		
		[XML]$CheckElementXML = Get-Content -Path "$InstallDrive\Visma\Install\Backup\$selectedBackupfolder\wwwroot\$selectedBigram\PPP\Personec_P_web\Lon\web.config"
		
		if ($CheckElementXML.configuration.appSettings.EncryptedData -ne $null)
		{
			$richtextbox1.Clear()
			$richtextbox1.AppendText("`n")

			$richtextbox1.AppendText("Backupfolder is encrypted!!!")
			$richtextbox1.AppendText("`n")
			$richtextbox1.ScrollToCaret()
			
		}
		else
		{
			
			$data5 = @()
			
			
			$pstid = Get-IniFile "$InstallDrive\Visma\install\backup\$selectedBackupfolder\programs\$selectedBigram\ppp\Personec_p\pstid.ini" -ErrorAction SilentlyContinue
			[xml]$Batch = Get-Content "$InstallDrive\Visma\install\backup\$selectedBackupfolder\Programs\$selectedBigram\PPP\Personec_P\batch.config" -ErrorAction SilentlyContinue
			[XML]$PIA = Get-Content "$InstallDrive\Visma\install\backup\$selectedBackupfolder\Wwwroot\$selectedBigram\PIA\PUF_IA Module\web.config" -ErrorAction SilentlyContinue
			
			$object = New-Object -TypeName PSObject
			$object | Add-Member -MemberType NoteProperty -Name 'NeptuneUser' -Value $PSTID.styr.NeptuneUser
			$object | Add-Member -MemberType NoteProperty -Name 'NeptunePassword' -Value $PSTID.styr.NeptuneUser
			$object | Add-Member -MemberType NoteProperty -Name 'Batchuser' -Value $Batch.configuration.appsettings.add.where{ $_.key -eq 'sysuser' }.value
			$object | Add-Member -MemberType NoteProperty -Name 'BatchPassword' -Value $Batch.configuration.appsettings.add.where{ $_.key -eq 'SysPassword' }.value
			
			$object | Add-Member -MemberType NoteProperty -Name 'PPP Username' -Value $PIA.configuration.appsettings.add.where{ $_.key -eq 'P.Database.User' }.value
			$object | Add-Member -MemberType NoteProperty -Name 'PPP Password' -Value $PIA.configuration.appsettings.add.where{ $_.key -eq 'P.Database.Password' }.value
			
			$object | Add-Member -MemberType NoteProperty -Name 'PUD Username' -Value $PIA.configuration.appsettings.add.where{ $_.key -eq 'U.Database.User' }.value
			$object | Add-Member -MemberType NoteProperty -Name 'PUD Password' -Value $PIA.configuration.appsettings.add.where{ $_.key -eq 'U.Database.Password' }.value
			
			$object | Add-Member -MemberType NoteProperty -Name 'PFH Username' -Value $PIA.configuration.appsettings.add.where{ $_.key -eq 'F.Database.User' }.value
			$object | Add-Member -MemberType NoteProperty -Name 'PFH Password' -Value $PIA.configuration.appsettings.add.where{ $_.key -eq 'F.Database.Password' }.value
			
			$object | Add-Member -MemberType NoteProperty -Name 'Service Username' -Value $PIA.configuration.appsettings.add.where{ $_.key -eq 'ServiceUser.Login' }.value
			$object | Add-Member -MemberType NoteProperty -Name 'Service Password' -Value $PIA.configuration.appsettings.add.where{ $_.key -eq 'serviceUser.Secret' }.value
			$data5 += $object
			
			$result = $data5 | Out-String
			
			$richtextbox1.AppendText("`n")
		$richtextbox1.AppendText("Settings from backup:")
		$richtextbox1.AppendText("`n")
		$richtextbox1.AppendText("$result")
			$richtextbox1.ScrollToCaret()
		}
	
}

]]></Code>
  <TV>0</TV>
  <Mode>0</Mode>
  <Assemblies />
</File>