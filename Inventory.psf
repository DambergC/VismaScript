<File version="3.2">
  <FileID>1675b376-67a2-4c14-9366-a4f84698131d</FileID>
  <Preview>iVBORw0KGgoAAAANSUhEUgAAAgAAAAIACAYAAAD0eNT6AAAAAXNSR0IArs4c6QAAAARnQU1BAACx
jwv8YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAADTzSURBVHhe7d15cJR3gub56uje6N75c2J2Y3Y3
JmJ7dyN2Nzp6u7e7Zrqra3qnqtxV7bPK5bva2MYYbO7D2AbMDTY35sbY5sbcIAG6EIfQfd/3feSp
W+hAYDA8+/u9QnaC0wm2wQWvvp+IbwhJmalU4vD7ZCqV/AQAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD4PuL+5E/+
pOov/uLPq5544vGqSZOmVE2ZNNV5S0RERA9+U6ZMrXpjzJiq//Af/n3Vn/7pn1aZY7stsj/7sz9r
/qu/+itNmz5Dh0/Eq6zOr5qWLlU3dxAREdGDXkunOW53KquwQitWrdF//fnP9d//u3+nm4f5b/cX
f/7nVdOnzVBmUa2yKgO6UNigpIJ6JRUSERHRQ5E5bqeUtKi0oU1btn6i/+k//sc7D4DHH3us6sDR
GOVUB83Bv17JRERE9FCWVuZRdnGdJowff+cBMGXSlKqKhlalFDcqpaiBiIiIHtLOF9SpofWSNmzY
dOcBMG3qtKrmYK+SzQBIJSIiooc2+2P8hmC/1q5ddxePAEyZWtXo71FqSbPSSpqIiIj+6GWWe5Rd
5bvn2csd/hoZ5S3KrvSGPd0PKavCo/TSm1+j7H59Da/5Gt88bicXNaqhdUBr7noABHqUVtriXBgR
EdEfs4yyZsVcKNae46naE5WmvfegPVH2slIVl1KqTHNQzjQH/9PpFdoXPfS5cOf5PtnLOnGu0Pk+
7Nc4n1uj/ScznO8l3Om/T3uOp+hIQq5zjz/d3Faht11KcZMa734ATKlqClw0F+JxlkrEzDeTURMw
b+/itERERN+xHHPv9mRSkfYeu6D45CLFXbiXFWr3kSQlmAP/+dxa7TqcpNikQsXdq69jLsde5/1R
KTp+psA5IO86ckEnz+aZzxWHP8/3yXyNI7EZZlikO48EhN5+9tH8prZL320AZJR7nYdGvlFtUJmV
PmWaL5JZ1KjMs4XKaGhXprfLfPxbzkNERPQ9yqsJav+pTEWfyVNetc95WDv9HmQvJ7/Gbw6cmc7B
OS6tXJ+be+sFtX7zOXNP+rbTZpvjXn5dq/Jrb8t8zF5He7C9/Xy2HHNcTDAHe3tPPdXcG99+4Jzy
q723nHbo4XpzPK3wfHWZudV+ZZjBkFsd+OrrZpnbI83ey795nuHzZ5Q3K7WgVp/sP+tcz9Dbzz6a
39Q+ePcDoDnQG3YAZJkrlBmXq0xzgZmN5qBf2KCs15Yp56X3lbXyoDLNUstsaBsaB7ef13zMXjH7
s5DbP/dDyqoY+tmHvWHCfZ6IiB7e7MH1QEyWTp4rcN4/nzf0O+4/NHs59mfxxxJyFHWuUPHpFTp4
MkM5VV7zubpbTmt/jr7/ZIoWrfhEC1dsc94ON3/ZVq3e8rkS0suc04Wez5ZmDuKnU0v1+Yl0ZwDs
OpKk3Er7fdQqKd98HdN5kz3v8TM5Wr5+l+Yt3aLNO6N1Nrtam7Yf17wPNpuP71bU2VzndPb62fM4
b00XzNdJLajT9kPnvzEA0ocHwJq7HQDBXmVV+p0L+qqagLLsGvn5ROU+MlVZObXK7rik7C0nlf+T
vzb9g3L/2xRlH05VtqdL2VUh5zd/ziqvVFx8ppLLh96/5bJ/QFll9udDnrCfIyKih7uCujYdistW
jBkA9scByUVNzs+1f2j2cvLMndooMwBOnC/W6cxKHTqVoXxzrLMH2eHT2YO2fTt/6QYlX0hXWWml
KitrVFlR7ZSfX6xt2/Y4B2z7+jnD5xvO3iE+k1ZmBkSmczDefeSC8szIsAftZHMnejh7zF2y6lMd
OHBMJSXlWr9phya/s0ybtuxSSXG59u07og/WbndOd6Hg6/PZUs31TTOXt/PwBecRg9DbL9PcmW/p
uPwdBkBrr7mhA8o1B+qvaupUdkyO8v6Hp1Twk79S7t+PUXZUhnK7ryj3pSU3R8DfKe/fP6rcT+OU
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</Preview>
  <Form>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
8jPJl7RgfmG2cJcHc+VN4/ljeP1fdEiFWdYmAAA=</Form>
  <Code><![CDATA[#requires -version 5.1

$formInventory_Load = {
	If ($global:SelectedBigram -eq 'Select Bigram' -or $global:SelectedBackupfolder -eq 'Select Folder')
	{
		$InventoryTextBox.AppendText("`n")
		$InventoryTextBox.AppendText("You Need to select BIGRAM and BackupFolder")
		$InventoryTextBox.ScrollToCaret()
		$formInventory.Close()
	}
	
	#TODO: Initialize Form Controls here
	Refresh-StatusBar
	
	if ($global:SelectedBackupfolder -eq 'Select Folder' -or $global:SelectedBigram -eq 'Select Bigram')
	{
		$buttonSystem.Enabled = $false
		$buttonSettings.Enabled = $false
		$buttonPassword.Enabled = $false
	}
	
	else
	{
		$buttonSystem.Enabled = $true
		$buttonSettings.Enabled = $true
		$buttonPassword.Enabled = $true
	}
	
	#Requires -Version 5.1
}

$buttonSystem_Click={
	#TODO: Place custom script here
	
	$Services = "Scheduler", "Ciceron Server Manager", "NeptuneMB_$global:SelectedBigram", "PersonecPBatchManager$global:SelectedBigram", "PersonecPUtdataExportImportService$global:SelectedBigram", "RSPFlexService$global:SelectedBigram", "Visma.P-Background-Service - $global:SelectedBigram", "Visma.PersonecP.PufIa.WinSvc - $global:SelectedBigram"

		
		###################################
		# INVENTORY OF SERVICES
		###################################
		
		$data = @()
		
		foreach ($Service in $Services)
		{
			$InfoOnService = Get-CimInstance win32_service | Where-Object Name -eq $Service | Select-Object name, startname, state, Startmode -ErrorAction SilentlyContinue
			
			if ($InfoOnService -ne $null)
			{
				$object = New-Object -TypeName PSObject
				$object | Add-Member -MemberType NoteProperty -Name 'Service' -Value $InfoOnService.name
				$object | Add-Member -MemberType NoteProperty -Name 'Konto' -Value $InfoOnService.Startname
				$object | Add-Member -MemberType NoteProperty -Name 'Status' -Value $InfoOnService.state
				$object | Add-Member -MemberType NoteProperty -Name 'StartMode' -Value $InfoOnService.startmode
				
				$data += $object
			}
			
			else
			{
				$object = New-Object -TypeName PSObject
				$object | Add-Member -MemberType NoteProperty -Name 'Service' -Value $Service
				$object | Add-Member -MemberType NoteProperty -Name 'Konto' -Value "--"
				$object | Add-Member -MemberType NoteProperty -Name 'Status' -Value "Does not exist"
				$object | Add-Member -MemberType NoteProperty -Name 'StartMode' -Value "--"
				
				$data += $object
			}
			
		}
		
		$result = $data | Out-String
		$InventoryTextBox.Clear()
		$InventoryTextBox.AppendText("`n")
		$InventoryTextBox.AppendText("Services Installed:")
		$InventoryTextBox.AppendText("`n")
		$InventoryTextBox.AppendText($result)
		$InventoryTextBox.ScrollToCaret()
		Write-Log -Level INFO -Message "Services Installed:"
		Write-Log -Level INFO -Message $result
		
		###################################
		# INVENTORY OF APPLICATIONS
		###################################	
		
		$data2 = @()
		
		$installed = Get-ItemProperty -Path 'HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall\*',
									  'HKLM:\SOFTWARE\WOW6432Node\Microsoft\Windows\CurrentVersion\Uninstall\*',
									  'HKCU:\SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall\*',
									  'HKCU:\SOFTWARE\WOW6432Node\Microsoft\Windows\CurrentVersion\Uninstall\*' -ErrorAction Ignore | Where-Object publisher -eq 'Visma' | Select-Object -Property DisplayName, DisplayVersion, Publisher | Sort-Object -Property DisplayName
		
		
		if ($installed -ne $null)
		{
			foreach ($inst in $installed)
			{
				
				
				$object = New-Object -TypeName PSObject
				$object | Add-Member -MemberType NoteProperty -Name 'Applikation' -Value $inst.displayname
				$object | Add-Member -MemberType NoteProperty -Name 'Version' -Value $inst.displayversion
				$object | Add-Member -MemberType NoteProperty -Name 'Utgivare' -Value $inst.publisher
				
				$data2 += $object
			}
			
			$result = $data2 | Out-String
			$InventoryTextBox.AppendText("`n")
			$InventoryTextBox.AppendText("Applications installed:")
			$InventoryTextBox.AppendText("`n")
			$InventoryTextBox.AppendText($result)
			$InventoryTextBox.ScrollToCaret()
			Write-Log -Level INFO -Message " Applications Installed:"
			Write-Log -Level INFO -Message $result
			
		}
		
		
		else
		{
			$InventoryTextBox.AppendText("`n")

			$InventoryTextBox.AppendText("NO Applications installed:")
			$InventoryTextBox.AppendText("`n")
			
			Write-Log -Level INFO -Message "No Applications from Visma installed"
			
		}
		
		###################################
		# INVENTORY OF APPLICATIONPOOLS
		###################################	
	
	$ISWebserver = Test-WebServer
	
	
	if ($ISWebServer -eq $true)
	{
		
		$appPools = Get-WebConfiguration -Filter '/system.applicationHost/applicationPools/add'
		$appPoolResultat = [System.Collections.ArrayList]::new()
		
		if ($appPools.count -ge '2')
		{
			foreach ($appPool in $appPools)
			{
				
				[void]$appPoolResultat.add([PSCustomObject]@{
						Name = $appPool.name
						User = $appPool.ProcessModel.UserName
						#Password = $appPool.ProcessModel.Password
					})
				
			}
			
			$result = $appPoolResultat | Out-String
			
			
			$InventoryTextBox.AppendText("`n")
			$InventoryTextBox.AppendText("Applications Pools:")
			$InventoryTextBox.AppendText("`n")
			$InventoryTextBox.AppendText($result)
			$InventoryTextBox.ScrollToCaret()
			Write-Log -Level INFO -Message " Application Pools:"
			Write-Log -Level INFO -Message $result
		}
		
		else
		{
			$InventoryTextBox.AppendText("`n")
			
			$InventoryTextBox.AppendText("No Applications Pools present   ")
			$InventoryTextBox.AppendText("`n")
			
			$InventoryTextBox.ScrollToCaret()
			Write-Log -Level INFO -Message "NO Application Pools"
			
		}
	}
	
	else
	{
		$InventoryTextBox.AppendText("No Webserver, no applicationpools.")
		$InventoryTextBox.AppendText("`n")
		$InventoryTextBox.ScrollToCaret()
		Write-Log -Level INFO -Message "No Webserver, no applicationpools."
		
		
	}
	
	
}

$buttonPassword_Click={
	#TODO: Place custom script here
	$global:SelectedBackupfolder = $global:SelectedBackupfolder

		
		###################################
		# Check backupfolder if encrypted
		###################################	
		
		$AppPaths = (Get-ChildItem -Path "$global:InstallDrive\Visma\Install\Backup\$global:SelectedBackupfolder\wwwroot" -Recurse -Filter web.config).DirectoryName
		
		
		foreach ($AppPath in $AppPaths)
		{
			
			[XML]$CheckElementXML = Get-Content -Path "$global:InstallDrive\Visma\Install\Backup\$global:SelectedBackupfolder\wwwroot\$global:SelectedBigram\PPP\Personec_P_web\Lon\web.config"
			
			
		}
		
		[XML]$CheckElementXML = Get-Content -Path "$global:InstallDrive\Visma\Install\Backup\$global:SelectedBackupfolder\wwwroot\$global:SelectedBigram\PPP\Personec_P_web\Lon\web.config"
		
		if ($CheckElementXML.configuration.appSettings.EncryptedData -ne $null)
		{
			$InventoryTextBox.Clear()
			$InventoryTextBox.AppendText("`n")

			$InventoryTextBox.AppendText("Backupfolder is encrypted!!!")
			$InventoryTextBox.AppendText("`n")
			$InventoryTextBox.ScrollToCaret()
			
		}
		else
		{
			
			$data5 = @()
			
			
			$pstid = Get-IniFile "$global:InstallDrive\Visma\install\backup\$global:SelectedBackupfolder\programs\$global:SelectedBigram\ppp\Personec_p\pstid.ini" -ErrorAction SilentlyContinue
			[xml]$Batch = Get-Content "$global:InstallDrive\Visma\install\backup\$global:SelectedBackupfolder\Programs\$global:SelectedBigram\PPP\Personec_P\batch.config" -ErrorAction SilentlyContinue
			[XML]$PIA = Get-Content "$global:InstallDrive\Visma\install\backup\$global:SelectedBackupfolder\Wwwroot\$global:SelectedBigram\PIA\PUF_IA Module\web.config" -ErrorAction SilentlyContinue
			
			$object = New-Object -TypeName PSObject
			$object | Add-Member -MemberType NoteProperty -Name 'NeptuneUser' -Value $PSTID.styr.NeptuneUser
			$object | Add-Member -MemberType NoteProperty -Name 'NeptunePassword' -Value $PSTID.styr.NeptuneUser
			$object | Add-Member -MemberType NoteProperty -Name 'Batchuser' -Value $Batch.configuration.appsettings.add.where{ $_.key -eq 'sysuser' }.value
			$object | Add-Member -MemberType NoteProperty -Name 'BatchPassword' -Value $Batch.configuration.appsettings.add.where{ $_.key -eq 'SysPassword' }.value
			
			$object | Add-Member -MemberType NoteProperty -Name 'PPP Username' -Value $PIA.configuration.appsettings.add.where{ $_.key -eq 'P.Database.User' }.value
			$object | Add-Member -MemberType NoteProperty -Name 'PPP Password' -Value $PIA.configuration.appsettings.add.where{ $_.key -eq 'P.Database.Password' }.value
			
			$object | Add-Member -MemberType NoteProperty -Name 'PUD Username' -Value $PIA.configuration.appsettings.add.where{ $_.key -eq 'U.Database.User' }.value
			$object | Add-Member -MemberType NoteProperty -Name 'PUD Password' -Value $PIA.configuration.appsettings.add.where{ $_.key -eq 'U.Database.Password' }.value
			
			$object | Add-Member -MemberType NoteProperty -Name 'PFH Username' -Value $PIA.configuration.appsettings.add.where{ $_.key -eq 'F.Database.User' }.value
			$object | Add-Member -MemberType NoteProperty -Name 'PFH Password' -Value $PIA.configuration.appsettings.add.where{ $_.key -eq 'F.Database.Password' }.value
			
			$object | Add-Member -MemberType NoteProperty -Name 'Service Username' -Value $PIA.configuration.appsettings.add.where{ $_.key -eq 'ServiceUser.Login' }.value
			$object | Add-Member -MemberType NoteProperty -Name 'Service Password' -Value $PIA.configuration.appsettings.add.where{ $_.key -eq 'serviceUser.Secret' }.value
			$data5 += $object
			
			$result = $data5 | Out-String
			
			$InventoryTextBox.AppendText("`n")
		$InventoryTextBox.AppendText("Settings from backup:")
		$InventoryTextBox.AppendText("`n")
		$InventoryTextBox.AppendText("$result")
			$InventoryTextBox.ScrollToCaret()
		}
	
}


$buttonSettings_Click={
	#TODO: Place custom script here

	

		###################################
		# Check backupfolder if encrypted
		###################################	
		
		$AppPaths = (Get-ChildItem -Path "$global:InstallDrive\Visma\Install\Backup\$global:SelectedBackupfolder\wwwroot" -Recurse -Filter web.config).DirectoryName
		
		
		foreach ($AppPath in $AppPaths)
		{
			
			[XML]$CheckElementXML = Get-Content -Path "$global:InstallDrive\Visma\Install\Backup\$global:SelectedBackupfolder\wwwroot\$global:SelectedBigram\PPP\Personec_P_web\Lon\web.config"
			
			
		}
		
		[XML]$CheckElementXML = Get-Content -Path "$global:InstallDrive\Visma\Install\Backup\$global:SelectedBackupfolder\wwwroot\$global:SelectedBigram\PPP\Personec_P_web\Lon\web.config"
		
		if ($CheckElementXML.configuration.appSettings.EncryptedData -ne $null)
		{

			$InventoryTextBox.AppendText("`n")
			$InventoryTextBox.AppendText("Backupfolder is encrypted!!!")

			$InventoryTextBox.ScrollToCaret()
			
		}
		else
		{
			
			###################################
			# INVENTORY settings
			###################################	
			$UseSSOBackup = (Test-path -Path "$global:InstallDrive\Visma\install\backup\$global:SelectedBackupfolder\Wwwroot\$global:SelectedBigram\$global:SelectedBigram\Login\Web.config")
			
			if ($UseSSOBackup -eq $true)
			{
				
				[XML]$UseSSO = Get-Content "$global:InstallDrive\Visma\install\backup\$global:SelectedBackupfolder\Wwwroot\$global:SelectedBigram\$global:SelectedBigram\Login\Web.config" -ErrorAction SilentlyContinue
				
				
				$useSSOValue = $usesso.configuration.appsettings.add.where{ $_.key -eq 'UseSSo' }.value
				$SingleSignOnMethodValue = $usesso.configuration.appsettings.add.where{ $_.key -eq 'SingleSignOnMethod' }.value
				$MultitenantModeValue = $usesso.configuration.appsettings.add.where{ $_.key -eq 'MultitenantMode' }.value
				
				
				$data3 += $object
				
				$result = $data3 | Out-String

				$InventoryTextBox.AppendText("`n")
				$InventoryTextBox.AppendText("INVENTORY SETTINGS LOGIN")

				
				$InventoryTextBox.AppendText("`n")
				$InventoryTextBox.AppendText("UseSSO = $useSSOValue ")
				$InventoryTextBox.AppendText("`n")
				$InventoryTextBox.AppendText("SingleSignOnMethod = $SingleSignOnMethodValue")
				$InventoryTextBox.AppendText("`n")
				$InventoryTextBox.AppendText("MultitenantMode = $MultitenantModeValue")
				$InventoryTextBox.ScrollToCaret()

				Write-Log -Level INFO -Message " INVENTORY SETTINGS LOGIN "
				Write-Log -Level INFO -Message " UseSSO   value = $useSSOValue "
				Write-Log -Level INFO -Message " SingleSignOnMethod   value = $SingleSignOnMethodValue "
				Write-Log -Level INFO -Message " MultitenantMode   value = $MultitenantModeValue "

			}
			
			Else
			{
				
				$InventoryTextBox.AppendText("`n")
				$InventoryTextBox.AppendText("Use SSO ")
				$InventoryTextBox.AppendText("`n")
				$InventoryTextBox.AppendText("No web.config present  ")
				$InventoryTextBox.ScrollToCaret()
				Write-Log -Level INFO -Message " INVENTORY SETTINGS ------------"
				Write-Log -Level INFO -Message "No web.config present for login component"
			}
			
			###################################
			# INVENTORY for license.lic
			###################################	
			
			$haveLicensJSON = (Test-path -Path "$global:InstallDrive\Visma\install\backup\$global:SelectedBackupfolder\Wwwroot\$global:SelectedBigram\PIP\IntegrationApi\license.lic")
			
			if ($haveLicensJSON -eq $true)
			{

				$InventoryTextBox.AppendText("`n")
				$InventoryTextBox.AppendText("INVENTORY SETTINGS API         ")

				$InventoryTextBox.AppendText("`n")
				$InventoryTextBox.AppendText("Integration API ")
				$InventoryTextBox.AppendText("`n")
				$InventoryTextBox.AppendText("license.lic exist")
				$InventoryTextBox.ScrollToCaret()

				Write-Log -Level INFO -Message " Integration API   ---------------"
				Write-Log -Level INFO -Message "Settings from backup: license.lic exist"

			}
			
			else
			{
				

				$InventoryTextBox.AppendText("`n")
				$InventoryTextBox.AppendText("INVENTORY SETTINGS API         ")

				$InventoryTextBox.AppendText("`n")
				$InventoryTextBox.AppendText("Integration API")
				$InventoryTextBox.AppendText("`n")
				$InventoryTextBox.AppendText("No License.lic... ")
				$InventoryTextBox.ScrollToCaret()

				Write-Log -Level INFO -Message " Integration API    ---------------"
				Write-Log -Level INFO -Message "No License.lic..."

			}
		}
	
}
]]></Code>
  <TV>0</TV>
  <Mode>1</Mode>
  <Assemblies />
</File>